; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29111.0 

include listing.inc

INCLUDELIB OLDNAMES

prime8bytes DQ	cf1bbcdcb7a56463H
prime5bytes DQ	000000cf1bbcdcbbH
prime7bytes DQ	00cf1bbcdcbfa563H
prime6bytes DQ	0000cf1bbcdcbf9bH
prime4bytes DD	09e3779b1H
PUBLIC	ZSTD_compressBlock_doubleFast_extDict
PUBLIC	ZSTD_fillDoubleHashTable
PUBLIC	ZSTD_compressBlock_doubleFast_dictMatchState
PUBLIC	ZSTD_compressBlock_doubleFast
pdata	SEGMENT
$pdata$ZSTD_compressBlock_doubleFast_extDict_generic DD imagerel ZSTD_compressBlock_doubleFast_extDict_generic
	DD	imagerel ZSTD_compressBlock_doubleFast_extDict_generic+6280
	DD	imagerel $unwind$ZSTD_compressBlock_doubleFast_extDict_generic
$pdata$ZSTD_compressBlock_doubleFast_generic DD imagerel ZSTD_compressBlock_doubleFast_generic
	DD	imagerel ZSTD_compressBlock_doubleFast_generic+5409
	DD	imagerel $unwind$ZSTD_compressBlock_doubleFast_generic
$pdata$ZSTD_count_2segments DD imagerel ZSTD_count_2segments
	DD	imagerel ZSTD_count_2segments+106
	DD	imagerel $unwind$ZSTD_count_2segments
$pdata$ZSTD_storeSeq DD imagerel ZSTD_storeSeq
	DD	imagerel ZSTD_storeSeq+271
	DD	imagerel $unwind$ZSTD_storeSeq
$pdata$ZSTD_compressBlock_doubleFast_extDict DD imagerel $LN12
	DD	imagerel $LN12+136
	DD	imagerel $unwind$ZSTD_compressBlock_doubleFast_extDict
$pdata$ZSTD_fillDoubleHashTable DD imagerel $LN87
	DD	imagerel $LN87+84
	DD	imagerel $unwind$ZSTD_fillDoubleHashTable
$pdata$1$ZSTD_fillDoubleHashTable DD imagerel $LN87+84
	DD	imagerel $LN87+384
	DD	imagerel $chain$1$ZSTD_fillDoubleHashTable
$pdata$2$ZSTD_fillDoubleHashTable DD imagerel $LN87+384
	DD	imagerel $LN87+397
	DD	imagerel $chain$2$ZSTD_fillDoubleHashTable
$pdata$ZSTD_compressBlock_doubleFast_dictMatchState DD imagerel $LN2691
	DD	imagerel $LN2691+10801
	DD	imagerel $unwind$ZSTD_compressBlock_doubleFast_dictMatchState
$pdata$ZSTD_compressBlock_doubleFast DD imagerel $LN2641
	DD	imagerel $LN2641+7236
	DD	imagerel $unwind$ZSTD_compressBlock_doubleFast
xdata	SEGMENT
$unwind$ZSTD_compressBlock_doubleFast_extDict_generic DD 0b1c01H
	DD	01d341cH
	DD	014011cH
	DD	0e013f015H
	DD	0c00fd011H
	DD	0600c700dH
	DD	0500bH
$unwind$ZSTD_compressBlock_doubleFast_generic DD 0a1d01H
	DD	019011dH
	DD	0e014f016H
	DD	0c010d012H
	DD	0600d700eH
	DD	0300b500cH
$unwind$ZSTD_count_2segments DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
$unwind$ZSTD_storeSeq DD 020501H
	DD	013405H
$unwind$ZSTD_compressBlock_doubleFast_extDict DD 010401H
	DD	06204H
$unwind$ZSTD_fillDoubleHashTable DD 070d01H
	DD	0f009220dH
	DD	07005e007H
	DD	050036004H
	DD	03002H
$chain$1$ZSTD_fillDoubleHashTable DD 041021H
	DD	02d410H
	DD	0cc405H
	DD	imagerel $LN87
	DD	imagerel $LN87+84
	DD	imagerel $unwind$ZSTD_fillDoubleHashTable
$chain$2$ZSTD_fillDoubleHashTable DD 021H
	DD	imagerel $LN87
	DD	imagerel $LN87+84
	DD	imagerel $unwind$ZSTD_fillDoubleHashTable
$unwind$ZSTD_compressBlock_doubleFast_dictMatchState DD 0b1c01H
	DD	023341cH
	DD	01a011cH
	DD	0e013f015H
	DD	0c00fd011H
	DD	0600c700dH
	DD	0500bH
$unwind$ZSTD_compressBlock_doubleFast DD 0a1c01H
	DD	019341cH
	DD	0f015f21cH
	DD	0d011e013H
	DD	0700dc00fH
	DD	0500b600cH
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
_TEXT	SEGMENT
hBitsL$1$ = 32
hBitsL$1$ = 32
hBitsL$1$ = 32
offset_2$1$ = 32
offset_2$1$ = 36
offset_2$1$ = 36
offset_2$1$ = 36
hBitsL$1$ = 36
hBitsS$1$ = 40
hBitsS$1$ = 40
hBitsS$1$ = 40
hBitsS$1$ = 40
offset$1$ = 44
offset$1$ = 44
offset$1$ = 44
offset$1$ = 44
iend$1$ = 48
current$1$ = 56
current$1$ = 56
current$1$ = 56
prefixLowestIndex$1$ = 56
prefixLowestIndex$1$ = 60
prefixLowestIndex$1$ = 60
prefixLowestIndex$1$ = 60
current$1$ = 60
hashLong$1$ = 64
base$1$ = 72
base$1$ = 72
base$1$ = 72
base$1$ = 72
litLimit_w$1$ = 80
litLength$1$ = 80
litLimit_w$1$ = 80
litLength$1$ = 80
litLimit_w$1$ = 80
litLength$1$ = 80
litLimit_w$1$ = 80
litLength$1$ = 80
tv11909 = 88
tv11781 = 88
tv11653 = 88
tv11524 = 88
ilimit$1$ = 96
ilimit$1$ = 96
ilimit$1$ = 96
prefixLowest$1$ = 96
hashSmall$1$ = 104
hashSmall$1$ = 104
hashSmall$1$ = 104
hashSmall$1$ = 104
prefixLowest$1$ = 112
prefixLowest$1$ = 112
prefixLowest$1$ = 112
ilimit$1$ = 112
offset_1$1$ = 192
offset_1$1$ = 192
offset_1$1$ = 192
offset_1$1$ = 192
ms$ = 192
seqStore$ = 200
rep$ = 208
src$ = 216
srcSize$ = 224
ZSTD_compressBlock_doubleFast PROC

; 322  : {

$LN2641:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], r8
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 128				; 00000080H
	mov	r12, r8
	mov	r15, r9
	mov	rbx, rdx

; 323  :     const U32 mls = ms->cParams.minMatch;
; 324  :     switch(mls)

	mov	r8d, r15d
	mov	rdx, rcx
	mov	r10d, 1
	mov	rcx, QWORD PTR srcSize$[rsp]
	mov	r11d, DWORD PTR [r12]
	mov	rax, QWORD PTR [rdx+48]
	mov	rbp, QWORD PTR [rdx+8]
	lea	rsi, QWORD PTR [r9+rcx]
	mov	r14d, DWORD PTR [rdx+192]
	mov	edi, DWORD PTR [rdx+24]
	mov	r9d, DWORD PTR [rdx+32]
	mov	QWORD PTR hashLong$1$[rsp], rax
	mov	eax, DWORD PTR [rdx+200]
	mov	QWORD PTR iend$1$[rsp], rsi
	mov	QWORD PTR base$1$[rsp], rbp
	sub	eax, 5
	je	$LN5@ZSTD_compr
	sub	eax, r10d
	je	$LN6@ZSTD_compr
	sub	r8d, ebp
	add	r8d, ecx
	mov	ecx, DWORD PTR [rdx+184]
	shl	r10d, cl
	cmp	eax, 1
	mov	rax, QWORD PTR [rdx+64]
	mov	QWORD PTR hashSmall$1$[rsp], rax
	mov	eax, DWORD PTR [rdx+188]
	mov	DWORD PTR hBitsS$1$[rsp], eax
	mov	eax, r8d
	je	$LN7@ZSTD_compr
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 993  :     U32    const withinWindow = (current - lowestValid > maxDistance) ? current - maxDistance : lowestValid;

	sub	eax, edi
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 58   :     const U32 hBitsL = cParams->hashLog;

	mov	DWORD PTR hBitsL$1$[rsp], r14d
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	sub	r8d, r10d
	cmp	eax, r10d
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 70   :     const BYTE* const ilimit = iend - HASH_READ_SIZE;

	lea	rax, QWORD PTR [rsi-8]
	mov	QWORD PTR ilimit$1$[rsp], rax
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	cmovbe	r8d, edi
	test	r9d, r9d

; 995  :     U32    const matchLowest = isDictionary ? lowestValid : withinWindow;

	cmovne	r8d, edi
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 68   :     const BYTE* const prefixLowest = base + prefixLowestIndex;

	mov	ecx, r8d
	add	rcx, rbp
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 995  :     U32    const matchLowest = isDictionary ? lowestValid : withinWindow;

	mov	DWORD PTR prefixLowestIndex$1$[rsp], r8d
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 71   :     U32 offset_1=rep[0], offset_2=rep[1];

	mov	r8d, DWORD PTR [r12+4]

; 72   :     U32 offsetSaved = 0;
; 73   : 
; 74   :     const ZSTD_matchState_t* const dms = ms->dictMatchState;
; 75   :     const ZSTD_compressionParameters* const dictCParams =
; 76   :                                      dictMode == ZSTD_dictMatchState ?
; 77   :                                      &dms->cParams : NULL;
; 78   :     const U32* const dictHashLong  = dictMode == ZSTD_dictMatchState ?
; 79   :                                      dms->hashTable : NULL;
; 80   :     const U32* const dictHashSmall = dictMode == ZSTD_dictMatchState ?
; 81   :                                      dms->chainTable : NULL;
; 82   :     const U32 dictStartIndex       = dictMode == ZSTD_dictMatchState ?
; 83   :                                      dms->window.dictLimit : 0;
; 84   :     const BYTE* const dictBase     = dictMode == ZSTD_dictMatchState ?
; 85   :                                      dms->window.base : NULL;
; 86   :     const BYTE* const dictStart    = dictMode == ZSTD_dictMatchState ?
; 87   :                                      dictBase + dictStartIndex : NULL;
; 88   :     const BYTE* const dictEnd      = dictMode == ZSTD_dictMatchState ?
; 89   :                                      dms->window.nextSrc : NULL;
; 90   :     const U32 dictIndexDelta       = dictMode == ZSTD_dictMatchState ?
; 91   :                                      prefixLowestIndex - (U32)(dictEnd - dictBase) :
; 92   :                                      0;
; 93   :     const U32 dictHBitsL           = dictMode == ZSTD_dictMatchState ?
; 94   :                                      dictCParams->hashLog : hBitsL;
; 95   :     const U32 dictHBitsS           = dictMode == ZSTD_dictMatchState ?
; 96   :                                      dictCParams->chainLog : hBitsS;
; 97   :     const U32 dictAndPrefixLength  = (U32)((ip - prefixLowest) + (dictEnd - dictStart));
; 98   : 
; 99   :     DEBUGLOG(5, "ZSTD_compressBlock_doubleFast_generic");
; 100  : 
; 101  :     assert(dictMode == ZSTD_noDict || dictMode == ZSTD_dictMatchState);
; 102  : 
; 103  :     /* if a dictionary is attached, it must be within window range */
; 104  :     if (dictMode == ZSTD_dictMatchState) {
; 105  :         assert(ms->window.dictLimit + (1U << cParams->windowLog) >= endIndex);
; 106  :     }
; 107  : 
; 108  :     /* init */
; 109  :     ip += (dictAndPrefixLength == 0);

	xor	r12d, r12d
	cmp	r15d, ecx
	mov	QWORD PTR prefixLowest$1$[rsp], rcx
	mov	eax, r12d
	sete	al
	lea	r13, QWORD PTR [rax+r15]

; 110  :     if (dictMode == ZSTD_noDict) {
; 111  :         U32 const current = (U32)(ip - base);

	mov	edx, r13d
	sub	edx, ebp

; 114  :         if (offset_2 > maxRep) offsetSaved = offset_2, offset_2 = 0;
; 115  :         if (offset_1 > maxRep) offsetSaved = offset_1, offset_1 = 0;

	mov	ebp, r12d
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 993  :     U32    const withinWindow = (current - lowestValid > maxDistance) ? current - maxDistance : lowestValid;

	mov	eax, edx

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	mov	ecx, edx
	sub	ecx, r10d
	sub	eax, edi
	cmp	eax, r10d
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 125  :     while (ip < ilimit) {   /* < instead of <=, because repcode check at (ip+1) */

	mov	r10d, r12d
	lea	rax, QWORD PTR [rsi-8]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	cmovbe	ecx, edi
	test	r9d, r9d
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 125  :     while (ip < ilimit) {   /* < instead of <=, because repcode check at (ip+1) */

	mov	r9d, r11d
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 995  :     U32    const matchLowest = isDictionary ? lowestValid : withinWindow;

	cmovne	ecx, edi
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 113  :         U32 const maxRep = current - windowLow;

	sub	edx, ecx

; 114  :         if (offset_2 > maxRep) offsetSaved = offset_2, offset_2 = 0;
; 115  :         if (offset_1 > maxRep) offsetSaved = offset_1, offset_1 = 0;

	cmp	r8d, edx
	cmovbe	ebp, r8d
	cmovbe	r8d, r12d

; 125  :     while (ip < ilimit) {   /* < instead of <=, because repcode check at (ip+1) */

	cmp	r11d, edx
	cmovbe	r9d, r8d
	cmovbe	r10d, r11d
	mov	DWORD PTR tv11524[rsp], r9d
	cmp	r13, rax
	jae	$LN11@ZSTD_compr
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 485  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	DWORD PTR offset_2$1$[rsp], ebp
	mov	DWORD PTR offset_1$1$[rsp], r10d
	npad	5
$LL10@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 128  :         size_t const h2 = ZSTD_hashPtr(ip, hBitsL, 8);

	mov	r8d, 8
	mov	edx, r14d
	mov	rcx, r13
	call	ZSTD_hashPtr

; 129  :         size_t const h = ZSTD_hashPtr(ip, hBitsS, mls);

	mov	edx, DWORD PTR hBitsS$1$[rsp]
	mov	r8d, 4
	mov	rcx, r13
	mov	rsi, rax
	call	ZSTD_hashPtr

; 130  :         size_t const dictHL = ZSTD_hashPtr(ip, dictHBitsL, 8);

	mov	r8d, 8
	mov	edx, r14d
	mov	rcx, r13
	mov	rdi, rax
	call	ZSTD_hashPtr

; 131  :         size_t const dictHS = ZSTD_hashPtr(ip, dictHBitsS, mls);

	mov	edx, DWORD PTR hBitsS$1$[rsp]
	mov	r8d, 4
	mov	rcx, r13
	call	ZSTD_hashPtr

; 132  :         U32 const current = (U32)(ip-base);

	mov	rdx, QWORD PTR base$1$[rsp]
	mov	ecx, r13d

; 133  :         U32 const matchIndexL = hashLong[h2];
; 134  :         U32 matchIndexS = hashSmall[h];

	mov	r10, QWORD PTR hashSmall$1$[rsp]
	sub	ecx, edx
	mov	r11, QWORD PTR hashLong$1$[rsp]
	mov	DWORD PTR current$1$[rsp], ecx
	mov	r9d, DWORD PTR [r10+rdi*4]
	mov	r8d, DWORD PTR [r11+rsi*4]

; 135  :         const BYTE* matchLong = base + matchIndexL;
; 136  :         const BYTE* match = base + matchIndexS;
; 137  :         const U32 repIndex = current + 1 - offset_1;
; 138  :         const BYTE* repMatch = (dictMode == ZSTD_dictMatchState
; 139  :                             && repIndex < prefixLowestIndex) ?
; 140  :                                dictBase + (repIndex - dictIndexDelta) :
; 141  :                                base + repIndex;
; 142  :         hashLong[h2] = hashSmall[h] = current;   /* update hash tables */

	mov	DWORD PTR [r10+rdi*4], ecx

; 143  : 
; 144  :         /* check dictMatchState repcode */
; 145  :         if (dictMode == ZSTD_dictMatchState
; 146  :             && ((U32)((prefixLowestIndex-1) - repIndex) >= 3 /* intentional underflow */)
; 147  :             && (MEM_read32(repMatch) == MEM_read32(ip+1)) ) {
; 148  :             const BYTE* repMatchEnd = repIndex < prefixLowestIndex ? dictEnd : iend;
; 149  :             mLength = ZSTD_count_2segments(ip+1+4, repMatch+4, iend, repMatchEnd, prefixLowest) + 4;
; 150  :             ip++;
; 151  :             ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, 0, mLength-MINMATCH);
; 152  :             goto _match_stored;
; 153  :         }
; 154  : 
; 155  :         /* check noDict repcode */
; 156  :         if ( dictMode == ZSTD_noDict
; 157  :           && ((offset_1 > 0) & (MEM_read32(ip+1-offset_1) == MEM_read32(ip+1)))) {

	mov	r10d, DWORD PTR offset_1$1$[rsp]
	mov	DWORD PTR [r11+rsi*4], ecx
	lea	rbp, QWORD PTR [rdx+r9]
	mov	eax, DWORD PTR [r13+1]
	lea	r14, QWORD PTR [rdx+r8]
	lea	rsi, QWORD PTR [r13+1]
	mov	ecx, r12d
	mov	rdx, r13
	mov	QWORD PTR litLength$1$[rsp], rsi
	sub	rdx, r10
	cmp	DWORD PTR [rdx+1], eax
	mov	eax, r12d
	sete	cl
	test	r10d, r10d
	setne	al
	test	ecx, eax
	je	$LN34@ZSTD_compr

; 158  :             mLength = ZSTD_count(ip+1+4, ip+1+4-offset_1, iend) + 4;

	mov	rbp, QWORD PTR iend$1$[rsp]
	lea	rcx, QWORD PTR [r13+5]
	mov	r8, rbp
	add	rdx, 5
	call	ZSTD_count
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rcx, QWORD PTR [rbx+24]
	add	rbp, -32				; ffffffffffffffe0H
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 159  :             ip++;

	mov	r13, rsi
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	mov	QWORD PTR litLimit_w$1$[rsp], rbp
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 160  :             ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, 0, mLength-MINMATCH);

	sub	rsi, r15
	lea	rdi, QWORD PTR [rax+4]
	lea	r14, QWORD PTR [rdi-3]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	lea	r8, QWORD PTR [rsi+r15]

; 443  : #if defined(DEBUGLEVEL) && (DEBUGLEVEL >= 6)
; 444  :     static const BYTE* g_start = NULL;
; 445  :     if (g_start==NULL) g_start = (const BYTE*)literals;  /* note : index only works for compression within a single segment */
; 446  :     {   U32 const pos = (U32)((const BYTE*)literals - g_start);
; 447  :         DEBUGLOG(6, "Cpos%7u :%3u literals, match%4u bytes at offCode%7u",
; 448  :                pos, (U32)litLength, (U32)mlBase+MINMATCH, (U32)offCode);
; 449  :     }
; 450  : #endif
; 451  :     assert((size_t)(seqStorePtr->sequences - seqStorePtr->sequencesStart) < seqStorePtr->maxNbSeq);
; 452  :     /* copy Literals */
; 453  :     assert(seqStorePtr->maxNbLit <= 128 KB);
; 454  :     assert(seqStorePtr->lit + litLength <= seqStorePtr->litStart + seqStorePtr->maxNbLit);
; 455  :     assert(literals + litLength <= litLimit);
; 456  :     if (litEnd <= litLimit_w) {

	cmp	r8, rbp
	ja	SHORT $LN360@ZSTD_compr
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [r15]
	movups	XMMWORD PTR [rcx], xmm0
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 462  :         if (litLength > 16) {

	cmp	rsi, 16
	jbe	SHORT $LN361@ZSTD_compr

; 463  :             ZSTD_wildcopy(seqStorePtr->lit+16, literals+16, (ptrdiff_t)litLength-16, ZSTD_no_overlap);

	mov	rax, QWORD PTR [rbx+24]
	add	r15, 16
	add	rax, 16
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	lea	rcx, QWORD PTR [rax-16]
	add	rcx, rsi
	npad	6
$LL374@ZSTD_compr:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [r15]

; 289  :             COPY16(op, ip);

	lea	r15, QWORD PTR [r15+16]

; 243  :     memcpy(dst, src, 16);

	movups	XMMWORD PTR [rax], xmm0

; 289  :             COPY16(op, ip);

	add	rax, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rax, rcx
	jb	SHORT $LL374@ZSTD_compr
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	SHORT $LN361@ZSTD_compr
$LN360@ZSTD_compr:

; 466  :         ZSTD_safecopyLiterals(seqStorePtr->lit, literals, litEnd, litLimit_w);

	mov	r9, rbp
	mov	rdx, r15
	call	ZSTD_safecopyLiterals
$LN361@ZSTD_compr:

; 467  :     }
; 468  :     seqStorePtr->lit += litLength;

	add	QWORD PTR [rbx+24], rsi
	mov	rcx, QWORD PTR [rbx+8]

; 469  : 
; 470  :     /* literal Length */
; 471  :     if (litLength>0xFFFF) {

	cmp	rsi, 65535				; 0000ffffH
	jbe	SHORT $LN2566@ZSTD_compr

; 472  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 473  :         seqStorePtr->longLengthID = 1;
; 474  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [rbx+72], 1
	sub	rax, QWORD PTR [rbx]
	sar	rax, 3
	mov	DWORD PTR [rbx+76], eax
$LN2566@ZSTD_compr:

; 475  :     }
; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	WORD PTR [rcx+4], si

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	mov	rax, QWORD PTR [rbx+8]
	mov	DWORD PTR [rax], 1
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 161  :             goto _match_stored;

	jmp	$LN2628@ZSTD_compr
$LN34@ZSTD_compr:

; 162  :         }
; 163  : 
; 164  :         if (matchIndexL > prefixLowestIndex) {

	mov	ecx, DWORD PTR prefixLowestIndex$1$[rsp]
	cmp	r8d, ecx
	jbe	$LN37@ZSTD_compr

; 165  :             /* check prefix long match */
; 166  :             if (MEM_read64(matchLong) == MEM_read64(ip)) {

	mov	rax, QWORD PTR [r13]
	cmp	QWORD PTR [r14], rax
	jne	SHORT $LN37@ZSTD_compr

; 167  :                 mLength = ZSTD_count(ip+8, matchLong+8, iend) + 8;

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rdx, QWORD PTR [r14+8]
	lea	rcx, QWORD PTR [r13+8]
	call	ZSTD_count

; 168  :                 offset = (U32)(ip-matchLong);
; 169  :                 while (((ip>anchor) & (matchLong>prefixLowest)) && (ip[-1] == matchLong[-1])) { ip--; matchLong--; mLength++; } /* catch up */

	mov	r8, QWORD PTR prefixLowest$1$[rsp]
	mov	ecx, r12d
	mov	r9d, r13d
	sub	r9d, r14d
	cmp	r14, r8
	mov	DWORD PTR offset$1$[rsp], r9d
	lea	rdi, QWORD PTR [rax+8]
	mov	eax, r12d
	seta	cl
	cmp	r13, r15
	seta	al
	test	ecx, eax
	je	$_match_found$2642
	npad	1
$LL12@ZSTD_compr:
	movzx	eax, BYTE PTR [r14-1]
	lea	rdx, QWORD PTR [r13-1]
	dec	r14
	cmp	BYTE PTR [rdx], al
	jne	$_match_found$2642
	inc	rdi
	mov	ecx, r12d
	cmp	r14, r8
	mov	eax, r12d
	mov	r13, rdx
	seta	cl
	cmp	rdx, r15
	seta	al
	test	ecx, eax
	jne	SHORT $LL12@ZSTD_compr

; 170  :                 goto _match_found;

	jmp	$_match_found$2642
$LN37@ZSTD_compr:

; 171  :             }
; 172  :         } else if (dictMode == ZSTD_dictMatchState) {
; 173  :             /* check dictMatchState long match */
; 174  :             U32 const dictMatchIndexL = dictHashLong[dictHL];
; 175  :             const BYTE* dictMatchL = dictBase + dictMatchIndexL;
; 176  :             assert(dictMatchL < dictEnd);
; 177  : 
; 178  :             if (dictMatchL > dictStart && MEM_read64(dictMatchL) == MEM_read64(ip)) {
; 179  :                 mLength = ZSTD_count_2segments(ip+8, dictMatchL+8, iend, dictEnd, prefixLowest) + 8;
; 180  :                 offset = (U32)(current - dictMatchIndexL - dictIndexDelta);
; 181  :                 while (((ip>anchor) & (dictMatchL>dictStart)) && (ip[-1] == dictMatchL[-1])) { ip--; dictMatchL--; mLength++; } /* catch up */
; 182  :                 goto _match_found;
; 183  :         }   }
; 184  : 
; 185  :         if (matchIndexS > prefixLowestIndex) {

	cmp	r9d, ecx
	jbe	$LN42@ZSTD_compr

; 186  :             /* check prefix short match */
; 187  :             if (MEM_read32(match) == MEM_read32(ip)) {

	mov	eax, DWORD PTR [r13]
	cmp	DWORD PTR [rbp], eax
	jne	$LN42@ZSTD_compr
$_search_next_long$2643:

; 201  : #if defined(__aarch64__)
; 202  :         PREFETCH_L1(ip+256);
; 203  : #endif
; 204  :         continue;
; 205  : 
; 206  : _search_next_long:
; 207  : 
; 208  :         {   size_t const hl3 = ZSTD_hashPtr(ip+1, hBitsL, 8);

	mov	edx, DWORD PTR hBitsL$1$[rsp]
	mov	r8d, 8
	mov	rcx, rsi
	call	ZSTD_hashPtr

; 209  :             size_t const dictHLNext = ZSTD_hashPtr(ip+1, dictHBitsL, 8);

	mov	edx, DWORD PTR hBitsL$1$[rsp]
	mov	r8d, 8
	mov	rcx, rsi
	mov	rdi, rax
	call	ZSTD_hashPtr

; 210  :             U32 const matchIndexL3 = hashLong[hl3];

	mov	r8, QWORD PTR hashLong$1$[rsp]

; 211  :             const BYTE* matchL3 = base + matchIndexL3;
; 212  :             hashLong[hl3] = current + 1;

	mov	eax, DWORD PTR current$1$[rsp]
	mov	ecx, DWORD PTR [r8+rdi*4]
	mov	esi, ecx
	add	rsi, QWORD PTR base$1$[rsp]
	inc	eax
	mov	DWORD PTR [r8+rdi*4], eax

; 213  : 
; 214  :             /* check prefix long +1 match */
; 215  :             if (matchIndexL3 > prefixLowestIndex) {

	cmp	ecx, DWORD PTR prefixLowestIndex$1$[rsp]
	jbe	$LN47@ZSTD_compr

; 216  :                 if (MEM_read64(matchL3) == MEM_read64(ip+1)) {

	mov	r14, QWORD PTR litLength$1$[rsp]
	mov	rax, QWORD PTR [r14]
	cmp	QWORD PTR [rsi], rax
	jne	SHORT $LN47@ZSTD_compr

; 217  :                     mLength = ZSTD_count(ip+9, matchL3+8, iend) + 8;

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rdx, QWORD PTR [rsi+8]
	lea	rcx, QWORD PTR [r13+9]
	call	ZSTD_count

; 218  :                     ip++;
; 219  :                     offset = (U32)(ip-matchL3);
; 220  :                     while (((ip>anchor) & (matchL3>prefixLowest)) && (ip[-1] == matchL3[-1])) { ip--; matchL3--; mLength++; } /* catch up */

	mov	r8, QWORD PTR prefixLowest$1$[rsp]
	mov	ecx, r12d
	mov	r9d, r14d
	mov	r13, r14
	sub	r9d, esi
	cmp	r14, r15
	mov	DWORD PTR offset$1$[rsp], r9d
	lea	rdi, QWORD PTR [rax+8]
	mov	eax, r12d
	seta	cl
	cmp	rsi, r8
	seta	al
	test	ecx, eax
	je	$_match_found$2642
	npad	10
$LL16@ZSTD_compr:
	movzx	eax, BYTE PTR [rsi-1]
	lea	rdx, QWORD PTR [r13-1]
	dec	rsi
	cmp	BYTE PTR [rdx], al
	jne	$_match_found$2642
	inc	rdi
	mov	ecx, r12d
	cmp	rsi, r8
	mov	eax, r12d
	mov	r13, rdx
	seta	cl
	cmp	rdx, r15
	seta	al
	test	ecx, eax
	jne	SHORT $LL16@ZSTD_compr

; 221  :                     goto _match_found;

	jmp	SHORT $_match_found$2642
$LN47@ZSTD_compr:

; 222  :                 }
; 223  :             } else if (dictMode == ZSTD_dictMatchState) {
; 224  :                 /* check dict long +1 match */
; 225  :                 U32 const dictMatchIndexL3 = dictHashLong[dictHLNext];
; 226  :                 const BYTE* dictMatchL3 = dictBase + dictMatchIndexL3;
; 227  :                 assert(dictMatchL3 < dictEnd);
; 228  :                 if (dictMatchL3 > dictStart && MEM_read64(dictMatchL3) == MEM_read64(ip+1)) {
; 229  :                     mLength = ZSTD_count_2segments(ip+1+8, dictMatchL3+8, iend, dictEnd, prefixLowest) + 8;
; 230  :                     ip++;
; 231  :                     offset = (U32)(current + 1 - dictMatchIndexL3 - dictIndexDelta);
; 232  :                     while (((ip>anchor) & (dictMatchL3>dictStart)) && (ip[-1] == dictMatchL3[-1])) { ip--; dictMatchL3--; mLength++; } /* catch up */
; 233  :                     goto _match_found;
; 234  :         }   }   }
; 235  : 
; 236  :         /* if no long +1 match, explore the short match we found */
; 237  :         if (dictMode == ZSTD_dictMatchState && matchIndexS < prefixLowestIndex) {
; 238  :             mLength = ZSTD_count_2segments(ip+4, match+4, iend, dictEnd, prefixLowest) + 4;
; 239  :             offset = (U32)(current - matchIndexS);
; 240  :             while (((ip>anchor) & (match>dictStart)) && (ip[-1] == match[-1])) { ip--; match--; mLength++; } /* catch up */
; 241  :         } else {
; 242  :             mLength = ZSTD_count(ip+4, match+4, iend) + 4;

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rdx, QWORD PTR [rbp+4]
	lea	rcx, QWORD PTR [r13+4]
	call	ZSTD_count

; 243  :             offset = (U32)(ip - match);
; 244  :             while (((ip>anchor) & (match>prefixLowest)) && (ip[-1] == match[-1])) { ip--; match--; mLength++; } /* catch up */

	mov	r8, QWORD PTR prefixLowest$1$[rsp]
	mov	ecx, r12d
	mov	r9d, r13d
	sub	r9d, ebp
	cmp	rbp, r8
	mov	DWORD PTR offset$1$[rsp], r9d
	lea	rdi, QWORD PTR [rax+4]
	mov	eax, r12d
	seta	cl
	cmp	r13, r15
	seta	al
	test	ecx, eax
	je	SHORT $_match_found$2642
	npad	3
$LL22@ZSTD_compr:
	movzx	eax, BYTE PTR [rbp-1]
	lea	rdx, QWORD PTR [r13-1]
	dec	rbp
	cmp	BYTE PTR [rdx], al
	jne	SHORT $_match_found$2642
	inc	rdi
	mov	ecx, r12d
	cmp	rbp, r8
	mov	eax, r12d
	mov	r13, rdx
	seta	cl
	cmp	rdx, r15
	seta	al
	test	ecx, eax
	jne	SHORT $LL22@ZSTD_compr
$_match_found$2642:

; 245  :         }
; 246  : 
; 247  :         /* fall-through */
; 248  : 
; 249  : _match_found:
; 250  :         offset_2 = offset_1;

	mov	ebp, DWORD PTR offset_1$1$[rsp]

; 253  :         ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, offset + ZSTD_REP_MOVE, mLength-MINMATCH);

	lea	r14, QWORD PTR [rdi-3]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rcx, QWORD PTR [rbx+24]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 253  :         ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, offset + ZSTD_REP_MOVE, mLength-MINMATCH);

	mov	rsi, r13
	sub	rsi, r15
	mov	DWORD PTR offset_2$1$[rsp], ebp
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	mov	rbp, QWORD PTR iend$1$[rsp]
	add	rbp, -32				; ffffffffffffffe0H
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 251  :         offset_1 = offset;

	mov	DWORD PTR offset_1$1$[rsp], r9d
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	mov	QWORD PTR litLimit_w$1$[rsp], rbp

; 442  :     BYTE const* const litEnd = literals + litLength;

	lea	r8, QWORD PTR [rsi+r15]

; 443  : #if defined(DEBUGLEVEL) && (DEBUGLEVEL >= 6)
; 444  :     static const BYTE* g_start = NULL;
; 445  :     if (g_start==NULL) g_start = (const BYTE*)literals;  /* note : index only works for compression within a single segment */
; 446  :     {   U32 const pos = (U32)((const BYTE*)literals - g_start);
; 447  :         DEBUGLOG(6, "Cpos%7u :%3u literals, match%4u bytes at offCode%7u",
; 448  :                pos, (U32)litLength, (U32)mlBase+MINMATCH, (U32)offCode);
; 449  :     }
; 450  : #endif
; 451  :     assert((size_t)(seqStorePtr->sequences - seqStorePtr->sequencesStart) < seqStorePtr->maxNbSeq);
; 452  :     /* copy Literals */
; 453  :     assert(seqStorePtr->maxNbLit <= 128 KB);
; 454  :     assert(seqStorePtr->lit + litLength <= seqStorePtr->litStart + seqStorePtr->maxNbLit);
; 455  :     assert(literals + litLength <= litLimit);
; 456  :     if (litEnd <= litLimit_w) {

	cmp	r8, rbp
	ja	SHORT $LN407@ZSTD_compr
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [r15]
	movups	XMMWORD PTR [rcx], xmm0
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 462  :         if (litLength > 16) {

	cmp	rsi, 16
	jbe	SHORT $LN408@ZSTD_compr

; 463  :             ZSTD_wildcopy(seqStorePtr->lit+16, literals+16, (ptrdiff_t)litLength-16, ZSTD_no_overlap);

	mov	rax, QWORD PTR [rbx+24]
	add	r15, 16
	add	rax, 16
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	lea	rcx, QWORD PTR [rax-16]
	add	rcx, rsi
	npad	13
$LL421@ZSTD_compr:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [r15]

; 289  :             COPY16(op, ip);

	lea	r15, QWORD PTR [r15+16]

; 243  :     memcpy(dst, src, 16);

	movups	XMMWORD PTR [rax], xmm0

; 289  :             COPY16(op, ip);

	add	rax, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rax, rcx
	jb	SHORT $LL421@ZSTD_compr
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	SHORT $LN408@ZSTD_compr
$LN407@ZSTD_compr:

; 466  :         ZSTD_safecopyLiterals(seqStorePtr->lit, literals, litEnd, litLimit_w);

	mov	r9, rbp
	mov	rdx, r15
	call	ZSTD_safecopyLiterals
	mov	r9d, DWORD PTR offset$1$[rsp]
$LN408@ZSTD_compr:

; 467  :     }
; 468  :     seqStorePtr->lit += litLength;

	add	QWORD PTR [rbx+24], rsi
	mov	rcx, QWORD PTR [rbx+8]

; 469  : 
; 470  :     /* literal Length */
; 471  :     if (litLength>0xFFFF) {

	cmp	rsi, 65535				; 0000ffffH
	jbe	SHORT $LN2568@ZSTD_compr

; 472  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 473  :         seqStorePtr->longLengthID = 1;
; 474  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [rbx+72], 1
	sub	rax, QWORD PTR [rbx]
	sar	rax, 3
	mov	DWORD PTR [rbx+76], eax
$LN2568@ZSTD_compr:

; 475  :     }
; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	WORD PTR [rcx+4], si

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	lea	ecx, DWORD PTR [r9+3]
	mov	rax, QWORD PTR [rbx+8]
	mov	DWORD PTR [rax], ecx
$LN2628@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 257  :         ip += mLength;

	mov	rcx, QWORD PTR [rbx+8]
	cmp	r14, 65535				; 0000ffffH
	jbe	SHORT $LN2569@ZSTD_compr
	mov	rax, rcx
	mov	DWORD PTR [rbx+72], 2
	sub	rax, QWORD PTR [rbx]
	sar	rax, 3
	mov	DWORD PTR [rbx+76], eax
$LN2569@ZSTD_compr:
	mov	WORD PTR [rcx+6], r14w
	add	QWORD PTR [rbx+8], 8
$_match_stored$2644:
	lea	r15, QWORD PTR [rdi+r13]
	mov	r13, r15

; 258  :         anchor = ip;

	cmp	r15, QWORD PTR ilimit$1$[rsp]

; 259  : 
; 260  :         if (ip <= ilimit) {

	ja	$LN2618@ZSTD_compr

; 261  :             /* Complementary insertion */
; 262  :             /* done after iLimit test, as candidates could be > iend-8 */
; 263  :             {   U32 const indexToInsert = current+2;

	mov	r14d, DWORD PTR current$1$[rsp]

; 264  :                 hashLong[ZSTD_hashPtr(base+indexToInsert, hBitsL, 8)] = indexToInsert;

	mov	r8d, 8
	mov	rdi, QWORD PTR base$1$[rsp]
	add	r14d, 2
	mov	edx, DWORD PTR hBitsL$1$[rsp]
	mov	ebp, r14d
	add	rbp, rdi
	mov	rcx, rbp
	call	ZSTD_hashPtr
	mov	rcx, QWORD PTR hashLong$1$[rsp]
	mov	esi, r15d

; 265  :                 hashLong[ZSTD_hashPtr(ip-2, hBitsL, 8)] = (U32)(ip-2-base);

	mov	edx, DWORD PTR hBitsL$1$[rsp]
	sub	esi, edi
	mov	r8d, 8
	mov	DWORD PTR [rcx+rax*4], r14d
	lea	rcx, QWORD PTR [r15-2]
	lea	edi, DWORD PTR [rsi-2]
	call	ZSTD_hashPtr
	mov	rcx, QWORD PTR hashLong$1$[rsp]

; 266  :                 hashSmall[ZSTD_hashPtr(base+indexToInsert, hBitsS, mls)] = indexToInsert;

	mov	r8d, 4
	mov	edx, DWORD PTR hBitsS$1$[rsp]
	mov	DWORD PTR [rcx+rax*4], edi
	mov	rcx, rbp
	call	ZSTD_hashPtr
	mov	rbp, QWORD PTR hashSmall$1$[rsp]

; 267  :                 hashSmall[ZSTD_hashPtr(ip-1, hBitsS, mls)] = (U32)(ip-1-base);

	lea	rcx, QWORD PTR [r15-1]
	mov	edx, DWORD PTR hBitsS$1$[rsp]
	lea	edi, DWORD PTR [rsi-1]
	mov	r8d, 4
	mov	DWORD PTR [rbp+rax*4], r14d
	call	ZSTD_hashPtr
	mov	r14, QWORD PTR litLimit_w$1$[rsp]
	mov	DWORD PTR [rbp+rax*4], edi
	mov	ebp, DWORD PTR offset_2$1$[rsp]
	npad	9
$LL26@ZSTD_compr:

; 268  :             }
; 269  : 
; 270  :             /* check immediate repcode */
; 271  :             if (dictMode == ZSTD_dictMatchState) {
; 272  :                 while (ip <= ilimit) {
; 273  :                     U32 const current2 = (U32)(ip-base);
; 274  :                     U32 const repIndex2 = current2 - offset_2;
; 275  :                     const BYTE* repMatch2 = dictMode == ZSTD_dictMatchState
; 276  :                         && repIndex2 < prefixLowestIndex ?
; 277  :                             dictBase + repIndex2 - dictIndexDelta :
; 278  :                             base + repIndex2;
; 279  :                     if ( ((U32)((prefixLowestIndex-1) - (U32)repIndex2) >= 3 /* intentional overflow */)
; 280  :                        && (MEM_read32(repMatch2) == MEM_read32(ip)) ) {
; 281  :                         const BYTE* const repEnd2 = repIndex2 < prefixLowestIndex ? dictEnd : iend;
; 282  :                         size_t const repLength2 = ZSTD_count_2segments(ip+4, repMatch2+4, iend, repEnd2, prefixLowest) + 4;
; 283  :                         U32 tmpOffset = offset_2; offset_2 = offset_1; offset_1 = tmpOffset;   /* swap offset_2 <=> offset_1 */
; 284  :                         ZSTD_storeSeq(seqStore, 0, anchor, iend, 0, repLength2-MINMATCH);
; 285  :                         hashSmall[ZSTD_hashPtr(ip, hBitsS, mls)] = current2;
; 286  :                         hashLong[ZSTD_hashPtr(ip, hBitsL, 8)] = current2;
; 287  :                         ip += repLength2;
; 288  :                         anchor = ip;
; 289  :                         continue;
; 290  :                     }
; 291  :                     break;
; 292  :             }   }
; 293  : 
; 294  :             if (dictMode == ZSTD_noDict) {
; 295  :                 while ( (ip <= ilimit)
; 296  :                      && ( (offset_2>0)

	mov	eax, ebp
	mov	ecx, r12d
	mov	rdx, r13
	sub	rdx, rax
	mov	eax, DWORD PTR [rdx]
	cmp	DWORD PTR [r13], eax
	mov	eax, r12d
	sete	cl
	test	ebp, ebp
	setne	al
	test	ecx, eax
	je	$LN2622@ZSTD_compr

; 297  :                         & (MEM_read32(ip) == MEM_read32(ip - offset_2)) )) {
; 298  :                     /* store sequence */
; 299  :                     size_t const rLength = ZSTD_count(ip+4, ip+4-offset_2, iend) + 4;

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rcx, QWORD PTR [r13+4]
	add	rdx, 4
	call	ZSTD_count

; 300  :                     U32 const tmpOff = offset_2; offset_2 = offset_1; offset_1 = tmpOff;  /* swap offset_2 <=> offset_1 */
; 301  :                     hashSmall[ZSTD_hashPtr(ip, hBitsS, mls)] = (U32)(ip-base);

	mov	edx, DWORD PTR hBitsS$1$[rsp]
	mov	ecx, ebp
	mov	ebp, DWORD PTR offset_1$1$[rsp]
	mov	edi, r13d
	sub	edi, DWORD PTR base$1$[rsp]
	mov	r8d, 4
	mov	DWORD PTR offset_1$1$[rsp], ecx
	lea	rsi, QWORD PTR [rax+4]
	mov	rcx, r13
	mov	DWORD PTR offset_2$1$[rsp], ebp
	call	ZSTD_hashPtr
	mov	rcx, QWORD PTR hashSmall$1$[rsp]

; 302  :                     hashLong[ZSTD_hashPtr(ip, hBitsL, 8)] = (U32)(ip-base);

	mov	r8d, 8
	mov	edx, DWORD PTR hBitsL$1$[rsp]
	mov	DWORD PTR [rcx+rax*4], edi
	mov	rcx, r13
	call	ZSTD_hashPtr
	mov	rcx, QWORD PTR hashLong$1$[rsp]
	mov	DWORD PTR [rcx+rax*4], edi

; 303  :                     ZSTD_storeSeq(seqStore, 0, anchor, iend, 0, rLength-MINMATCH);

	lea	rdi, QWORD PTR [rsi-3]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rcx, QWORD PTR [rbx+24]

; 443  : #if defined(DEBUGLEVEL) && (DEBUGLEVEL >= 6)
; 444  :     static const BYTE* g_start = NULL;
; 445  :     if (g_start==NULL) g_start = (const BYTE*)literals;  /* note : index only works for compression within a single segment */
; 446  :     {   U32 const pos = (U32)((const BYTE*)literals - g_start);
; 447  :         DEBUGLOG(6, "Cpos%7u :%3u literals, match%4u bytes at offCode%7u",
; 448  :                pos, (U32)litLength, (U32)mlBase+MINMATCH, (U32)offCode);
; 449  :     }
; 450  : #endif
; 451  :     assert((size_t)(seqStorePtr->sequences - seqStorePtr->sequencesStart) < seqStorePtr->maxNbSeq);
; 452  :     /* copy Literals */
; 453  :     assert(seqStorePtr->maxNbLit <= 128 KB);
; 454  :     assert(seqStorePtr->lit + litLength <= seqStorePtr->litStart + seqStorePtr->maxNbLit);
; 455  :     assert(literals + litLength <= litLimit);
; 456  :     if (litEnd <= litLimit_w) {

	cmp	r15, r14
	ja	SHORT $LN461@ZSTD_compr
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [r15]
	movups	XMMWORD PTR [rcx], xmm0
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	SHORT $LN462@ZSTD_compr
$LN461@ZSTD_compr:

; 466  :         ZSTD_safecopyLiterals(seqStorePtr->lit, literals, litEnd, litLimit_w);

	mov	r9, r14
	mov	r8, r15
	mov	rdx, r15
	call	ZSTD_safecopyLiterals
$LN462@ZSTD_compr:

; 475  :     }
; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	rax, QWORD PTR [rbx+8]
	mov	WORD PTR [rax+4], r12w

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	mov	rax, QWORD PTR [rbx+8]
	mov	DWORD PTR [rax], 1
	mov	rcx, QWORD PTR [rbx+8]

; 480  : 
; 481  :     /* match Length */
; 482  :     if (mlBase>0xFFFF) {

	cmp	rdi, 65535				; 0000ffffH
	jbe	SHORT $LN2570@ZSTD_compr

; 485  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [rbx+72], 2
	sub	rax, QWORD PTR [rbx]
	sar	rax, 3
	mov	DWORD PTR [rbx+76], eax
$LN2570@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 304  :                     ip += rLength;

	add	r13, rsi
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 487  :     seqStorePtr->sequences[0].matchLength = (U16)mlBase;

	mov	WORD PTR [rcx+6], di

; 488  : 
; 489  :     seqStorePtr->sequences++;

	add	QWORD PTR [rbx+8], 8
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 304  :                     ip += rLength;

	mov	r15, r13
	cmp	r13, QWORD PTR ilimit$1$[rsp]
	jbe	$LL26@ZSTD_compr

; 305  :                     anchor = ip;
; 306  :                     continue;   /* faster when present ... (?) */
; 307  :         }   }   }
; 308  :     }   /* while (ip < ilimit) */

	jmp	SHORT $LN2622@ZSTD_compr
$LN42@ZSTD_compr:
	mov	ebp, DWORD PTR offset_2$1$[rsp]

; 188  :                 goto _search_next_long;
; 189  :             }
; 190  :         } else if (dictMode == ZSTD_dictMatchState) {
; 191  :             /* check dictMatchState short match */
; 192  :             U32 const dictMatchIndexS = dictHashSmall[dictHS];
; 193  :             match = dictBase + dictMatchIndexS;
; 194  :             matchIndexS = dictMatchIndexS + dictIndexDelta;
; 195  : 
; 196  :             if (match > dictStart && MEM_read32(match) == MEM_read32(ip)) {
; 197  :                 goto _search_next_long;
; 198  :         }   }
; 199  : 
; 200  :         ip += ((ip-anchor) >> kSearchStrength) + 1;

	mov	rax, r13
	sub	rax, r15
	inc	r13
	sar	rax, 8
	add	r13, rax

; 259  : 
; 260  :         if (ip <= ilimit) {

	jmp	SHORT $LN2522@ZSTD_compr
$LN2618@ZSTD_compr:
	mov	ebp, DWORD PTR offset_2$1$[rsp]
$LN2622@ZSTD_compr:

; 125  :     while (ip < ilimit) {   /* < instead of <=, because repcode check at (ip+1) */

	mov	r10d, DWORD PTR offset_1$1$[rsp]
$LN2522@ZSTD_compr:
	mov	r14d, DWORD PTR hBitsL$1$[rsp]
	cmp	r13, QWORD PTR ilimit$1$[rsp]
	jb	$LL10@ZSTD_compr
	mov	rsi, QWORD PTR iend$1$[rsp]
	mov	r9d, DWORD PTR tv11524[rsp]
$LN11@ZSTD_compr:

; 309  : 
; 310  :     /* save reps for next block */
; 311  :     rep[0] = offset_1 ? offset_1 : offsetSaved;

	mov	rdx, QWORD PTR rep$[rsp]
	test	r10d, r10d
	mov	ecx, r9d
	cmovne	ecx, r10d

; 312  :     rep[1] = offset_2 ? offset_2 : offsetSaved;

	test	ebp, ebp
	cmovne	r9d, ebp
	mov	DWORD PTR [rdx], ecx
	mov	DWORD PTR [rdx+4], r9d

; 325  :     {
; 326  :     default: /* includes case 3 */
; 327  :     case 4 :
; 328  :         return ZSTD_compressBlock_doubleFast_generic(ms, seqStore, rep, src, srcSize, 4, ZSTD_noDict);

	jmp	$LN2629@ZSTD_compr
$LN7@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 993  :     U32    const withinWindow = (current - lowestValid > maxDistance) ? current - maxDistance : lowestValid;

	sub	eax, edi
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 58   :     const U32 hBitsL = cParams->hashLog;

	mov	DWORD PTR hBitsL$1$[rsp], r14d
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	sub	r8d, r10d
	cmp	eax, r10d
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 70   :     const BYTE* const ilimit = iend - HASH_READ_SIZE;

	lea	rax, QWORD PTR [rsi-8]
	mov	QWORD PTR ilimit$1$[rsp], rax
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	cmovbe	r8d, edi
	test	r9d, r9d

; 995  :     U32    const matchLowest = isDictionary ? lowestValid : withinWindow;

	cmovne	r8d, edi
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 68   :     const BYTE* const prefixLowest = base + prefixLowestIndex;

	mov	ecx, r8d
	add	rcx, rbp
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 995  :     U32    const matchLowest = isDictionary ? lowestValid : withinWindow;

	mov	DWORD PTR prefixLowestIndex$1$[rsp], r8d
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 71   :     U32 offset_1=rep[0], offset_2=rep[1];

	mov	r8d, DWORD PTR [r12+4]

; 72   :     U32 offsetSaved = 0;
; 73   : 
; 74   :     const ZSTD_matchState_t* const dms = ms->dictMatchState;
; 75   :     const ZSTD_compressionParameters* const dictCParams =
; 76   :                                      dictMode == ZSTD_dictMatchState ?
; 77   :                                      &dms->cParams : NULL;
; 78   :     const U32* const dictHashLong  = dictMode == ZSTD_dictMatchState ?
; 79   :                                      dms->hashTable : NULL;
; 80   :     const U32* const dictHashSmall = dictMode == ZSTD_dictMatchState ?
; 81   :                                      dms->chainTable : NULL;
; 82   :     const U32 dictStartIndex       = dictMode == ZSTD_dictMatchState ?
; 83   :                                      dms->window.dictLimit : 0;
; 84   :     const BYTE* const dictBase     = dictMode == ZSTD_dictMatchState ?
; 85   :                                      dms->window.base : NULL;
; 86   :     const BYTE* const dictStart    = dictMode == ZSTD_dictMatchState ?
; 87   :                                      dictBase + dictStartIndex : NULL;
; 88   :     const BYTE* const dictEnd      = dictMode == ZSTD_dictMatchState ?
; 89   :                                      dms->window.nextSrc : NULL;
; 90   :     const U32 dictIndexDelta       = dictMode == ZSTD_dictMatchState ?
; 91   :                                      prefixLowestIndex - (U32)(dictEnd - dictBase) :
; 92   :                                      0;
; 93   :     const U32 dictHBitsL           = dictMode == ZSTD_dictMatchState ?
; 94   :                                      dictCParams->hashLog : hBitsL;
; 95   :     const U32 dictHBitsS           = dictMode == ZSTD_dictMatchState ?
; 96   :                                      dictCParams->chainLog : hBitsS;
; 97   :     const U32 dictAndPrefixLength  = (U32)((ip - prefixLowest) + (dictEnd - dictStart));
; 98   : 
; 99   :     DEBUGLOG(5, "ZSTD_compressBlock_doubleFast_generic");
; 100  : 
; 101  :     assert(dictMode == ZSTD_noDict || dictMode == ZSTD_dictMatchState);
; 102  : 
; 103  :     /* if a dictionary is attached, it must be within window range */
; 104  :     if (dictMode == ZSTD_dictMatchState) {
; 105  :         assert(ms->window.dictLimit + (1U << cParams->windowLog) >= endIndex);
; 106  :     }
; 107  : 
; 108  :     /* init */
; 109  :     ip += (dictAndPrefixLength == 0);

	xor	r12d, r12d
	cmp	r15d, ecx
	mov	QWORD PTR prefixLowest$1$[rsp], rcx
	mov	eax, r12d
	sete	al
	lea	r13, QWORD PTR [rax+r15]

; 110  :     if (dictMode == ZSTD_noDict) {
; 111  :         U32 const current = (U32)(ip - base);

	mov	edx, r13d
	sub	edx, ebp

; 114  :         if (offset_2 > maxRep) offsetSaved = offset_2, offset_2 = 0;
; 115  :         if (offset_1 > maxRep) offsetSaved = offset_1, offset_1 = 0;

	mov	ebp, r12d
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 993  :     U32    const withinWindow = (current - lowestValid > maxDistance) ? current - maxDistance : lowestValid;

	mov	eax, edx

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	mov	ecx, edx
	sub	ecx, r10d
	sub	eax, edi
	cmp	eax, r10d
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 125  :     while (ip < ilimit) {   /* < instead of <=, because repcode check at (ip+1) */

	mov	r10d, r12d
	lea	rax, QWORD PTR [rsi-8]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	cmovbe	ecx, edi
	test	r9d, r9d

; 995  :     U32    const matchLowest = isDictionary ? lowestValid : withinWindow;

	cmovne	ecx, edi
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 113  :         U32 const maxRep = current - windowLow;

	sub	edx, ecx

; 125  :     while (ip < ilimit) {   /* < instead of <=, because repcode check at (ip+1) */

	mov	ecx, r11d
	cmp	r8d, edx
	cmovbe	ebp, r8d
	cmovbe	r8d, r12d
	cmp	r11d, edx
	cmovbe	ecx, r8d
	cmovbe	r10d, r11d
	mov	DWORD PTR tv11653[rsp], ecx
	cmp	r13, rax
	jae	$LN485@ZSTD_compr
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 485  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	DWORD PTR offset_2$1$[rsp], ebp
	mov	DWORD PTR offset_1$1$[rsp], r10d
	npad	6
$LL1679@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 128  :         size_t const h2 = ZSTD_hashPtr(ip, hBitsL, 8);

	mov	r8d, 8
	mov	edx, r14d
	mov	rcx, r13
	call	ZSTD_hashPtr

; 129  :         size_t const h = ZSTD_hashPtr(ip, hBitsS, mls);

	mov	edx, DWORD PTR hBitsS$1$[rsp]
	mov	r8d, 7
	mov	rcx, r13
	mov	rsi, rax
	call	ZSTD_hashPtr

; 130  :         size_t const dictHL = ZSTD_hashPtr(ip, dictHBitsL, 8);

	mov	r8d, 8
	mov	edx, r14d
	mov	rcx, r13
	mov	rdi, rax
	call	ZSTD_hashPtr

; 131  :         size_t const dictHS = ZSTD_hashPtr(ip, dictHBitsS, mls);

	mov	edx, DWORD PTR hBitsS$1$[rsp]
	mov	r8d, 7
	mov	rcx, r13
	call	ZSTD_hashPtr

; 132  :         U32 const current = (U32)(ip-base);

	mov	rdx, QWORD PTR base$1$[rsp]
	mov	ecx, r13d

; 133  :         U32 const matchIndexL = hashLong[h2];
; 134  :         U32 matchIndexS = hashSmall[h];

	mov	r10, QWORD PTR hashSmall$1$[rsp]
	sub	ecx, edx
	mov	r11, QWORD PTR hashLong$1$[rsp]
	mov	DWORD PTR current$1$[rsp], ecx
	mov	r9d, DWORD PTR [r10+rdi*4]
	mov	r8d, DWORD PTR [r11+rsi*4]

; 135  :         const BYTE* matchLong = base + matchIndexL;
; 136  :         const BYTE* match = base + matchIndexS;
; 137  :         const U32 repIndex = current + 1 - offset_1;
; 138  :         const BYTE* repMatch = (dictMode == ZSTD_dictMatchState
; 139  :                             && repIndex < prefixLowestIndex) ?
; 140  :                                dictBase + (repIndex - dictIndexDelta) :
; 141  :                                base + repIndex;
; 142  :         hashLong[h2] = hashSmall[h] = current;   /* update hash tables */

	mov	DWORD PTR [r10+rdi*4], ecx

; 143  : 
; 144  :         /* check dictMatchState repcode */
; 145  :         if (dictMode == ZSTD_dictMatchState
; 146  :             && ((U32)((prefixLowestIndex-1) - repIndex) >= 3 /* intentional underflow */)
; 147  :             && (MEM_read32(repMatch) == MEM_read32(ip+1)) ) {
; 148  :             const BYTE* repMatchEnd = repIndex < prefixLowestIndex ? dictEnd : iend;
; 149  :             mLength = ZSTD_count_2segments(ip+1+4, repMatch+4, iend, repMatchEnd, prefixLowest) + 4;
; 150  :             ip++;
; 151  :             ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, 0, mLength-MINMATCH);
; 152  :             goto _match_stored;
; 153  :         }
; 154  : 
; 155  :         /* check noDict repcode */
; 156  :         if ( dictMode == ZSTD_noDict
; 157  :           && ((offset_1 > 0) & (MEM_read32(ip+1-offset_1) == MEM_read32(ip+1)))) {

	mov	r10d, DWORD PTR offset_1$1$[rsp]
	mov	DWORD PTR [r11+rsi*4], ecx
	lea	rbp, QWORD PTR [rdx+r9]
	mov	eax, DWORD PTR [r13+1]
	lea	r14, QWORD PTR [rdx+r8]
	lea	rsi, QWORD PTR [r13+1]
	mov	ecx, r12d
	mov	rdx, r13
	mov	QWORD PTR litLength$1$[rsp], rsi
	sub	rdx, r10
	cmp	DWORD PTR [rdx+1], eax
	mov	eax, r12d
	sete	cl
	test	r10d, r10d
	setne	al
	test	ecx, eax
	je	$LN1703@ZSTD_compr

; 158  :             mLength = ZSTD_count(ip+1+4, ip+1+4-offset_1, iend) + 4;

	mov	rbp, QWORD PTR iend$1$[rsp]
	lea	rcx, QWORD PTR [r13+5]
	mov	r8, rbp
	add	rdx, 5
	call	ZSTD_count
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rcx, QWORD PTR [rbx+24]
	add	rbp, -32				; ffffffffffffffe0H
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 159  :             ip++;

	mov	r13, rsi
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	mov	QWORD PTR litLimit_w$1$[rsp], rbp
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 160  :             ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, 0, mLength-MINMATCH);

	sub	rsi, r15
	lea	rdi, QWORD PTR [rax+4]
	lea	r14, QWORD PTR [rdi-3]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	lea	r8, QWORD PTR [rsi+r15]

; 443  : #if defined(DEBUGLEVEL) && (DEBUGLEVEL >= 6)
; 444  :     static const BYTE* g_start = NULL;
; 445  :     if (g_start==NULL) g_start = (const BYTE*)literals;  /* note : index only works for compression within a single segment */
; 446  :     {   U32 const pos = (U32)((const BYTE*)literals - g_start);
; 447  :         DEBUGLOG(6, "Cpos%7u :%3u literals, match%4u bytes at offCode%7u",
; 448  :                pos, (U32)litLength, (U32)mlBase+MINMATCH, (U32)offCode);
; 449  :     }
; 450  : #endif
; 451  :     assert((size_t)(seqStorePtr->sequences - seqStorePtr->sequencesStart) < seqStorePtr->maxNbSeq);
; 452  :     /* copy Literals */
; 453  :     assert(seqStorePtr->maxNbLit <= 128 KB);
; 454  :     assert(seqStorePtr->lit + litLength <= seqStorePtr->litStart + seqStorePtr->maxNbLit);
; 455  :     assert(literals + litLength <= litLimit);
; 456  :     if (litEnd <= litLimit_w) {

	cmp	r8, rbp
	ja	SHORT $LN2142@ZSTD_compr
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [r15]
	movups	XMMWORD PTR [rcx], xmm0
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 462  :         if (litLength > 16) {

	cmp	rsi, 16
	jbe	SHORT $LN2143@ZSTD_compr

; 463  :             ZSTD_wildcopy(seqStorePtr->lit+16, literals+16, (ptrdiff_t)litLength-16, ZSTD_no_overlap);

	mov	rax, QWORD PTR [rbx+24]
	add	r15, 16
	add	rax, 16
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	lea	rcx, QWORD PTR [rax-16]
	add	rcx, rsi
	npad	6
$LL2156@ZSTD_compr:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [r15]

; 289  :             COPY16(op, ip);

	lea	r15, QWORD PTR [r15+16]

; 243  :     memcpy(dst, src, 16);

	movups	XMMWORD PTR [rax], xmm0

; 289  :             COPY16(op, ip);

	add	rax, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rax, rcx
	jb	SHORT $LL2156@ZSTD_compr
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	SHORT $LN2143@ZSTD_compr
$LN2142@ZSTD_compr:

; 466  :         ZSTD_safecopyLiterals(seqStorePtr->lit, literals, litEnd, litLimit_w);

	mov	r9, rbp
	mov	rdx, r15
	call	ZSTD_safecopyLiterals
$LN2143@ZSTD_compr:

; 467  :     }
; 468  :     seqStorePtr->lit += litLength;

	add	QWORD PTR [rbx+24], rsi
	mov	rcx, QWORD PTR [rbx+8]

; 469  : 
; 470  :     /* literal Length */
; 471  :     if (litLength>0xFFFF) {

	cmp	rsi, 65535				; 0000ffffH
	jbe	SHORT $LN2571@ZSTD_compr

; 472  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 473  :         seqStorePtr->longLengthID = 1;
; 474  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [rbx+72], 1
	sub	rax, QWORD PTR [rbx]
	sar	rax, 3
	mov	DWORD PTR [rbx+76], eax
$LN2571@ZSTD_compr:

; 475  :     }
; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	WORD PTR [rcx+4], si

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	mov	rax, QWORD PTR [rbx+8]
	mov	DWORD PTR [rax], 1
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 161  :             goto _match_stored;

	jmp	$LN2632@ZSTD_compr
$LN1703@ZSTD_compr:

; 162  :         }
; 163  : 
; 164  :         if (matchIndexL > prefixLowestIndex) {

	mov	ecx, DWORD PTR prefixLowestIndex$1$[rsp]
	cmp	r8d, ecx
	jbe	$LN1706@ZSTD_compr

; 165  :             /* check prefix long match */
; 166  :             if (MEM_read64(matchLong) == MEM_read64(ip)) {

	mov	rax, QWORD PTR [r13]
	cmp	QWORD PTR [r14], rax
	jne	SHORT $LN1706@ZSTD_compr

; 167  :                 mLength = ZSTD_count(ip+8, matchLong+8, iend) + 8;

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rdx, QWORD PTR [r14+8]
	lea	rcx, QWORD PTR [r13+8]
	call	ZSTD_count

; 168  :                 offset = (U32)(ip-matchLong);
; 169  :                 while (((ip>anchor) & (matchLong>prefixLowest)) && (ip[-1] == matchLong[-1])) { ip--; matchLong--; mLength++; } /* catch up */

	mov	r8, QWORD PTR prefixLowest$1$[rsp]
	mov	ecx, r12d
	mov	r9d, r13d
	sub	r9d, r14d
	cmp	r14, r8
	mov	DWORD PTR offset$1$[rsp], r9d
	lea	rdi, QWORD PTR [rax+8]
	mov	eax, r12d
	seta	cl
	cmp	r13, r15
	seta	al
	test	ecx, eax
	je	$_match_found$2645
	npad	1
$LL1681@ZSTD_compr:
	movzx	eax, BYTE PTR [r14-1]
	lea	rdx, QWORD PTR [r13-1]
	dec	r14
	cmp	BYTE PTR [rdx], al
	jne	$_match_found$2645
	inc	rdi
	mov	ecx, r12d
	cmp	r14, r8
	mov	eax, r12d
	mov	r13, rdx
	seta	cl
	cmp	rdx, r15
	seta	al
	test	ecx, eax
	jne	SHORT $LL1681@ZSTD_compr

; 170  :                 goto _match_found;

	jmp	$_match_found$2645
$LN1706@ZSTD_compr:

; 171  :             }
; 172  :         } else if (dictMode == ZSTD_dictMatchState) {
; 173  :             /* check dictMatchState long match */
; 174  :             U32 const dictMatchIndexL = dictHashLong[dictHL];
; 175  :             const BYTE* dictMatchL = dictBase + dictMatchIndexL;
; 176  :             assert(dictMatchL < dictEnd);
; 177  : 
; 178  :             if (dictMatchL > dictStart && MEM_read64(dictMatchL) == MEM_read64(ip)) {
; 179  :                 mLength = ZSTD_count_2segments(ip+8, dictMatchL+8, iend, dictEnd, prefixLowest) + 8;
; 180  :                 offset = (U32)(current - dictMatchIndexL - dictIndexDelta);
; 181  :                 while (((ip>anchor) & (dictMatchL>dictStart)) && (ip[-1] == dictMatchL[-1])) { ip--; dictMatchL--; mLength++; } /* catch up */
; 182  :                 goto _match_found;
; 183  :         }   }
; 184  : 
; 185  :         if (matchIndexS > prefixLowestIndex) {

	cmp	r9d, ecx
	jbe	$LN1711@ZSTD_compr

; 186  :             /* check prefix short match */
; 187  :             if (MEM_read32(match) == MEM_read32(ip)) {

	mov	eax, DWORD PTR [r13]
	cmp	DWORD PTR [rbp], eax
	jne	$LN1711@ZSTD_compr
$_search_next_long$2646:

; 201  : #if defined(__aarch64__)
; 202  :         PREFETCH_L1(ip+256);
; 203  : #endif
; 204  :         continue;
; 205  : 
; 206  : _search_next_long:
; 207  : 
; 208  :         {   size_t const hl3 = ZSTD_hashPtr(ip+1, hBitsL, 8);

	mov	edx, DWORD PTR hBitsL$1$[rsp]
	mov	r8d, 8
	mov	rcx, rsi
	call	ZSTD_hashPtr

; 209  :             size_t const dictHLNext = ZSTD_hashPtr(ip+1, dictHBitsL, 8);

	mov	edx, DWORD PTR hBitsL$1$[rsp]
	mov	r8d, 8
	mov	rcx, rsi
	mov	rdi, rax
	call	ZSTD_hashPtr

; 210  :             U32 const matchIndexL3 = hashLong[hl3];

	mov	r8, QWORD PTR hashLong$1$[rsp]

; 211  :             const BYTE* matchL3 = base + matchIndexL3;
; 212  :             hashLong[hl3] = current + 1;

	mov	eax, DWORD PTR current$1$[rsp]
	mov	ecx, DWORD PTR [r8+rdi*4]
	mov	esi, ecx
	add	rsi, QWORD PTR base$1$[rsp]
	inc	eax
	mov	DWORD PTR [r8+rdi*4], eax

; 213  : 
; 214  :             /* check prefix long +1 match */
; 215  :             if (matchIndexL3 > prefixLowestIndex) {

	cmp	ecx, DWORD PTR prefixLowestIndex$1$[rsp]
	jbe	$LN1716@ZSTD_compr

; 216  :                 if (MEM_read64(matchL3) == MEM_read64(ip+1)) {

	mov	r14, QWORD PTR litLength$1$[rsp]
	mov	rax, QWORD PTR [r14]
	cmp	QWORD PTR [rsi], rax
	jne	SHORT $LN1716@ZSTD_compr

; 217  :                     mLength = ZSTD_count(ip+9, matchL3+8, iend) + 8;

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rdx, QWORD PTR [rsi+8]
	lea	rcx, QWORD PTR [r13+9]
	call	ZSTD_count

; 218  :                     ip++;
; 219  :                     offset = (U32)(ip-matchL3);
; 220  :                     while (((ip>anchor) & (matchL3>prefixLowest)) && (ip[-1] == matchL3[-1])) { ip--; matchL3--; mLength++; } /* catch up */

	mov	r8, QWORD PTR prefixLowest$1$[rsp]
	mov	ecx, r12d
	mov	r9d, r14d
	mov	r13, r14
	sub	r9d, esi
	cmp	r14, r15
	mov	DWORD PTR offset$1$[rsp], r9d
	lea	rdi, QWORD PTR [rax+8]
	mov	eax, r12d
	seta	cl
	cmp	rsi, r8
	seta	al
	test	ecx, eax
	je	$_match_found$2645
	npad	10
$LL1685@ZSTD_compr:
	movzx	eax, BYTE PTR [rsi-1]
	lea	rdx, QWORD PTR [r13-1]
	dec	rsi
	cmp	BYTE PTR [rdx], al
	jne	$_match_found$2645
	inc	rdi
	mov	ecx, r12d
	cmp	rsi, r8
	mov	eax, r12d
	mov	r13, rdx
	seta	cl
	cmp	rdx, r15
	seta	al
	test	ecx, eax
	jne	SHORT $LL1685@ZSTD_compr

; 221  :                     goto _match_found;

	jmp	SHORT $_match_found$2645
$LN1716@ZSTD_compr:

; 222  :                 }
; 223  :             } else if (dictMode == ZSTD_dictMatchState) {
; 224  :                 /* check dict long +1 match */
; 225  :                 U32 const dictMatchIndexL3 = dictHashLong[dictHLNext];
; 226  :                 const BYTE* dictMatchL3 = dictBase + dictMatchIndexL3;
; 227  :                 assert(dictMatchL3 < dictEnd);
; 228  :                 if (dictMatchL3 > dictStart && MEM_read64(dictMatchL3) == MEM_read64(ip+1)) {
; 229  :                     mLength = ZSTD_count_2segments(ip+1+8, dictMatchL3+8, iend, dictEnd, prefixLowest) + 8;
; 230  :                     ip++;
; 231  :                     offset = (U32)(current + 1 - dictMatchIndexL3 - dictIndexDelta);
; 232  :                     while (((ip>anchor) & (dictMatchL3>dictStart)) && (ip[-1] == dictMatchL3[-1])) { ip--; dictMatchL3--; mLength++; } /* catch up */
; 233  :                     goto _match_found;
; 234  :         }   }   }
; 235  : 
; 236  :         /* if no long +1 match, explore the short match we found */
; 237  :         if (dictMode == ZSTD_dictMatchState && matchIndexS < prefixLowestIndex) {
; 238  :             mLength = ZSTD_count_2segments(ip+4, match+4, iend, dictEnd, prefixLowest) + 4;
; 239  :             offset = (U32)(current - matchIndexS);
; 240  :             while (((ip>anchor) & (match>dictStart)) && (ip[-1] == match[-1])) { ip--; match--; mLength++; } /* catch up */
; 241  :         } else {
; 242  :             mLength = ZSTD_count(ip+4, match+4, iend) + 4;

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rdx, QWORD PTR [rbp+4]
	lea	rcx, QWORD PTR [r13+4]
	call	ZSTD_count

; 243  :             offset = (U32)(ip - match);
; 244  :             while (((ip>anchor) & (match>prefixLowest)) && (ip[-1] == match[-1])) { ip--; match--; mLength++; } /* catch up */

	mov	r8, QWORD PTR prefixLowest$1$[rsp]
	mov	ecx, r12d
	mov	r9d, r13d
	sub	r9d, ebp
	cmp	rbp, r8
	mov	DWORD PTR offset$1$[rsp], r9d
	lea	rdi, QWORD PTR [rax+4]
	mov	eax, r12d
	seta	cl
	cmp	r13, r15
	seta	al
	test	ecx, eax
	je	SHORT $_match_found$2645
	npad	3
$LL1691@ZSTD_compr:
	movzx	eax, BYTE PTR [rbp-1]
	lea	rdx, QWORD PTR [r13-1]
	dec	rbp
	cmp	BYTE PTR [rdx], al
	jne	SHORT $_match_found$2645
	inc	rdi
	mov	ecx, r12d
	cmp	rbp, r8
	mov	eax, r12d
	mov	r13, rdx
	seta	cl
	cmp	rdx, r15
	seta	al
	test	ecx, eax
	jne	SHORT $LL1691@ZSTD_compr
$_match_found$2645:

; 245  :         }
; 246  : 
; 247  :         /* fall-through */
; 248  : 
; 249  : _match_found:
; 250  :         offset_2 = offset_1;

	mov	ebp, DWORD PTR offset_1$1$[rsp]

; 253  :         ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, offset + ZSTD_REP_MOVE, mLength-MINMATCH);

	lea	r14, QWORD PTR [rdi-3]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rcx, QWORD PTR [rbx+24]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 253  :         ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, offset + ZSTD_REP_MOVE, mLength-MINMATCH);

	mov	rsi, r13
	sub	rsi, r15
	mov	DWORD PTR offset_2$1$[rsp], ebp
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	mov	rbp, QWORD PTR iend$1$[rsp]
	add	rbp, -32				; ffffffffffffffe0H
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 251  :         offset_1 = offset;

	mov	DWORD PTR offset_1$1$[rsp], r9d
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	mov	QWORD PTR litLimit_w$1$[rsp], rbp

; 442  :     BYTE const* const litEnd = literals + litLength;

	lea	r8, QWORD PTR [r15+rsi]

; 443  : #if defined(DEBUGLEVEL) && (DEBUGLEVEL >= 6)
; 444  :     static const BYTE* g_start = NULL;
; 445  :     if (g_start==NULL) g_start = (const BYTE*)literals;  /* note : index only works for compression within a single segment */
; 446  :     {   U32 const pos = (U32)((const BYTE*)literals - g_start);
; 447  :         DEBUGLOG(6, "Cpos%7u :%3u literals, match%4u bytes at offCode%7u",
; 448  :                pos, (U32)litLength, (U32)mlBase+MINMATCH, (U32)offCode);
; 449  :     }
; 450  : #endif
; 451  :     assert((size_t)(seqStorePtr->sequences - seqStorePtr->sequencesStart) < seqStorePtr->maxNbSeq);
; 452  :     /* copy Literals */
; 453  :     assert(seqStorePtr->maxNbLit <= 128 KB);
; 454  :     assert(seqStorePtr->lit + litLength <= seqStorePtr->litStart + seqStorePtr->maxNbLit);
; 455  :     assert(literals + litLength <= litLimit);
; 456  :     if (litEnd <= litLimit_w) {

	cmp	r8, rbp
	ja	SHORT $LN2410@ZSTD_compr
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [r15]
	movups	XMMWORD PTR [rcx], xmm0
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 462  :         if (litLength > 16) {

	cmp	rsi, 16
	jbe	SHORT $LN2411@ZSTD_compr

; 463  :             ZSTD_wildcopy(seqStorePtr->lit+16, literals+16, (ptrdiff_t)litLength-16, ZSTD_no_overlap);

	mov	rax, QWORD PTR [rbx+24]
	add	r15, 16
	add	rax, 16
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	lea	rcx, QWORD PTR [rax-16]
	add	rcx, rsi
	npad	13
$LL2424@ZSTD_compr:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [r15]

; 289  :             COPY16(op, ip);

	lea	r15, QWORD PTR [r15+16]

; 243  :     memcpy(dst, src, 16);

	movups	XMMWORD PTR [rax], xmm0

; 289  :             COPY16(op, ip);

	add	rax, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rax, rcx
	jb	SHORT $LL2424@ZSTD_compr
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	SHORT $LN2411@ZSTD_compr
$LN2410@ZSTD_compr:

; 466  :         ZSTD_safecopyLiterals(seqStorePtr->lit, literals, litEnd, litLimit_w);

	mov	r9, rbp
	mov	rdx, r15
	call	ZSTD_safecopyLiterals
	mov	r9d, DWORD PTR offset$1$[rsp]
$LN2411@ZSTD_compr:

; 467  :     }
; 468  :     seqStorePtr->lit += litLength;

	add	QWORD PTR [rbx+24], rsi
	mov	rcx, QWORD PTR [rbx+8]

; 469  : 
; 470  :     /* literal Length */
; 471  :     if (litLength>0xFFFF) {

	cmp	rsi, 65535				; 0000ffffH
	jbe	SHORT $LN2573@ZSTD_compr

; 472  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 473  :         seqStorePtr->longLengthID = 1;
; 474  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [rbx+72], 1
	sub	rax, QWORD PTR [rbx]
	sar	rax, 3
	mov	DWORD PTR [rbx+76], eax
$LN2573@ZSTD_compr:

; 475  :     }
; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	WORD PTR [rcx+4], si

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	lea	ecx, DWORD PTR [r9+3]
	mov	rax, QWORD PTR [rbx+8]
	mov	DWORD PTR [rax], ecx
$LN2632@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 257  :         ip += mLength;

	mov	rcx, QWORD PTR [rbx+8]
	cmp	r14, 65535				; 0000ffffH
	jbe	SHORT $LN2574@ZSTD_compr
	mov	rax, rcx
	mov	DWORD PTR [rbx+72], 2
	sub	rax, QWORD PTR [rbx]
	sar	rax, 3
	mov	DWORD PTR [rbx+76], eax
$LN2574@ZSTD_compr:
	mov	WORD PTR [rcx+6], r14w
	add	QWORD PTR [rbx+8], 8
$_match_stored$2647:
	lea	r15, QWORD PTR [rdi+r13]
	mov	r13, r15

; 258  :         anchor = ip;

	cmp	r15, QWORD PTR ilimit$1$[rsp]

; 259  : 
; 260  :         if (ip <= ilimit) {

	ja	$LN2619@ZSTD_compr

; 261  :             /* Complementary insertion */
; 262  :             /* done after iLimit test, as candidates could be > iend-8 */
; 263  :             {   U32 const indexToInsert = current+2;

	mov	r14d, DWORD PTR current$1$[rsp]

; 264  :                 hashLong[ZSTD_hashPtr(base+indexToInsert, hBitsL, 8)] = indexToInsert;

	mov	r8d, 8
	mov	rdi, QWORD PTR base$1$[rsp]
	add	r14d, 2
	mov	edx, DWORD PTR hBitsL$1$[rsp]
	mov	ebp, r14d
	add	rbp, rdi
	mov	rcx, rbp
	call	ZSTD_hashPtr
	mov	rcx, QWORD PTR hashLong$1$[rsp]
	mov	esi, r15d

; 265  :                 hashLong[ZSTD_hashPtr(ip-2, hBitsL, 8)] = (U32)(ip-2-base);

	mov	edx, DWORD PTR hBitsL$1$[rsp]
	sub	esi, edi
	mov	r8d, 8
	mov	DWORD PTR [rcx+rax*4], r14d
	lea	rcx, QWORD PTR [r15-2]
	lea	edi, DWORD PTR [rsi-2]
	call	ZSTD_hashPtr
	mov	rcx, QWORD PTR hashLong$1$[rsp]

; 266  :                 hashSmall[ZSTD_hashPtr(base+indexToInsert, hBitsS, mls)] = indexToInsert;

	mov	r8d, 7
	mov	edx, DWORD PTR hBitsS$1$[rsp]
	mov	DWORD PTR [rcx+rax*4], edi
	mov	rcx, rbp
	call	ZSTD_hashPtr
	mov	rbp, QWORD PTR hashSmall$1$[rsp]

; 267  :                 hashSmall[ZSTD_hashPtr(ip-1, hBitsS, mls)] = (U32)(ip-1-base);

	lea	rcx, QWORD PTR [r15-1]
	mov	edx, DWORD PTR hBitsS$1$[rsp]
	lea	edi, DWORD PTR [rsi-1]
	mov	r8d, 7
	mov	DWORD PTR [rbp+rax*4], r14d
	call	ZSTD_hashPtr
	mov	r14, QWORD PTR litLimit_w$1$[rsp]
	mov	DWORD PTR [rbp+rax*4], edi
	mov	ebp, DWORD PTR offset_2$1$[rsp]
	npad	9
$LL1695@ZSTD_compr:

; 268  :             }
; 269  : 
; 270  :             /* check immediate repcode */
; 271  :             if (dictMode == ZSTD_dictMatchState) {
; 272  :                 while (ip <= ilimit) {
; 273  :                     U32 const current2 = (U32)(ip-base);
; 274  :                     U32 const repIndex2 = current2 - offset_2;
; 275  :                     const BYTE* repMatch2 = dictMode == ZSTD_dictMatchState
; 276  :                         && repIndex2 < prefixLowestIndex ?
; 277  :                             dictBase + repIndex2 - dictIndexDelta :
; 278  :                             base + repIndex2;
; 279  :                     if ( ((U32)((prefixLowestIndex-1) - (U32)repIndex2) >= 3 /* intentional overflow */)
; 280  :                        && (MEM_read32(repMatch2) == MEM_read32(ip)) ) {
; 281  :                         const BYTE* const repEnd2 = repIndex2 < prefixLowestIndex ? dictEnd : iend;
; 282  :                         size_t const repLength2 = ZSTD_count_2segments(ip+4, repMatch2+4, iend, repEnd2, prefixLowest) + 4;
; 283  :                         U32 tmpOffset = offset_2; offset_2 = offset_1; offset_1 = tmpOffset;   /* swap offset_2 <=> offset_1 */
; 284  :                         ZSTD_storeSeq(seqStore, 0, anchor, iend, 0, repLength2-MINMATCH);
; 285  :                         hashSmall[ZSTD_hashPtr(ip, hBitsS, mls)] = current2;
; 286  :                         hashLong[ZSTD_hashPtr(ip, hBitsL, 8)] = current2;
; 287  :                         ip += repLength2;
; 288  :                         anchor = ip;
; 289  :                         continue;
; 290  :                     }
; 291  :                     break;
; 292  :             }   }
; 293  : 
; 294  :             if (dictMode == ZSTD_noDict) {
; 295  :                 while ( (ip <= ilimit)
; 296  :                      && ( (offset_2>0)

	mov	eax, ebp
	mov	ecx, r12d
	mov	rdx, r13
	sub	rdx, rax
	mov	eax, DWORD PTR [rdx]
	cmp	DWORD PTR [r13], eax
	mov	eax, r12d
	sete	cl
	test	ebp, ebp
	setne	al
	test	ecx, eax
	je	$LN2623@ZSTD_compr

; 297  :                         & (MEM_read32(ip) == MEM_read32(ip - offset_2)) )) {
; 298  :                     /* store sequence */
; 299  :                     size_t const rLength = ZSTD_count(ip+4, ip+4-offset_2, iend) + 4;

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rcx, QWORD PTR [r13+4]
	add	rdx, 4
	call	ZSTD_count

; 300  :                     U32 const tmpOff = offset_2; offset_2 = offset_1; offset_1 = tmpOff;  /* swap offset_2 <=> offset_1 */
; 301  :                     hashSmall[ZSTD_hashPtr(ip, hBitsS, mls)] = (U32)(ip-base);

	mov	edx, DWORD PTR hBitsS$1$[rsp]
	mov	ecx, ebp
	mov	ebp, DWORD PTR offset_1$1$[rsp]
	mov	edi, r13d
	sub	edi, DWORD PTR base$1$[rsp]
	mov	r8d, 7
	mov	DWORD PTR offset_1$1$[rsp], ecx
	lea	rsi, QWORD PTR [rax+4]
	mov	rcx, r13
	mov	DWORD PTR offset_2$1$[rsp], ebp
	call	ZSTD_hashPtr
	mov	rcx, QWORD PTR hashSmall$1$[rsp]

; 302  :                     hashLong[ZSTD_hashPtr(ip, hBitsL, 8)] = (U32)(ip-base);

	mov	r8d, 8
	mov	edx, DWORD PTR hBitsL$1$[rsp]
	mov	DWORD PTR [rcx+rax*4], edi
	mov	rcx, r13
	call	ZSTD_hashPtr
	mov	rcx, QWORD PTR hashLong$1$[rsp]
	mov	DWORD PTR [rcx+rax*4], edi

; 303  :                     ZSTD_storeSeq(seqStore, 0, anchor, iend, 0, rLength-MINMATCH);

	lea	rdi, QWORD PTR [rsi-3]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rcx, QWORD PTR [rbx+24]

; 443  : #if defined(DEBUGLEVEL) && (DEBUGLEVEL >= 6)
; 444  :     static const BYTE* g_start = NULL;
; 445  :     if (g_start==NULL) g_start = (const BYTE*)literals;  /* note : index only works for compression within a single segment */
; 446  :     {   U32 const pos = (U32)((const BYTE*)literals - g_start);
; 447  :         DEBUGLOG(6, "Cpos%7u :%3u literals, match%4u bytes at offCode%7u",
; 448  :                pos, (U32)litLength, (U32)mlBase+MINMATCH, (U32)offCode);
; 449  :     }
; 450  : #endif
; 451  :     assert((size_t)(seqStorePtr->sequences - seqStorePtr->sequencesStart) < seqStorePtr->maxNbSeq);
; 452  :     /* copy Literals */
; 453  :     assert(seqStorePtr->maxNbLit <= 128 KB);
; 454  :     assert(seqStorePtr->lit + litLength <= seqStorePtr->litStart + seqStorePtr->maxNbLit);
; 455  :     assert(literals + litLength <= litLimit);
; 456  :     if (litEnd <= litLimit_w) {

	cmp	r15, r14
	ja	SHORT $LN2464@ZSTD_compr
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [r15]
	movups	XMMWORD PTR [rcx], xmm0
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	SHORT $LN2465@ZSTD_compr
$LN2464@ZSTD_compr:

; 466  :         ZSTD_safecopyLiterals(seqStorePtr->lit, literals, litEnd, litLimit_w);

	mov	r9, r14
	mov	r8, r15
	mov	rdx, r15
	call	ZSTD_safecopyLiterals
$LN2465@ZSTD_compr:

; 475  :     }
; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	rax, QWORD PTR [rbx+8]
	mov	WORD PTR [rax+4], r12w

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	mov	rax, QWORD PTR [rbx+8]
	mov	DWORD PTR [rax], 1
	mov	rcx, QWORD PTR [rbx+8]

; 480  : 
; 481  :     /* match Length */
; 482  :     if (mlBase>0xFFFF) {

	cmp	rdi, 65535				; 0000ffffH
	jbe	SHORT $LN2575@ZSTD_compr

; 485  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [rbx+72], 2
	sub	rax, QWORD PTR [rbx]
	sar	rax, 3
	mov	DWORD PTR [rbx+76], eax
$LN2575@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 304  :                     ip += rLength;

	add	r13, rsi
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 487  :     seqStorePtr->sequences[0].matchLength = (U16)mlBase;

	mov	WORD PTR [rcx+6], di

; 488  : 
; 489  :     seqStorePtr->sequences++;

	add	QWORD PTR [rbx+8], 8
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 304  :                     ip += rLength;

	mov	r15, r13
	cmp	r13, QWORD PTR ilimit$1$[rsp]
	jbe	$LL1695@ZSTD_compr

; 305  :                     anchor = ip;
; 306  :                     continue;   /* faster when present ... (?) */
; 307  :         }   }   }
; 308  :     }   /* while (ip < ilimit) */

	jmp	SHORT $LN2623@ZSTD_compr
$LN1711@ZSTD_compr:
	mov	ebp, DWORD PTR offset_2$1$[rsp]

; 188  :                 goto _search_next_long;
; 189  :             }
; 190  :         } else if (dictMode == ZSTD_dictMatchState) {
; 191  :             /* check dictMatchState short match */
; 192  :             U32 const dictMatchIndexS = dictHashSmall[dictHS];
; 193  :             match = dictBase + dictMatchIndexS;
; 194  :             matchIndexS = dictMatchIndexS + dictIndexDelta;
; 195  : 
; 196  :             if (match > dictStart && MEM_read32(match) == MEM_read32(ip)) {
; 197  :                 goto _search_next_long;
; 198  :         }   }
; 199  : 
; 200  :         ip += ((ip-anchor) >> kSearchStrength) + 1;

	mov	rax, r13
	sub	rax, r15
	inc	r13
	sar	rax, 8
	add	r13, rax

; 259  : 
; 260  :         if (ip <= ilimit) {

	jmp	SHORT $LN2527@ZSTD_compr
$LN2619@ZSTD_compr:
	mov	ebp, DWORD PTR offset_2$1$[rsp]
$LN2623@ZSTD_compr:

; 125  :     while (ip < ilimit) {   /* < instead of <=, because repcode check at (ip+1) */

	mov	r10d, DWORD PTR offset_1$1$[rsp]
$LN2527@ZSTD_compr:
	mov	r14d, DWORD PTR hBitsL$1$[rsp]
	cmp	r13, QWORD PTR ilimit$1$[rsp]
	jb	$LL1679@ZSTD_compr

; 333  :     case 7 :
; 334  :         return ZSTD_compressBlock_doubleFast_generic(ms, seqStore, rep, src, srcSize, 7, ZSTD_noDict);

	mov	ecx, DWORD PTR tv11653[rsp]
	jmp	$LN2633@ZSTD_compr
$LN6@ZSTD_compr:

; 59   :     U32* const hashSmall = ms->chainTable;

	mov	rax, QWORD PTR [rdx+64]

; 61   :     const BYTE* const base = ms->window.base;
; 62   :     const BYTE* const istart = (const BYTE*)src;
; 63   :     const BYTE* ip = istart;
; 64   :     const BYTE* anchor = istart;
; 65   :     const U32 endIndex = (U32)((size_t)(istart - base) + srcSize);

	sub	r8d, ebp
	add	r8d, ecx
	mov	QWORD PTR hashSmall$1$[rsp], rax
	mov	eax, DWORD PTR [rdx+188]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 991  :     U32    const maxDistance = 1U << windowLog;

	mov	ecx, DWORD PTR [rdx+184]
	shl	r10d, cl
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 60   :     const U32 hBitsS = cParams->chainLog;

	mov	DWORD PTR hBitsS$1$[rsp], eax
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 993  :     U32    const withinWindow = (current - lowestValid > maxDistance) ? current - maxDistance : lowestValid;

	mov	eax, r8d
	sub	eax, edi
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 58   :     const U32 hBitsL = cParams->hashLog;

	mov	DWORD PTR hBitsL$1$[rsp], r14d
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	sub	r8d, r10d
	cmp	eax, r10d
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 70   :     const BYTE* const ilimit = iend - HASH_READ_SIZE;

	lea	rax, QWORD PTR [rsi-8]
	mov	QWORD PTR ilimit$1$[rsp], rax
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	cmovbe	r8d, edi
	test	r9d, r9d

; 995  :     U32    const matchLowest = isDictionary ? lowestValid : withinWindow;

	cmovne	r8d, edi
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 68   :     const BYTE* const prefixLowest = base + prefixLowestIndex;

	mov	ecx, r8d
	add	rcx, rbp
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 995  :     U32    const matchLowest = isDictionary ? lowestValid : withinWindow;

	mov	DWORD PTR prefixLowestIndex$1$[rsp], r8d
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 71   :     U32 offset_1=rep[0], offset_2=rep[1];

	mov	r8d, DWORD PTR [r12+4]

; 72   :     U32 offsetSaved = 0;
; 73   : 
; 74   :     const ZSTD_matchState_t* const dms = ms->dictMatchState;
; 75   :     const ZSTD_compressionParameters* const dictCParams =
; 76   :                                      dictMode == ZSTD_dictMatchState ?
; 77   :                                      &dms->cParams : NULL;
; 78   :     const U32* const dictHashLong  = dictMode == ZSTD_dictMatchState ?
; 79   :                                      dms->hashTable : NULL;
; 80   :     const U32* const dictHashSmall = dictMode == ZSTD_dictMatchState ?
; 81   :                                      dms->chainTable : NULL;
; 82   :     const U32 dictStartIndex       = dictMode == ZSTD_dictMatchState ?
; 83   :                                      dms->window.dictLimit : 0;
; 84   :     const BYTE* const dictBase     = dictMode == ZSTD_dictMatchState ?
; 85   :                                      dms->window.base : NULL;
; 86   :     const BYTE* const dictStart    = dictMode == ZSTD_dictMatchState ?
; 87   :                                      dictBase + dictStartIndex : NULL;
; 88   :     const BYTE* const dictEnd      = dictMode == ZSTD_dictMatchState ?
; 89   :                                      dms->window.nextSrc : NULL;
; 90   :     const U32 dictIndexDelta       = dictMode == ZSTD_dictMatchState ?
; 91   :                                      prefixLowestIndex - (U32)(dictEnd - dictBase) :
; 92   :                                      0;
; 93   :     const U32 dictHBitsL           = dictMode == ZSTD_dictMatchState ?
; 94   :                                      dictCParams->hashLog : hBitsL;
; 95   :     const U32 dictHBitsS           = dictMode == ZSTD_dictMatchState ?
; 96   :                                      dictCParams->chainLog : hBitsS;
; 97   :     const U32 dictAndPrefixLength  = (U32)((ip - prefixLowest) + (dictEnd - dictStart));
; 98   : 
; 99   :     DEBUGLOG(5, "ZSTD_compressBlock_doubleFast_generic");
; 100  : 
; 101  :     assert(dictMode == ZSTD_noDict || dictMode == ZSTD_dictMatchState);
; 102  : 
; 103  :     /* if a dictionary is attached, it must be within window range */
; 104  :     if (dictMode == ZSTD_dictMatchState) {
; 105  :         assert(ms->window.dictLimit + (1U << cParams->windowLog) >= endIndex);
; 106  :     }
; 107  : 
; 108  :     /* init */
; 109  :     ip += (dictAndPrefixLength == 0);

	xor	r12d, r12d
	cmp	r15d, ecx
	mov	QWORD PTR prefixLowest$1$[rsp], rcx
	mov	eax, r12d
	sete	al
	lea	r13, QWORD PTR [rax+r15]

; 110  :     if (dictMode == ZSTD_noDict) {
; 111  :         U32 const current = (U32)(ip - base);

	mov	edx, r13d
	sub	edx, ebp

; 114  :         if (offset_2 > maxRep) offsetSaved = offset_2, offset_2 = 0;
; 115  :         if (offset_1 > maxRep) offsetSaved = offset_1, offset_1 = 0;

	mov	ebp, r12d
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 993  :     U32    const withinWindow = (current - lowestValid > maxDistance) ? current - maxDistance : lowestValid;

	mov	eax, edx

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	mov	ecx, edx
	sub	ecx, r10d
	sub	eax, edi
	cmp	eax, r10d
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 125  :     while (ip < ilimit) {   /* < instead of <=, because repcode check at (ip+1) */

	mov	r10d, r12d
	lea	rax, QWORD PTR [rsi-8]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	cmovbe	ecx, edi
	test	r9d, r9d

; 995  :     U32    const matchLowest = isDictionary ? lowestValid : withinWindow;

	cmovne	ecx, edi
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 113  :         U32 const maxRep = current - windowLow;

	sub	edx, ecx

; 125  :     while (ip < ilimit) {   /* < instead of <=, because repcode check at (ip+1) */

	mov	ecx, r11d
	cmp	r8d, edx
	cmovbe	ebp, r8d
	cmovbe	r8d, r12d
	cmp	r11d, edx
	cmovbe	ecx, r8d
	cmovbe	r10d, r11d
	mov	DWORD PTR tv11781[rsp], ecx
	cmp	r13, rax
	jae	$LN485@ZSTD_compr
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 485  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	DWORD PTR offset_2$1$[rsp], ebp
	mov	DWORD PTR offset_1$1$[rsp], r10d
	npad	5
$LL1037@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 128  :         size_t const h2 = ZSTD_hashPtr(ip, hBitsL, 8);

	mov	r8d, 8
	mov	edx, r14d
	mov	rcx, r13
	call	ZSTD_hashPtr

; 129  :         size_t const h = ZSTD_hashPtr(ip, hBitsS, mls);

	mov	edx, DWORD PTR hBitsS$1$[rsp]
	mov	r8d, 6
	mov	rcx, r13
	mov	rsi, rax
	call	ZSTD_hashPtr

; 130  :         size_t const dictHL = ZSTD_hashPtr(ip, dictHBitsL, 8);

	mov	r8d, 8
	mov	edx, r14d
	mov	rcx, r13
	mov	rdi, rax
	call	ZSTD_hashPtr

; 131  :         size_t const dictHS = ZSTD_hashPtr(ip, dictHBitsS, mls);

	mov	edx, DWORD PTR hBitsS$1$[rsp]
	mov	r8d, 6
	mov	rcx, r13
	call	ZSTD_hashPtr

; 132  :         U32 const current = (U32)(ip-base);

	mov	rdx, QWORD PTR base$1$[rsp]
	mov	ecx, r13d

; 133  :         U32 const matchIndexL = hashLong[h2];
; 134  :         U32 matchIndexS = hashSmall[h];

	mov	r10, QWORD PTR hashSmall$1$[rsp]
	sub	ecx, edx
	mov	r11, QWORD PTR hashLong$1$[rsp]
	mov	DWORD PTR current$1$[rsp], ecx
	mov	r9d, DWORD PTR [r10+rdi*4]
	mov	r8d, DWORD PTR [r11+rsi*4]

; 135  :         const BYTE* matchLong = base + matchIndexL;
; 136  :         const BYTE* match = base + matchIndexS;
; 137  :         const U32 repIndex = current + 1 - offset_1;
; 138  :         const BYTE* repMatch = (dictMode == ZSTD_dictMatchState
; 139  :                             && repIndex < prefixLowestIndex) ?
; 140  :                                dictBase + (repIndex - dictIndexDelta) :
; 141  :                                base + repIndex;
; 142  :         hashLong[h2] = hashSmall[h] = current;   /* update hash tables */

	mov	DWORD PTR [r10+rdi*4], ecx

; 143  : 
; 144  :         /* check dictMatchState repcode */
; 145  :         if (dictMode == ZSTD_dictMatchState
; 146  :             && ((U32)((prefixLowestIndex-1) - repIndex) >= 3 /* intentional underflow */)
; 147  :             && (MEM_read32(repMatch) == MEM_read32(ip+1)) ) {
; 148  :             const BYTE* repMatchEnd = repIndex < prefixLowestIndex ? dictEnd : iend;
; 149  :             mLength = ZSTD_count_2segments(ip+1+4, repMatch+4, iend, repMatchEnd, prefixLowest) + 4;
; 150  :             ip++;
; 151  :             ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, 0, mLength-MINMATCH);
; 152  :             goto _match_stored;
; 153  :         }
; 154  : 
; 155  :         /* check noDict repcode */
; 156  :         if ( dictMode == ZSTD_noDict
; 157  :           && ((offset_1 > 0) & (MEM_read32(ip+1-offset_1) == MEM_read32(ip+1)))) {

	mov	r10d, DWORD PTR offset_1$1$[rsp]
	mov	DWORD PTR [r11+rsi*4], ecx
	lea	rbp, QWORD PTR [rdx+r9]
	mov	eax, DWORD PTR [r13+1]
	lea	r14, QWORD PTR [rdx+r8]
	lea	rsi, QWORD PTR [r13+1]
	mov	ecx, r12d
	mov	rdx, r13
	mov	QWORD PTR litLength$1$[rsp], rsi
	sub	rdx, r10
	cmp	DWORD PTR [rdx+1], eax
	mov	eax, r12d
	sete	cl
	test	r10d, r10d
	setne	al
	test	ecx, eax
	je	$LN1061@ZSTD_compr

; 158  :             mLength = ZSTD_count(ip+1+4, ip+1+4-offset_1, iend) + 4;

	mov	rbp, QWORD PTR iend$1$[rsp]
	lea	rcx, QWORD PTR [r13+5]
	mov	r8, rbp
	add	rdx, 5
	call	ZSTD_count
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rcx, QWORD PTR [rbx+24]
	add	rbp, -32				; ffffffffffffffe0H
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 159  :             ip++;

	mov	r13, rsi
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	mov	QWORD PTR litLimit_w$1$[rsp], rbp
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 160  :             ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, 0, mLength-MINMATCH);

	sub	rsi, r15
	lea	rdi, QWORD PTR [rax+4]
	lea	r14, QWORD PTR [rdi-3]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	lea	r8, QWORD PTR [rsi+r15]

; 443  : #if defined(DEBUGLEVEL) && (DEBUGLEVEL >= 6)
; 444  :     static const BYTE* g_start = NULL;
; 445  :     if (g_start==NULL) g_start = (const BYTE*)literals;  /* note : index only works for compression within a single segment */
; 446  :     {   U32 const pos = (U32)((const BYTE*)literals - g_start);
; 447  :         DEBUGLOG(6, "Cpos%7u :%3u literals, match%4u bytes at offCode%7u",
; 448  :                pos, (U32)litLength, (U32)mlBase+MINMATCH, (U32)offCode);
; 449  :     }
; 450  : #endif
; 451  :     assert((size_t)(seqStorePtr->sequences - seqStorePtr->sequencesStart) < seqStorePtr->maxNbSeq);
; 452  :     /* copy Literals */
; 453  :     assert(seqStorePtr->maxNbLit <= 128 KB);
; 454  :     assert(seqStorePtr->lit + litLength <= seqStorePtr->litStart + seqStorePtr->maxNbLit);
; 455  :     assert(literals + litLength <= litLimit);
; 456  :     if (litEnd <= litLimit_w) {

	cmp	r8, rbp
	ja	SHORT $LN1471@ZSTD_compr
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [r15]
	movups	XMMWORD PTR [rcx], xmm0
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 462  :         if (litLength > 16) {

	cmp	rsi, 16
	jbe	SHORT $LN1472@ZSTD_compr

; 463  :             ZSTD_wildcopy(seqStorePtr->lit+16, literals+16, (ptrdiff_t)litLength-16, ZSTD_no_overlap);

	mov	rax, QWORD PTR [rbx+24]
	add	r15, 16
	add	rax, 16
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	lea	rcx, QWORD PTR [rax-16]
	add	rcx, rsi
	npad	6
$LL1485@ZSTD_compr:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [r15]

; 289  :             COPY16(op, ip);

	lea	r15, QWORD PTR [r15+16]

; 243  :     memcpy(dst, src, 16);

	movups	XMMWORD PTR [rax], xmm0

; 289  :             COPY16(op, ip);

	add	rax, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rax, rcx
	jb	SHORT $LL1485@ZSTD_compr
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	SHORT $LN1472@ZSTD_compr
$LN1471@ZSTD_compr:

; 466  :         ZSTD_safecopyLiterals(seqStorePtr->lit, literals, litEnd, litLimit_w);

	mov	r9, rbp
	mov	rdx, r15
	call	ZSTD_safecopyLiterals
$LN1472@ZSTD_compr:

; 467  :     }
; 468  :     seqStorePtr->lit += litLength;

	add	QWORD PTR [rbx+24], rsi
	mov	rcx, QWORD PTR [rbx+8]

; 469  : 
; 470  :     /* literal Length */
; 471  :     if (litLength>0xFFFF) {

	cmp	rsi, 65535				; 0000ffffH
	jbe	SHORT $LN2576@ZSTD_compr

; 472  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 473  :         seqStorePtr->longLengthID = 1;
; 474  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [rbx+72], 1
	sub	rax, QWORD PTR [rbx]
	sar	rax, 3
	mov	DWORD PTR [rbx+76], eax
$LN2576@ZSTD_compr:

; 475  :     }
; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	WORD PTR [rcx+4], si

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	mov	rax, QWORD PTR [rbx+8]
	mov	DWORD PTR [rax], 1
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 161  :             goto _match_stored;

	jmp	$LN2636@ZSTD_compr
$LN1061@ZSTD_compr:

; 162  :         }
; 163  : 
; 164  :         if (matchIndexL > prefixLowestIndex) {

	mov	ecx, DWORD PTR prefixLowestIndex$1$[rsp]
	cmp	r8d, ecx
	jbe	$LN1064@ZSTD_compr

; 165  :             /* check prefix long match */
; 166  :             if (MEM_read64(matchLong) == MEM_read64(ip)) {

	mov	rax, QWORD PTR [r13]
	cmp	QWORD PTR [r14], rax
	jne	SHORT $LN1064@ZSTD_compr

; 167  :                 mLength = ZSTD_count(ip+8, matchLong+8, iend) + 8;

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rdx, QWORD PTR [r14+8]
	lea	rcx, QWORD PTR [r13+8]
	call	ZSTD_count

; 168  :                 offset = (U32)(ip-matchLong);
; 169  :                 while (((ip>anchor) & (matchLong>prefixLowest)) && (ip[-1] == matchLong[-1])) { ip--; matchLong--; mLength++; } /* catch up */

	mov	r8, QWORD PTR prefixLowest$1$[rsp]
	mov	ecx, r12d
	mov	r9d, r13d
	sub	r9d, r14d
	cmp	r14, r8
	mov	DWORD PTR offset$1$[rsp], r9d
	lea	rdi, QWORD PTR [rax+8]
	mov	eax, r12d
	seta	cl
	cmp	r13, r15
	seta	al
	test	ecx, eax
	je	$_match_found$2648
	npad	1
$LL1039@ZSTD_compr:
	movzx	eax, BYTE PTR [r14-1]
	lea	rdx, QWORD PTR [r13-1]
	dec	r14
	cmp	BYTE PTR [rdx], al
	jne	$_match_found$2648
	inc	rdi
	mov	ecx, r12d
	cmp	r14, r8
	mov	eax, r12d
	mov	r13, rdx
	seta	cl
	cmp	rdx, r15
	seta	al
	test	ecx, eax
	jne	SHORT $LL1039@ZSTD_compr

; 170  :                 goto _match_found;

	jmp	$_match_found$2648
$LN1064@ZSTD_compr:

; 171  :             }
; 172  :         } else if (dictMode == ZSTD_dictMatchState) {
; 173  :             /* check dictMatchState long match */
; 174  :             U32 const dictMatchIndexL = dictHashLong[dictHL];
; 175  :             const BYTE* dictMatchL = dictBase + dictMatchIndexL;
; 176  :             assert(dictMatchL < dictEnd);
; 177  : 
; 178  :             if (dictMatchL > dictStart && MEM_read64(dictMatchL) == MEM_read64(ip)) {
; 179  :                 mLength = ZSTD_count_2segments(ip+8, dictMatchL+8, iend, dictEnd, prefixLowest) + 8;
; 180  :                 offset = (U32)(current - dictMatchIndexL - dictIndexDelta);
; 181  :                 while (((ip>anchor) & (dictMatchL>dictStart)) && (ip[-1] == dictMatchL[-1])) { ip--; dictMatchL--; mLength++; } /* catch up */
; 182  :                 goto _match_found;
; 183  :         }   }
; 184  : 
; 185  :         if (matchIndexS > prefixLowestIndex) {

	cmp	r9d, ecx
	jbe	$LN1069@ZSTD_compr

; 186  :             /* check prefix short match */
; 187  :             if (MEM_read32(match) == MEM_read32(ip)) {

	mov	eax, DWORD PTR [r13]
	cmp	DWORD PTR [rbp], eax
	jne	$LN1069@ZSTD_compr
$_search_next_long$2649:

; 201  : #if defined(__aarch64__)
; 202  :         PREFETCH_L1(ip+256);
; 203  : #endif
; 204  :         continue;
; 205  : 
; 206  : _search_next_long:
; 207  : 
; 208  :         {   size_t const hl3 = ZSTD_hashPtr(ip+1, hBitsL, 8);

	mov	edx, DWORD PTR hBitsL$1$[rsp]
	mov	r8d, 8
	mov	rcx, rsi
	call	ZSTD_hashPtr

; 209  :             size_t const dictHLNext = ZSTD_hashPtr(ip+1, dictHBitsL, 8);

	mov	edx, DWORD PTR hBitsL$1$[rsp]
	mov	r8d, 8
	mov	rcx, rsi
	mov	rdi, rax
	call	ZSTD_hashPtr

; 210  :             U32 const matchIndexL3 = hashLong[hl3];

	mov	r8, QWORD PTR hashLong$1$[rsp]

; 211  :             const BYTE* matchL3 = base + matchIndexL3;
; 212  :             hashLong[hl3] = current + 1;

	mov	eax, DWORD PTR current$1$[rsp]
	mov	ecx, DWORD PTR [r8+rdi*4]
	mov	esi, ecx
	add	rsi, QWORD PTR base$1$[rsp]
	inc	eax
	mov	DWORD PTR [r8+rdi*4], eax

; 213  : 
; 214  :             /* check prefix long +1 match */
; 215  :             if (matchIndexL3 > prefixLowestIndex) {

	cmp	ecx, DWORD PTR prefixLowestIndex$1$[rsp]
	jbe	$LN1074@ZSTD_compr

; 216  :                 if (MEM_read64(matchL3) == MEM_read64(ip+1)) {

	mov	r14, QWORD PTR litLength$1$[rsp]
	mov	rax, QWORD PTR [r14]
	cmp	QWORD PTR [rsi], rax
	jne	SHORT $LN1074@ZSTD_compr

; 217  :                     mLength = ZSTD_count(ip+9, matchL3+8, iend) + 8;

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rdx, QWORD PTR [rsi+8]
	lea	rcx, QWORD PTR [r13+9]
	call	ZSTD_count

; 218  :                     ip++;
; 219  :                     offset = (U32)(ip-matchL3);
; 220  :                     while (((ip>anchor) & (matchL3>prefixLowest)) && (ip[-1] == matchL3[-1])) { ip--; matchL3--; mLength++; } /* catch up */

	mov	r8, QWORD PTR prefixLowest$1$[rsp]
	mov	ecx, r12d
	mov	r9d, r14d
	mov	r13, r14
	sub	r9d, esi
	cmp	rsi, r8
	mov	DWORD PTR offset$1$[rsp], r9d
	lea	rdi, QWORD PTR [rax+8]
	mov	eax, r12d
	seta	cl
	cmp	r14, r15
	seta	al
	test	ecx, eax
	je	$_match_found$2648
	npad	10
$LL1043@ZSTD_compr:
	movzx	eax, BYTE PTR [rsi-1]
	lea	rdx, QWORD PTR [r13-1]
	dec	rsi
	cmp	BYTE PTR [rdx], al
	jne	$_match_found$2648
	inc	rdi
	mov	ecx, r12d
	cmp	rsi, r8
	mov	eax, r12d
	mov	r13, rdx
	seta	cl
	cmp	rdx, r15
	seta	al
	test	ecx, eax
	jne	SHORT $LL1043@ZSTD_compr

; 221  :                     goto _match_found;

	jmp	SHORT $_match_found$2648
$LN1074@ZSTD_compr:

; 222  :                 }
; 223  :             } else if (dictMode == ZSTD_dictMatchState) {
; 224  :                 /* check dict long +1 match */
; 225  :                 U32 const dictMatchIndexL3 = dictHashLong[dictHLNext];
; 226  :                 const BYTE* dictMatchL3 = dictBase + dictMatchIndexL3;
; 227  :                 assert(dictMatchL3 < dictEnd);
; 228  :                 if (dictMatchL3 > dictStart && MEM_read64(dictMatchL3) == MEM_read64(ip+1)) {
; 229  :                     mLength = ZSTD_count_2segments(ip+1+8, dictMatchL3+8, iend, dictEnd, prefixLowest) + 8;
; 230  :                     ip++;
; 231  :                     offset = (U32)(current + 1 - dictMatchIndexL3 - dictIndexDelta);
; 232  :                     while (((ip>anchor) & (dictMatchL3>dictStart)) && (ip[-1] == dictMatchL3[-1])) { ip--; dictMatchL3--; mLength++; } /* catch up */
; 233  :                     goto _match_found;
; 234  :         }   }   }
; 235  : 
; 236  :         /* if no long +1 match, explore the short match we found */
; 237  :         if (dictMode == ZSTD_dictMatchState && matchIndexS < prefixLowestIndex) {
; 238  :             mLength = ZSTD_count_2segments(ip+4, match+4, iend, dictEnd, prefixLowest) + 4;
; 239  :             offset = (U32)(current - matchIndexS);
; 240  :             while (((ip>anchor) & (match>dictStart)) && (ip[-1] == match[-1])) { ip--; match--; mLength++; } /* catch up */
; 241  :         } else {
; 242  :             mLength = ZSTD_count(ip+4, match+4, iend) + 4;

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rdx, QWORD PTR [rbp+4]
	lea	rcx, QWORD PTR [r13+4]
	call	ZSTD_count

; 243  :             offset = (U32)(ip - match);
; 244  :             while (((ip>anchor) & (match>prefixLowest)) && (ip[-1] == match[-1])) { ip--; match--; mLength++; } /* catch up */

	mov	r8, QWORD PTR prefixLowest$1$[rsp]
	mov	ecx, r12d
	mov	r9d, r13d
	sub	r9d, ebp
	cmp	rbp, r8
	mov	DWORD PTR offset$1$[rsp], r9d
	lea	rdi, QWORD PTR [rax+4]
	mov	eax, r12d
	seta	cl
	cmp	r13, r15
	seta	al
	test	ecx, eax
	je	SHORT $_match_found$2648
	npad	3
$LL1049@ZSTD_compr:
	movzx	eax, BYTE PTR [rbp-1]
	lea	rdx, QWORD PTR [r13-1]
	dec	rbp
	cmp	BYTE PTR [rdx], al
	jne	SHORT $_match_found$2648
	inc	rdi
	mov	ecx, r12d
	cmp	rbp, r8
	mov	eax, r12d
	mov	r13, rdx
	seta	cl
	cmp	rdx, r15
	seta	al
	test	ecx, eax
	jne	SHORT $LL1049@ZSTD_compr
$_match_found$2648:

; 245  :         }
; 246  : 
; 247  :         /* fall-through */
; 248  : 
; 249  : _match_found:
; 250  :         offset_2 = offset_1;

	mov	ebp, DWORD PTR offset_1$1$[rsp]

; 253  :         ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, offset + ZSTD_REP_MOVE, mLength-MINMATCH);

	lea	r14, QWORD PTR [rdi-3]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rcx, QWORD PTR [rbx+24]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 253  :         ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, offset + ZSTD_REP_MOVE, mLength-MINMATCH);

	mov	rsi, r13
	sub	rsi, r15
	mov	DWORD PTR offset_2$1$[rsp], ebp
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	mov	rbp, QWORD PTR iend$1$[rsp]
	add	rbp, -32				; ffffffffffffffe0H
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 251  :         offset_1 = offset;

	mov	DWORD PTR offset_1$1$[rsp], r9d
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	mov	QWORD PTR litLimit_w$1$[rsp], rbp

; 442  :     BYTE const* const litEnd = literals + litLength;

	lea	r8, QWORD PTR [r15+rsi]

; 443  : #if defined(DEBUGLEVEL) && (DEBUGLEVEL >= 6)
; 444  :     static const BYTE* g_start = NULL;
; 445  :     if (g_start==NULL) g_start = (const BYTE*)literals;  /* note : index only works for compression within a single segment */
; 446  :     {   U32 const pos = (U32)((const BYTE*)literals - g_start);
; 447  :         DEBUGLOG(6, "Cpos%7u :%3u literals, match%4u bytes at offCode%7u",
; 448  :                pos, (U32)litLength, (U32)mlBase+MINMATCH, (U32)offCode);
; 449  :     }
; 450  : #endif
; 451  :     assert((size_t)(seqStorePtr->sequences - seqStorePtr->sequencesStart) < seqStorePtr->maxNbSeq);
; 452  :     /* copy Literals */
; 453  :     assert(seqStorePtr->maxNbLit <= 128 KB);
; 454  :     assert(seqStorePtr->lit + litLength <= seqStorePtr->litStart + seqStorePtr->maxNbLit);
; 455  :     assert(literals + litLength <= litLimit);
; 456  :     if (litEnd <= litLimit_w) {

	cmp	r8, rbp
	ja	SHORT $LN1602@ZSTD_compr
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [r15]
	movups	XMMWORD PTR [rcx], xmm0
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 462  :         if (litLength > 16) {

	cmp	rsi, 16
	jbe	SHORT $LN1603@ZSTD_compr

; 463  :             ZSTD_wildcopy(seqStorePtr->lit+16, literals+16, (ptrdiff_t)litLength-16, ZSTD_no_overlap);

	mov	rax, QWORD PTR [rbx+24]
	add	r15, 16
	add	rax, 16
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	lea	rcx, QWORD PTR [rax-16]
	add	rcx, rsi
	npad	13
$LL1616@ZSTD_compr:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [r15]

; 289  :             COPY16(op, ip);

	lea	r15, QWORD PTR [r15+16]

; 243  :     memcpy(dst, src, 16);

	movups	XMMWORD PTR [rax], xmm0

; 289  :             COPY16(op, ip);

	add	rax, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rax, rcx
	jb	SHORT $LL1616@ZSTD_compr
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	SHORT $LN1603@ZSTD_compr
$LN1602@ZSTD_compr:

; 466  :         ZSTD_safecopyLiterals(seqStorePtr->lit, literals, litEnd, litLimit_w);

	mov	r9, rbp
	mov	rdx, r15
	call	ZSTD_safecopyLiterals
	mov	r9d, DWORD PTR offset$1$[rsp]
$LN1603@ZSTD_compr:

; 467  :     }
; 468  :     seqStorePtr->lit += litLength;

	add	QWORD PTR [rbx+24], rsi
	mov	rcx, QWORD PTR [rbx+8]

; 469  : 
; 470  :     /* literal Length */
; 471  :     if (litLength>0xFFFF) {

	cmp	rsi, 65535				; 0000ffffH
	jbe	SHORT $LN2578@ZSTD_compr

; 472  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 473  :         seqStorePtr->longLengthID = 1;
; 474  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [rbx+72], 1
	sub	rax, QWORD PTR [rbx]
	sar	rax, 3
	mov	DWORD PTR [rbx+76], eax
$LN2578@ZSTD_compr:

; 475  :     }
; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	WORD PTR [rcx+4], si

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	lea	ecx, DWORD PTR [r9+3]
	mov	rax, QWORD PTR [rbx+8]
	mov	DWORD PTR [rax], ecx
$LN2636@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 257  :         ip += mLength;

	mov	rcx, QWORD PTR [rbx+8]
	cmp	r14, 65535				; 0000ffffH
	jbe	SHORT $LN2579@ZSTD_compr
	mov	rax, rcx
	mov	DWORD PTR [rbx+72], 2
	sub	rax, QWORD PTR [rbx]
	sar	rax, 3
	mov	DWORD PTR [rbx+76], eax
$LN2579@ZSTD_compr:
	mov	WORD PTR [rcx+6], r14w
	add	QWORD PTR [rbx+8], 8
$_match_stored$2650:
	lea	r15, QWORD PTR [rdi+r13]
	mov	r13, r15

; 258  :         anchor = ip;

	cmp	r15, QWORD PTR ilimit$1$[rsp]

; 259  : 
; 260  :         if (ip <= ilimit) {

	ja	$LN2620@ZSTD_compr

; 261  :             /* Complementary insertion */
; 262  :             /* done after iLimit test, as candidates could be > iend-8 */
; 263  :             {   U32 const indexToInsert = current+2;

	mov	r14d, DWORD PTR current$1$[rsp]

; 264  :                 hashLong[ZSTD_hashPtr(base+indexToInsert, hBitsL, 8)] = indexToInsert;

	mov	r8d, 8
	mov	rdi, QWORD PTR base$1$[rsp]
	add	r14d, 2
	mov	edx, DWORD PTR hBitsL$1$[rsp]
	mov	ebp, r14d
	add	rbp, rdi
	mov	rcx, rbp
	call	ZSTD_hashPtr
	mov	rcx, QWORD PTR hashLong$1$[rsp]
	mov	esi, r15d

; 265  :                 hashLong[ZSTD_hashPtr(ip-2, hBitsL, 8)] = (U32)(ip-2-base);

	mov	edx, DWORD PTR hBitsL$1$[rsp]
	sub	esi, edi
	mov	r8d, 8
	mov	DWORD PTR [rcx+rax*4], r14d
	lea	rcx, QWORD PTR [r15-2]
	lea	edi, DWORD PTR [rsi-2]
	call	ZSTD_hashPtr
	mov	rcx, QWORD PTR hashLong$1$[rsp]

; 266  :                 hashSmall[ZSTD_hashPtr(base+indexToInsert, hBitsS, mls)] = indexToInsert;

	mov	r8d, 6
	mov	edx, DWORD PTR hBitsS$1$[rsp]
	mov	DWORD PTR [rcx+rax*4], edi
	mov	rcx, rbp
	call	ZSTD_hashPtr
	mov	rbp, QWORD PTR hashSmall$1$[rsp]

; 267  :                 hashSmall[ZSTD_hashPtr(ip-1, hBitsS, mls)] = (U32)(ip-1-base);

	lea	rcx, QWORD PTR [r15-1]
	mov	edx, DWORD PTR hBitsS$1$[rsp]
	lea	edi, DWORD PTR [rsi-1]
	mov	r8d, 6
	mov	DWORD PTR [rbp+rax*4], r14d
	call	ZSTD_hashPtr
	mov	r14, QWORD PTR litLimit_w$1$[rsp]
	mov	DWORD PTR [rbp+rax*4], edi
	mov	ebp, DWORD PTR offset_2$1$[rsp]
	npad	9
$LL1053@ZSTD_compr:

; 268  :             }
; 269  : 
; 270  :             /* check immediate repcode */
; 271  :             if (dictMode == ZSTD_dictMatchState) {
; 272  :                 while (ip <= ilimit) {
; 273  :                     U32 const current2 = (U32)(ip-base);
; 274  :                     U32 const repIndex2 = current2 - offset_2;
; 275  :                     const BYTE* repMatch2 = dictMode == ZSTD_dictMatchState
; 276  :                         && repIndex2 < prefixLowestIndex ?
; 277  :                             dictBase + repIndex2 - dictIndexDelta :
; 278  :                             base + repIndex2;
; 279  :                     if ( ((U32)((prefixLowestIndex-1) - (U32)repIndex2) >= 3 /* intentional overflow */)
; 280  :                        && (MEM_read32(repMatch2) == MEM_read32(ip)) ) {
; 281  :                         const BYTE* const repEnd2 = repIndex2 < prefixLowestIndex ? dictEnd : iend;
; 282  :                         size_t const repLength2 = ZSTD_count_2segments(ip+4, repMatch2+4, iend, repEnd2, prefixLowest) + 4;
; 283  :                         U32 tmpOffset = offset_2; offset_2 = offset_1; offset_1 = tmpOffset;   /* swap offset_2 <=> offset_1 */
; 284  :                         ZSTD_storeSeq(seqStore, 0, anchor, iend, 0, repLength2-MINMATCH);
; 285  :                         hashSmall[ZSTD_hashPtr(ip, hBitsS, mls)] = current2;
; 286  :                         hashLong[ZSTD_hashPtr(ip, hBitsL, 8)] = current2;
; 287  :                         ip += repLength2;
; 288  :                         anchor = ip;
; 289  :                         continue;
; 290  :                     }
; 291  :                     break;
; 292  :             }   }
; 293  : 
; 294  :             if (dictMode == ZSTD_noDict) {
; 295  :                 while ( (ip <= ilimit)
; 296  :                      && ( (offset_2>0)

	mov	eax, ebp
	mov	ecx, r12d
	mov	rdx, r13
	sub	rdx, rax
	mov	eax, DWORD PTR [rdx]
	cmp	DWORD PTR [r13], eax
	mov	eax, r12d
	sete	cl
	test	ebp, ebp
	setne	al
	test	ecx, eax
	je	$LN2624@ZSTD_compr

; 297  :                         & (MEM_read32(ip) == MEM_read32(ip - offset_2)) )) {
; 298  :                     /* store sequence */
; 299  :                     size_t const rLength = ZSTD_count(ip+4, ip+4-offset_2, iend) + 4;

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rcx, QWORD PTR [r13+4]
	add	rdx, 4
	call	ZSTD_count

; 300  :                     U32 const tmpOff = offset_2; offset_2 = offset_1; offset_1 = tmpOff;  /* swap offset_2 <=> offset_1 */
; 301  :                     hashSmall[ZSTD_hashPtr(ip, hBitsS, mls)] = (U32)(ip-base);

	mov	edx, DWORD PTR hBitsS$1$[rsp]
	mov	ecx, ebp
	mov	ebp, DWORD PTR offset_1$1$[rsp]
	mov	edi, r13d
	sub	edi, DWORD PTR base$1$[rsp]
	mov	r8d, 6
	mov	DWORD PTR offset_1$1$[rsp], ecx
	lea	rsi, QWORD PTR [rax+4]
	mov	rcx, r13
	mov	DWORD PTR offset_2$1$[rsp], ebp
	call	ZSTD_hashPtr
	mov	rcx, QWORD PTR hashSmall$1$[rsp]

; 302  :                     hashLong[ZSTD_hashPtr(ip, hBitsL, 8)] = (U32)(ip-base);

	mov	r8d, 8
	mov	edx, DWORD PTR hBitsL$1$[rsp]
	mov	DWORD PTR [rcx+rax*4], edi
	mov	rcx, r13
	call	ZSTD_hashPtr
	mov	rcx, QWORD PTR hashLong$1$[rsp]
	mov	DWORD PTR [rcx+rax*4], edi

; 303  :                     ZSTD_storeSeq(seqStore, 0, anchor, iend, 0, rLength-MINMATCH);

	lea	rdi, QWORD PTR [rsi-3]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rcx, QWORD PTR [rbx+24]

; 443  : #if defined(DEBUGLEVEL) && (DEBUGLEVEL >= 6)
; 444  :     static const BYTE* g_start = NULL;
; 445  :     if (g_start==NULL) g_start = (const BYTE*)literals;  /* note : index only works for compression within a single segment */
; 446  :     {   U32 const pos = (U32)((const BYTE*)literals - g_start);
; 447  :         DEBUGLOG(6, "Cpos%7u :%3u literals, match%4u bytes at offCode%7u",
; 448  :                pos, (U32)litLength, (U32)mlBase+MINMATCH, (U32)offCode);
; 449  :     }
; 450  : #endif
; 451  :     assert((size_t)(seqStorePtr->sequences - seqStorePtr->sequencesStart) < seqStorePtr->maxNbSeq);
; 452  :     /* copy Literals */
; 453  :     assert(seqStorePtr->maxNbLit <= 128 KB);
; 454  :     assert(seqStorePtr->lit + litLength <= seqStorePtr->litStart + seqStorePtr->maxNbLit);
; 455  :     assert(literals + litLength <= litLimit);
; 456  :     if (litEnd <= litLimit_w) {

	cmp	r15, r14
	ja	SHORT $LN1656@ZSTD_compr
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [r15]
	movups	XMMWORD PTR [rcx], xmm0
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	SHORT $LN1657@ZSTD_compr
$LN1656@ZSTD_compr:

; 466  :         ZSTD_safecopyLiterals(seqStorePtr->lit, literals, litEnd, litLimit_w);

	mov	r9, r14
	mov	r8, r15
	mov	rdx, r15
	call	ZSTD_safecopyLiterals
$LN1657@ZSTD_compr:

; 475  :     }
; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	rax, QWORD PTR [rbx+8]
	mov	WORD PTR [rax+4], r12w

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	mov	rax, QWORD PTR [rbx+8]
	mov	DWORD PTR [rax], 1
	mov	rcx, QWORD PTR [rbx+8]

; 480  : 
; 481  :     /* match Length */
; 482  :     if (mlBase>0xFFFF) {

	cmp	rdi, 65535				; 0000ffffH
	jbe	SHORT $LN2580@ZSTD_compr

; 485  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [rbx+72], 2
	sub	rax, QWORD PTR [rbx]
	sar	rax, 3
	mov	DWORD PTR [rbx+76], eax
$LN2580@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 304  :                     ip += rLength;

	add	r13, rsi
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 487  :     seqStorePtr->sequences[0].matchLength = (U16)mlBase;

	mov	WORD PTR [rcx+6], di

; 488  : 
; 489  :     seqStorePtr->sequences++;

	add	QWORD PTR [rbx+8], 8
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 304  :                     ip += rLength;

	mov	r15, r13
	cmp	r13, QWORD PTR ilimit$1$[rsp]
	jbe	$LL1053@ZSTD_compr

; 305  :                     anchor = ip;
; 306  :                     continue;   /* faster when present ... (?) */
; 307  :         }   }   }
; 308  :     }   /* while (ip < ilimit) */

	jmp	SHORT $LN2624@ZSTD_compr
$LN1069@ZSTD_compr:
	mov	ebp, DWORD PTR offset_2$1$[rsp]

; 188  :                 goto _search_next_long;
; 189  :             }
; 190  :         } else if (dictMode == ZSTD_dictMatchState) {
; 191  :             /* check dictMatchState short match */
; 192  :             U32 const dictMatchIndexS = dictHashSmall[dictHS];
; 193  :             match = dictBase + dictMatchIndexS;
; 194  :             matchIndexS = dictMatchIndexS + dictIndexDelta;
; 195  : 
; 196  :             if (match > dictStart && MEM_read32(match) == MEM_read32(ip)) {
; 197  :                 goto _search_next_long;
; 198  :         }   }
; 199  : 
; 200  :         ip += ((ip-anchor) >> kSearchStrength) + 1;

	mov	rax, r13
	sub	rax, r15
	inc	r13
	sar	rax, 8
	add	r13, rax

; 259  : 
; 260  :         if (ip <= ilimit) {

	jmp	SHORT $LN2532@ZSTD_compr
$LN2620@ZSTD_compr:
	mov	ebp, DWORD PTR offset_2$1$[rsp]
$LN2624@ZSTD_compr:

; 125  :     while (ip < ilimit) {   /* < instead of <=, because repcode check at (ip+1) */

	mov	r10d, DWORD PTR offset_1$1$[rsp]
$LN2532@ZSTD_compr:
	mov	r14d, DWORD PTR hBitsL$1$[rsp]
	cmp	r13, QWORD PTR ilimit$1$[rsp]
	jb	$LL1037@ZSTD_compr

; 329  :     case 5 :
; 330  :         return ZSTD_compressBlock_doubleFast_generic(ms, seqStore, rep, src, srcSize, 5, ZSTD_noDict);
; 331  :     case 6 :
; 332  :         return ZSTD_compressBlock_doubleFast_generic(ms, seqStore, rep, src, srcSize, 6, ZSTD_noDict);

	mov	ecx, DWORD PTR tv11781[rsp]
	jmp	$LN2633@ZSTD_compr
$LN5@ZSTD_compr:

; 59   :     U32* const hashSmall = ms->chainTable;

	mov	rax, QWORD PTR [rdx+64]

; 61   :     const BYTE* const base = ms->window.base;
; 62   :     const BYTE* const istart = (const BYTE*)src;
; 63   :     const BYTE* ip = istart;
; 64   :     const BYTE* anchor = istart;
; 65   :     const U32 endIndex = (U32)((size_t)(istart - base) + srcSize);

	sub	r8d, ebp
	add	r8d, ecx
	mov	QWORD PTR hashSmall$1$[rsp], rax
	mov	eax, DWORD PTR [rdx+188]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 991  :     U32    const maxDistance = 1U << windowLog;

	mov	ecx, DWORD PTR [rdx+184]
	shl	r10d, cl
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 60   :     const U32 hBitsS = cParams->chainLog;

	mov	DWORD PTR hBitsS$1$[rsp], eax
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 993  :     U32    const withinWindow = (current - lowestValid > maxDistance) ? current - maxDistance : lowestValid;

	mov	eax, r8d
	sub	eax, edi
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 58   :     const U32 hBitsL = cParams->hashLog;

	mov	DWORD PTR hBitsL$1$[rsp], r14d
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	sub	r8d, r10d
	cmp	eax, r10d
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 70   :     const BYTE* const ilimit = iend - HASH_READ_SIZE;

	lea	rax, QWORD PTR [rsi-8]
	mov	QWORD PTR ilimit$1$[rsp], rax
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	cmovbe	r8d, edi
	test	r9d, r9d

; 995  :     U32    const matchLowest = isDictionary ? lowestValid : withinWindow;

	cmovne	r8d, edi
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 68   :     const BYTE* const prefixLowest = base + prefixLowestIndex;

	mov	ecx, r8d
	add	rcx, rbp
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 995  :     U32    const matchLowest = isDictionary ? lowestValid : withinWindow;

	mov	DWORD PTR prefixLowestIndex$1$[rsp], r8d
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 71   :     U32 offset_1=rep[0], offset_2=rep[1];

	mov	r8d, DWORD PTR [r12+4]

; 72   :     U32 offsetSaved = 0;
; 73   : 
; 74   :     const ZSTD_matchState_t* const dms = ms->dictMatchState;
; 75   :     const ZSTD_compressionParameters* const dictCParams =
; 76   :                                      dictMode == ZSTD_dictMatchState ?
; 77   :                                      &dms->cParams : NULL;
; 78   :     const U32* const dictHashLong  = dictMode == ZSTD_dictMatchState ?
; 79   :                                      dms->hashTable : NULL;
; 80   :     const U32* const dictHashSmall = dictMode == ZSTD_dictMatchState ?
; 81   :                                      dms->chainTable : NULL;
; 82   :     const U32 dictStartIndex       = dictMode == ZSTD_dictMatchState ?
; 83   :                                      dms->window.dictLimit : 0;
; 84   :     const BYTE* const dictBase     = dictMode == ZSTD_dictMatchState ?
; 85   :                                      dms->window.base : NULL;
; 86   :     const BYTE* const dictStart    = dictMode == ZSTD_dictMatchState ?
; 87   :                                      dictBase + dictStartIndex : NULL;
; 88   :     const BYTE* const dictEnd      = dictMode == ZSTD_dictMatchState ?
; 89   :                                      dms->window.nextSrc : NULL;
; 90   :     const U32 dictIndexDelta       = dictMode == ZSTD_dictMatchState ?
; 91   :                                      prefixLowestIndex - (U32)(dictEnd - dictBase) :
; 92   :                                      0;
; 93   :     const U32 dictHBitsL           = dictMode == ZSTD_dictMatchState ?
; 94   :                                      dictCParams->hashLog : hBitsL;
; 95   :     const U32 dictHBitsS           = dictMode == ZSTD_dictMatchState ?
; 96   :                                      dictCParams->chainLog : hBitsS;
; 97   :     const U32 dictAndPrefixLength  = (U32)((ip - prefixLowest) + (dictEnd - dictStart));
; 98   : 
; 99   :     DEBUGLOG(5, "ZSTD_compressBlock_doubleFast_generic");
; 100  : 
; 101  :     assert(dictMode == ZSTD_noDict || dictMode == ZSTD_dictMatchState);
; 102  : 
; 103  :     /* if a dictionary is attached, it must be within window range */
; 104  :     if (dictMode == ZSTD_dictMatchState) {
; 105  :         assert(ms->window.dictLimit + (1U << cParams->windowLog) >= endIndex);
; 106  :     }
; 107  : 
; 108  :     /* init */
; 109  :     ip += (dictAndPrefixLength == 0);

	xor	r12d, r12d
	cmp	r15d, ecx
	mov	QWORD PTR prefixLowest$1$[rsp], rcx
	mov	eax, r12d
	sete	al
	lea	r13, QWORD PTR [rax+r15]

; 110  :     if (dictMode == ZSTD_noDict) {
; 111  :         U32 const current = (U32)(ip - base);

	mov	edx, r13d
	sub	edx, ebp

; 114  :         if (offset_2 > maxRep) offsetSaved = offset_2, offset_2 = 0;
; 115  :         if (offset_1 > maxRep) offsetSaved = offset_1, offset_1 = 0;

	mov	ebp, r12d
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 993  :     U32    const withinWindow = (current - lowestValid > maxDistance) ? current - maxDistance : lowestValid;

	mov	eax, edx

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	mov	ecx, edx
	sub	ecx, r10d
	sub	eax, edi
	cmp	eax, r10d
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 125  :     while (ip < ilimit) {   /* < instead of <=, because repcode check at (ip+1) */

	mov	r10d, r12d
	lea	rax, QWORD PTR [rsi-8]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	cmovbe	ecx, edi
	test	r9d, r9d

; 995  :     U32    const matchLowest = isDictionary ? lowestValid : withinWindow;

	cmovne	ecx, edi
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 113  :         U32 const maxRep = current - windowLow;

	sub	edx, ecx

; 125  :     while (ip < ilimit) {   /* < instead of <=, because repcode check at (ip+1) */

	mov	ecx, r11d
	cmp	r8d, edx
	cmovbe	ebp, r8d
	cmovbe	r8d, r12d
	cmp	r11d, edx
	cmovbe	ecx, r8d
	cmovbe	r10d, r11d
	mov	DWORD PTR tv11909[rsp], ecx
	cmp	r13, rax
	jae	$LN485@ZSTD_compr
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 485  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	DWORD PTR offset_2$1$[rsp], ebp
	mov	DWORD PTR offset_1$1$[rsp], r10d
	npad	5
$LL484@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 128  :         size_t const h2 = ZSTD_hashPtr(ip, hBitsL, 8);

	mov	r8d, 8
	mov	edx, r14d
	mov	rcx, r13
	call	ZSTD_hashPtr

; 129  :         size_t const h = ZSTD_hashPtr(ip, hBitsS, mls);

	mov	edx, DWORD PTR hBitsS$1$[rsp]
	mov	r8d, 5
	mov	rcx, r13
	mov	rsi, rax
	call	ZSTD_hashPtr

; 130  :         size_t const dictHL = ZSTD_hashPtr(ip, dictHBitsL, 8);

	mov	r8d, 8
	mov	edx, r14d
	mov	rcx, r13
	mov	rdi, rax
	call	ZSTD_hashPtr

; 131  :         size_t const dictHS = ZSTD_hashPtr(ip, dictHBitsS, mls);

	mov	edx, DWORD PTR hBitsS$1$[rsp]
	mov	r8d, 5
	mov	rcx, r13
	call	ZSTD_hashPtr

; 132  :         U32 const current = (U32)(ip-base);

	mov	rdx, QWORD PTR base$1$[rsp]
	mov	ecx, r13d

; 133  :         U32 const matchIndexL = hashLong[h2];
; 134  :         U32 matchIndexS = hashSmall[h];

	mov	r10, QWORD PTR hashSmall$1$[rsp]
	sub	ecx, edx
	mov	r11, QWORD PTR hashLong$1$[rsp]
	mov	DWORD PTR current$1$[rsp], ecx
	mov	r9d, DWORD PTR [r10+rdi*4]
	mov	r8d, DWORD PTR [r11+rsi*4]

; 135  :         const BYTE* matchLong = base + matchIndexL;
; 136  :         const BYTE* match = base + matchIndexS;
; 137  :         const U32 repIndex = current + 1 - offset_1;
; 138  :         const BYTE* repMatch = (dictMode == ZSTD_dictMatchState
; 139  :                             && repIndex < prefixLowestIndex) ?
; 140  :                                dictBase + (repIndex - dictIndexDelta) :
; 141  :                                base + repIndex;
; 142  :         hashLong[h2] = hashSmall[h] = current;   /* update hash tables */

	mov	DWORD PTR [r10+rdi*4], ecx

; 143  : 
; 144  :         /* check dictMatchState repcode */
; 145  :         if (dictMode == ZSTD_dictMatchState
; 146  :             && ((U32)((prefixLowestIndex-1) - repIndex) >= 3 /* intentional underflow */)
; 147  :             && (MEM_read32(repMatch) == MEM_read32(ip+1)) ) {
; 148  :             const BYTE* repMatchEnd = repIndex < prefixLowestIndex ? dictEnd : iend;
; 149  :             mLength = ZSTD_count_2segments(ip+1+4, repMatch+4, iend, repMatchEnd, prefixLowest) + 4;
; 150  :             ip++;
; 151  :             ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, 0, mLength-MINMATCH);
; 152  :             goto _match_stored;
; 153  :         }
; 154  : 
; 155  :         /* check noDict repcode */
; 156  :         if ( dictMode == ZSTD_noDict
; 157  :           && ((offset_1 > 0) & (MEM_read32(ip+1-offset_1) == MEM_read32(ip+1)))) {

	mov	r10d, DWORD PTR offset_1$1$[rsp]
	mov	DWORD PTR [r11+rsi*4], ecx
	lea	rbp, QWORD PTR [rdx+r9]
	mov	eax, DWORD PTR [r13+1]
	lea	r14, QWORD PTR [rdx+r8]
	lea	rsi, QWORD PTR [r13+1]
	mov	ecx, r12d
	mov	rdx, r13
	mov	QWORD PTR litLength$1$[rsp], rsi
	sub	rdx, r10
	cmp	DWORD PTR [rdx+1], eax
	mov	eax, r12d
	sete	cl
	test	r10d, r10d
	setne	al
	test	ecx, eax
	je	$LN508@ZSTD_compr

; 158  :             mLength = ZSTD_count(ip+1+4, ip+1+4-offset_1, iend) + 4;

	mov	rbp, QWORD PTR iend$1$[rsp]
	lea	rcx, QWORD PTR [r13+5]
	mov	r8, rbp
	add	rdx, 5
	call	ZSTD_count
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rcx, QWORD PTR [rbx+24]
	add	rbp, -32				; ffffffffffffffe0H
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 159  :             ip++;

	mov	r13, rsi
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	mov	QWORD PTR litLimit_w$1$[rsp], rbp
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 160  :             ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, 0, mLength-MINMATCH);

	sub	rsi, r15
	lea	rdi, QWORD PTR [rax+4]
	lea	r14, QWORD PTR [rdi-3]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	lea	r8, QWORD PTR [rsi+r15]

; 443  : #if defined(DEBUGLEVEL) && (DEBUGLEVEL >= 6)
; 444  :     static const BYTE* g_start = NULL;
; 445  :     if (g_start==NULL) g_start = (const BYTE*)literals;  /* note : index only works for compression within a single segment */
; 446  :     {   U32 const pos = (U32)((const BYTE*)literals - g_start);
; 447  :         DEBUGLOG(6, "Cpos%7u :%3u literals, match%4u bytes at offCode%7u",
; 448  :                pos, (U32)litLength, (U32)mlBase+MINMATCH, (U32)offCode);
; 449  :     }
; 450  : #endif
; 451  :     assert((size_t)(seqStorePtr->sequences - seqStorePtr->sequencesStart) < seqStorePtr->maxNbSeq);
; 452  :     /* copy Literals */
; 453  :     assert(seqStorePtr->maxNbLit <= 128 KB);
; 454  :     assert(seqStorePtr->lit + litLength <= seqStorePtr->litStart + seqStorePtr->maxNbLit);
; 455  :     assert(literals + litLength <= litLimit);
; 456  :     if (litEnd <= litLimit_w) {

	cmp	r8, rbp
	ja	SHORT $LN913@ZSTD_compr
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [r15]
	movups	XMMWORD PTR [rcx], xmm0
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 462  :         if (litLength > 16) {

	cmp	rsi, 16
	jbe	SHORT $LN914@ZSTD_compr

; 463  :             ZSTD_wildcopy(seqStorePtr->lit+16, literals+16, (ptrdiff_t)litLength-16, ZSTD_no_overlap);

	mov	rax, QWORD PTR [rbx+24]
	add	r15, 16
	add	rax, 16
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	lea	rcx, QWORD PTR [rax-16]
	add	rcx, rsi
	npad	6
$LL927@ZSTD_compr:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [r15]

; 289  :             COPY16(op, ip);

	lea	r15, QWORD PTR [r15+16]

; 243  :     memcpy(dst, src, 16);

	movups	XMMWORD PTR [rax], xmm0

; 289  :             COPY16(op, ip);

	add	rax, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rax, rcx
	jb	SHORT $LL927@ZSTD_compr
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	SHORT $LN914@ZSTD_compr
$LN913@ZSTD_compr:

; 466  :         ZSTD_safecopyLiterals(seqStorePtr->lit, literals, litEnd, litLimit_w);

	mov	r9, rbp
	mov	rdx, r15
	call	ZSTD_safecopyLiterals
$LN914@ZSTD_compr:

; 467  :     }
; 468  :     seqStorePtr->lit += litLength;

	add	QWORD PTR [rbx+24], rsi
	mov	rcx, QWORD PTR [rbx+8]

; 469  : 
; 470  :     /* literal Length */
; 471  :     if (litLength>0xFFFF) {

	cmp	rsi, 65535				; 0000ffffH
	jbe	SHORT $LN2581@ZSTD_compr

; 472  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 473  :         seqStorePtr->longLengthID = 1;
; 474  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [rbx+72], 1
	sub	rax, QWORD PTR [rbx]
	sar	rax, 3
	mov	DWORD PTR [rbx+76], eax
$LN2581@ZSTD_compr:

; 475  :     }
; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	WORD PTR [rcx+4], si

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	mov	rax, QWORD PTR [rbx+8]
	mov	DWORD PTR [rax], 1
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 161  :             goto _match_stored;

	jmp	$LN2639@ZSTD_compr
$LN508@ZSTD_compr:

; 162  :         }
; 163  : 
; 164  :         if (matchIndexL > prefixLowestIndex) {

	mov	ecx, DWORD PTR prefixLowestIndex$1$[rsp]
	cmp	r8d, ecx
	jbe	$LN511@ZSTD_compr

; 165  :             /* check prefix long match */
; 166  :             if (MEM_read64(matchLong) == MEM_read64(ip)) {

	mov	rax, QWORD PTR [r13]
	cmp	QWORD PTR [r14], rax
	jne	SHORT $LN511@ZSTD_compr

; 167  :                 mLength = ZSTD_count(ip+8, matchLong+8, iend) + 8;

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rdx, QWORD PTR [r14+8]
	lea	rcx, QWORD PTR [r13+8]
	call	ZSTD_count

; 168  :                 offset = (U32)(ip-matchLong);
; 169  :                 while (((ip>anchor) & (matchLong>prefixLowest)) && (ip[-1] == matchLong[-1])) { ip--; matchLong--; mLength++; } /* catch up */

	mov	r8, QWORD PTR prefixLowest$1$[rsp]
	mov	ecx, r12d
	mov	r9d, r13d
	sub	r9d, r14d
	cmp	r14, r8
	mov	DWORD PTR offset$1$[rsp], r9d
	lea	rdi, QWORD PTR [rax+8]
	mov	eax, r12d
	seta	cl
	cmp	r13, r15
	seta	al
	test	ecx, eax
	je	$_match_found$2651
	npad	1
$LL486@ZSTD_compr:
	movzx	eax, BYTE PTR [r14-1]
	lea	rdx, QWORD PTR [r13-1]
	dec	r14
	cmp	BYTE PTR [rdx], al
	jne	$_match_found$2651
	inc	rdi
	mov	ecx, r12d
	cmp	r14, r8
	mov	eax, r12d
	mov	r13, rdx
	seta	cl
	cmp	rdx, r15
	seta	al
	test	ecx, eax
	jne	SHORT $LL486@ZSTD_compr

; 170  :                 goto _match_found;

	jmp	$_match_found$2651
$LN511@ZSTD_compr:

; 171  :             }
; 172  :         } else if (dictMode == ZSTD_dictMatchState) {
; 173  :             /* check dictMatchState long match */
; 174  :             U32 const dictMatchIndexL = dictHashLong[dictHL];
; 175  :             const BYTE* dictMatchL = dictBase + dictMatchIndexL;
; 176  :             assert(dictMatchL < dictEnd);
; 177  : 
; 178  :             if (dictMatchL > dictStart && MEM_read64(dictMatchL) == MEM_read64(ip)) {
; 179  :                 mLength = ZSTD_count_2segments(ip+8, dictMatchL+8, iend, dictEnd, prefixLowest) + 8;
; 180  :                 offset = (U32)(current - dictMatchIndexL - dictIndexDelta);
; 181  :                 while (((ip>anchor) & (dictMatchL>dictStart)) && (ip[-1] == dictMatchL[-1])) { ip--; dictMatchL--; mLength++; } /* catch up */
; 182  :                 goto _match_found;
; 183  :         }   }
; 184  : 
; 185  :         if (matchIndexS > prefixLowestIndex) {

	cmp	r9d, ecx
	jbe	$LN516@ZSTD_compr

; 186  :             /* check prefix short match */
; 187  :             if (MEM_read32(match) == MEM_read32(ip)) {

	mov	eax, DWORD PTR [r13]
	cmp	DWORD PTR [rbp], eax
	jne	$LN516@ZSTD_compr
$_search_next_long$2652:

; 201  : #if defined(__aarch64__)
; 202  :         PREFETCH_L1(ip+256);
; 203  : #endif
; 204  :         continue;
; 205  : 
; 206  : _search_next_long:
; 207  : 
; 208  :         {   size_t const hl3 = ZSTD_hashPtr(ip+1, hBitsL, 8);

	mov	edx, DWORD PTR hBitsL$1$[rsp]
	mov	r8d, 8
	mov	rcx, rsi
	call	ZSTD_hashPtr

; 209  :             size_t const dictHLNext = ZSTD_hashPtr(ip+1, dictHBitsL, 8);

	mov	edx, DWORD PTR hBitsL$1$[rsp]
	mov	r8d, 8
	mov	rcx, rsi
	mov	rdi, rax
	call	ZSTD_hashPtr

; 210  :             U32 const matchIndexL3 = hashLong[hl3];

	mov	r8, QWORD PTR hashLong$1$[rsp]

; 211  :             const BYTE* matchL3 = base + matchIndexL3;
; 212  :             hashLong[hl3] = current + 1;

	mov	eax, DWORD PTR current$1$[rsp]
	mov	ecx, DWORD PTR [r8+rdi*4]
	mov	esi, ecx
	add	rsi, QWORD PTR base$1$[rsp]
	inc	eax
	mov	DWORD PTR [r8+rdi*4], eax

; 213  : 
; 214  :             /* check prefix long +1 match */
; 215  :             if (matchIndexL3 > prefixLowestIndex) {

	cmp	ecx, DWORD PTR prefixLowestIndex$1$[rsp]
	jbe	$LN521@ZSTD_compr

; 216  :                 if (MEM_read64(matchL3) == MEM_read64(ip+1)) {

	mov	r14, QWORD PTR litLength$1$[rsp]
	mov	rax, QWORD PTR [r14]
	cmp	QWORD PTR [rsi], rax
	jne	$LN521@ZSTD_compr

; 217  :                     mLength = ZSTD_count(ip+9, matchL3+8, iend) + 8;

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rdx, QWORD PTR [rsi+8]
	lea	rcx, QWORD PTR [r13+9]
	call	ZSTD_count

; 218  :                     ip++;
; 219  :                     offset = (U32)(ip-matchL3);
; 220  :                     while (((ip>anchor) & (matchL3>prefixLowest)) && (ip[-1] == matchL3[-1])) { ip--; matchL3--; mLength++; } /* catch up */

	mov	r8, QWORD PTR prefixLowest$1$[rsp]
	mov	ecx, r12d
	mov	r9d, r14d
	mov	r13, r14
	sub	r9d, esi
	cmp	rsi, r8
	mov	DWORD PTR offset$1$[rsp], r9d
	lea	rdi, QWORD PTR [rax+8]
	mov	eax, r12d
	seta	cl
	cmp	r14, r15
	seta	al
	test	ecx, eax
	je	$_match_found$2651
	npad	6
$LL490@ZSTD_compr:
	movzx	eax, BYTE PTR [rsi-1]
	lea	rdx, QWORD PTR [r13-1]
	dec	rsi
	cmp	BYTE PTR [rdx], al
	jne	$_match_found$2651
	inc	rdi
	mov	ecx, r12d
	cmp	rsi, r8
	mov	eax, r12d
	mov	r13, rdx
	seta	cl
	cmp	rdx, r15
	seta	al
	test	ecx, eax
	jne	SHORT $LL490@ZSTD_compr

; 221  :                     goto _match_found;

	jmp	SHORT $_match_found$2651
$LN521@ZSTD_compr:

; 222  :                 }
; 223  :             } else if (dictMode == ZSTD_dictMatchState) {
; 224  :                 /* check dict long +1 match */
; 225  :                 U32 const dictMatchIndexL3 = dictHashLong[dictHLNext];
; 226  :                 const BYTE* dictMatchL3 = dictBase + dictMatchIndexL3;
; 227  :                 assert(dictMatchL3 < dictEnd);
; 228  :                 if (dictMatchL3 > dictStart && MEM_read64(dictMatchL3) == MEM_read64(ip+1)) {
; 229  :                     mLength = ZSTD_count_2segments(ip+1+8, dictMatchL3+8, iend, dictEnd, prefixLowest) + 8;
; 230  :                     ip++;
; 231  :                     offset = (U32)(current + 1 - dictMatchIndexL3 - dictIndexDelta);
; 232  :                     while (((ip>anchor) & (dictMatchL3>dictStart)) && (ip[-1] == dictMatchL3[-1])) { ip--; dictMatchL3--; mLength++; } /* catch up */
; 233  :                     goto _match_found;
; 234  :         }   }   }
; 235  : 
; 236  :         /* if no long +1 match, explore the short match we found */
; 237  :         if (dictMode == ZSTD_dictMatchState && matchIndexS < prefixLowestIndex) {
; 238  :             mLength = ZSTD_count_2segments(ip+4, match+4, iend, dictEnd, prefixLowest) + 4;
; 239  :             offset = (U32)(current - matchIndexS);
; 240  :             while (((ip>anchor) & (match>dictStart)) && (ip[-1] == match[-1])) { ip--; match--; mLength++; } /* catch up */
; 241  :         } else {
; 242  :             mLength = ZSTD_count(ip+4, match+4, iend) + 4;

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rdx, QWORD PTR [rbp+4]
	lea	rcx, QWORD PTR [r13+4]
	call	ZSTD_count

; 243  :             offset = (U32)(ip - match);
; 244  :             while (((ip>anchor) & (match>prefixLowest)) && (ip[-1] == match[-1])) { ip--; match--; mLength++; } /* catch up */

	mov	r8, QWORD PTR prefixLowest$1$[rsp]
	mov	ecx, r12d
	mov	r9d, r13d
	sub	r9d, ebp
	cmp	rbp, r8
	mov	DWORD PTR offset$1$[rsp], r9d
	lea	rdi, QWORD PTR [rax+4]
	mov	eax, r12d
	seta	cl
	cmp	r13, r15
	seta	al
	test	ecx, eax
	je	SHORT $_match_found$2651
	npad	3
$LL496@ZSTD_compr:
	movzx	eax, BYTE PTR [rbp-1]
	lea	rdx, QWORD PTR [r13-1]
	dec	rbp
	cmp	BYTE PTR [rdx], al
	jne	SHORT $_match_found$2651
	inc	rdi
	mov	ecx, r12d
	cmp	rbp, r8
	mov	eax, r12d
	mov	r13, rdx
	seta	cl
	cmp	rdx, r15
	seta	al
	test	ecx, eax
	jne	SHORT $LL496@ZSTD_compr
$_match_found$2651:

; 245  :         }
; 246  : 
; 247  :         /* fall-through */
; 248  : 
; 249  : _match_found:
; 250  :         offset_2 = offset_1;

	mov	ebp, DWORD PTR offset_1$1$[rsp]

; 253  :         ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, offset + ZSTD_REP_MOVE, mLength-MINMATCH);

	lea	r14, QWORD PTR [rdi-3]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rcx, QWORD PTR [rbx+24]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 253  :         ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, offset + ZSTD_REP_MOVE, mLength-MINMATCH);

	mov	rsi, r13
	sub	rsi, r15
	mov	DWORD PTR offset_2$1$[rsp], ebp
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	mov	rbp, QWORD PTR iend$1$[rsp]
	add	rbp, -32				; ffffffffffffffe0H
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 251  :         offset_1 = offset;

	mov	DWORD PTR offset_1$1$[rsp], r9d
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	mov	QWORD PTR litLimit_w$1$[rsp], rbp

; 442  :     BYTE const* const litEnd = literals + litLength;

	lea	r8, QWORD PTR [r15+rsi]

; 443  : #if defined(DEBUGLEVEL) && (DEBUGLEVEL >= 6)
; 444  :     static const BYTE* g_start = NULL;
; 445  :     if (g_start==NULL) g_start = (const BYTE*)literals;  /* note : index only works for compression within a single segment */
; 446  :     {   U32 const pos = (U32)((const BYTE*)literals - g_start);
; 447  :         DEBUGLOG(6, "Cpos%7u :%3u literals, match%4u bytes at offCode%7u",
; 448  :                pos, (U32)litLength, (U32)mlBase+MINMATCH, (U32)offCode);
; 449  :     }
; 450  : #endif
; 451  :     assert((size_t)(seqStorePtr->sequences - seqStorePtr->sequencesStart) < seqStorePtr->maxNbSeq);
; 452  :     /* copy Literals */
; 453  :     assert(seqStorePtr->maxNbLit <= 128 KB);
; 454  :     assert(seqStorePtr->lit + litLength <= seqStorePtr->litStart + seqStorePtr->maxNbLit);
; 455  :     assert(literals + litLength <= litLimit);
; 456  :     if (litEnd <= litLimit_w) {

	cmp	r8, rbp
	ja	SHORT $LN960@ZSTD_compr
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [r15]
	movups	XMMWORD PTR [rcx], xmm0
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 462  :         if (litLength > 16) {

	cmp	rsi, 16
	jbe	SHORT $LN961@ZSTD_compr

; 463  :             ZSTD_wildcopy(seqStorePtr->lit+16, literals+16, (ptrdiff_t)litLength-16, ZSTD_no_overlap);

	mov	rax, QWORD PTR [rbx+24]
	add	r15, 16
	add	rax, 16
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	lea	rcx, QWORD PTR [rax-16]
	add	rcx, rsi
	npad	13
$LL974@ZSTD_compr:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [r15]

; 289  :             COPY16(op, ip);

	lea	r15, QWORD PTR [r15+16]

; 243  :     memcpy(dst, src, 16);

	movups	XMMWORD PTR [rax], xmm0

; 289  :             COPY16(op, ip);

	add	rax, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rax, rcx
	jb	SHORT $LL974@ZSTD_compr
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	SHORT $LN961@ZSTD_compr
$LN960@ZSTD_compr:

; 466  :         ZSTD_safecopyLiterals(seqStorePtr->lit, literals, litEnd, litLimit_w);

	mov	r9, rbp
	mov	rdx, r15
	call	ZSTD_safecopyLiterals
	mov	r9d, DWORD PTR offset$1$[rsp]
$LN961@ZSTD_compr:

; 467  :     }
; 468  :     seqStorePtr->lit += litLength;

	add	QWORD PTR [rbx+24], rsi
	mov	rcx, QWORD PTR [rbx+8]

; 469  : 
; 470  :     /* literal Length */
; 471  :     if (litLength>0xFFFF) {

	cmp	rsi, 65535				; 0000ffffH
	jbe	SHORT $LN2583@ZSTD_compr

; 472  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 473  :         seqStorePtr->longLengthID = 1;
; 474  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [rbx+72], 1
	sub	rax, QWORD PTR [rbx]
	sar	rax, 3
	mov	DWORD PTR [rbx+76], eax
$LN2583@ZSTD_compr:

; 475  :     }
; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	WORD PTR [rcx+4], si

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	lea	ecx, DWORD PTR [r9+3]
	mov	rax, QWORD PTR [rbx+8]
	mov	DWORD PTR [rax], ecx
$LN2639@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 257  :         ip += mLength;

	mov	rcx, QWORD PTR [rbx+8]
	cmp	r14, 65535				; 0000ffffH
	jbe	SHORT $LN2584@ZSTD_compr
	mov	rax, rcx
	mov	DWORD PTR [rbx+72], 2
	sub	rax, QWORD PTR [rbx]
	sar	rax, 3
	mov	DWORD PTR [rbx+76], eax
$LN2584@ZSTD_compr:
	mov	WORD PTR [rcx+6], r14w
	add	QWORD PTR [rbx+8], 8
$_match_stored$2653:
	lea	r15, QWORD PTR [rdi+r13]
	mov	r13, r15

; 258  :         anchor = ip;

	cmp	r15, QWORD PTR ilimit$1$[rsp]

; 259  : 
; 260  :         if (ip <= ilimit) {

	ja	$LN2621@ZSTD_compr

; 261  :             /* Complementary insertion */
; 262  :             /* done after iLimit test, as candidates could be > iend-8 */
; 263  :             {   U32 const indexToInsert = current+2;

	mov	r14d, DWORD PTR current$1$[rsp]

; 264  :                 hashLong[ZSTD_hashPtr(base+indexToInsert, hBitsL, 8)] = indexToInsert;

	mov	r8d, 8
	mov	rdi, QWORD PTR base$1$[rsp]
	add	r14d, 2
	mov	edx, DWORD PTR hBitsL$1$[rsp]
	mov	ebp, r14d
	add	rbp, rdi
	mov	rcx, rbp
	call	ZSTD_hashPtr
	mov	rcx, QWORD PTR hashLong$1$[rsp]
	mov	esi, r15d

; 265  :                 hashLong[ZSTD_hashPtr(ip-2, hBitsL, 8)] = (U32)(ip-2-base);

	mov	edx, DWORD PTR hBitsL$1$[rsp]
	sub	esi, edi
	mov	r8d, 8
	mov	DWORD PTR [rcx+rax*4], r14d
	lea	rcx, QWORD PTR [r15-2]
	lea	edi, DWORD PTR [rsi-2]
	call	ZSTD_hashPtr
	mov	rcx, QWORD PTR hashLong$1$[rsp]

; 266  :                 hashSmall[ZSTD_hashPtr(base+indexToInsert, hBitsS, mls)] = indexToInsert;

	mov	r8d, 5
	mov	edx, DWORD PTR hBitsS$1$[rsp]
	mov	DWORD PTR [rcx+rax*4], edi
	mov	rcx, rbp
	call	ZSTD_hashPtr
	mov	rbp, QWORD PTR hashSmall$1$[rsp]

; 267  :                 hashSmall[ZSTD_hashPtr(ip-1, hBitsS, mls)] = (U32)(ip-1-base);

	lea	rcx, QWORD PTR [r15-1]
	mov	edx, DWORD PTR hBitsS$1$[rsp]
	lea	edi, DWORD PTR [rsi-1]
	mov	r8d, 5
	mov	DWORD PTR [rbp+rax*4], r14d
	call	ZSTD_hashPtr
	mov	r14, QWORD PTR litLimit_w$1$[rsp]
	mov	DWORD PTR [rbp+rax*4], edi
	mov	ebp, DWORD PTR offset_2$1$[rsp]
	npad	9
$LL500@ZSTD_compr:

; 268  :             }
; 269  : 
; 270  :             /* check immediate repcode */
; 271  :             if (dictMode == ZSTD_dictMatchState) {
; 272  :                 while (ip <= ilimit) {
; 273  :                     U32 const current2 = (U32)(ip-base);
; 274  :                     U32 const repIndex2 = current2 - offset_2;
; 275  :                     const BYTE* repMatch2 = dictMode == ZSTD_dictMatchState
; 276  :                         && repIndex2 < prefixLowestIndex ?
; 277  :                             dictBase + repIndex2 - dictIndexDelta :
; 278  :                             base + repIndex2;
; 279  :                     if ( ((U32)((prefixLowestIndex-1) - (U32)repIndex2) >= 3 /* intentional overflow */)
; 280  :                        && (MEM_read32(repMatch2) == MEM_read32(ip)) ) {
; 281  :                         const BYTE* const repEnd2 = repIndex2 < prefixLowestIndex ? dictEnd : iend;
; 282  :                         size_t const repLength2 = ZSTD_count_2segments(ip+4, repMatch2+4, iend, repEnd2, prefixLowest) + 4;
; 283  :                         U32 tmpOffset = offset_2; offset_2 = offset_1; offset_1 = tmpOffset;   /* swap offset_2 <=> offset_1 */
; 284  :                         ZSTD_storeSeq(seqStore, 0, anchor, iend, 0, repLength2-MINMATCH);
; 285  :                         hashSmall[ZSTD_hashPtr(ip, hBitsS, mls)] = current2;
; 286  :                         hashLong[ZSTD_hashPtr(ip, hBitsL, 8)] = current2;
; 287  :                         ip += repLength2;
; 288  :                         anchor = ip;
; 289  :                         continue;
; 290  :                     }
; 291  :                     break;
; 292  :             }   }
; 293  : 
; 294  :             if (dictMode == ZSTD_noDict) {
; 295  :                 while ( (ip <= ilimit)
; 296  :                      && ( (offset_2>0)

	mov	eax, ebp
	mov	ecx, r12d
	mov	rdx, r13
	sub	rdx, rax
	mov	eax, DWORD PTR [rdx]
	cmp	DWORD PTR [r13], eax
	mov	eax, r12d
	sete	cl
	test	ebp, ebp
	setne	al
	test	ecx, eax
	je	$LN2625@ZSTD_compr

; 297  :                         & (MEM_read32(ip) == MEM_read32(ip - offset_2)) )) {
; 298  :                     /* store sequence */
; 299  :                     size_t const rLength = ZSTD_count(ip+4, ip+4-offset_2, iend) + 4;

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rcx, QWORD PTR [r13+4]
	add	rdx, 4
	call	ZSTD_count

; 300  :                     U32 const tmpOff = offset_2; offset_2 = offset_1; offset_1 = tmpOff;  /* swap offset_2 <=> offset_1 */
; 301  :                     hashSmall[ZSTD_hashPtr(ip, hBitsS, mls)] = (U32)(ip-base);

	mov	edx, DWORD PTR hBitsS$1$[rsp]
	mov	ecx, ebp
	mov	ebp, DWORD PTR offset_1$1$[rsp]
	mov	edi, r13d
	sub	edi, DWORD PTR base$1$[rsp]
	mov	r8d, 5
	mov	DWORD PTR offset_1$1$[rsp], ecx
	lea	rsi, QWORD PTR [rax+4]
	mov	rcx, r13
	mov	DWORD PTR offset_2$1$[rsp], ebp
	call	ZSTD_hashPtr
	mov	rcx, QWORD PTR hashSmall$1$[rsp]

; 302  :                     hashLong[ZSTD_hashPtr(ip, hBitsL, 8)] = (U32)(ip-base);

	mov	r8d, 8
	mov	edx, DWORD PTR hBitsL$1$[rsp]
	mov	DWORD PTR [rcx+rax*4], edi
	mov	rcx, r13
	call	ZSTD_hashPtr
	mov	rcx, QWORD PTR hashLong$1$[rsp]
	mov	DWORD PTR [rcx+rax*4], edi

; 303  :                     ZSTD_storeSeq(seqStore, 0, anchor, iend, 0, rLength-MINMATCH);

	lea	rdi, QWORD PTR [rsi-3]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rcx, QWORD PTR [rbx+24]

; 443  : #if defined(DEBUGLEVEL) && (DEBUGLEVEL >= 6)
; 444  :     static const BYTE* g_start = NULL;
; 445  :     if (g_start==NULL) g_start = (const BYTE*)literals;  /* note : index only works for compression within a single segment */
; 446  :     {   U32 const pos = (U32)((const BYTE*)literals - g_start);
; 447  :         DEBUGLOG(6, "Cpos%7u :%3u literals, match%4u bytes at offCode%7u",
; 448  :                pos, (U32)litLength, (U32)mlBase+MINMATCH, (U32)offCode);
; 449  :     }
; 450  : #endif
; 451  :     assert((size_t)(seqStorePtr->sequences - seqStorePtr->sequencesStart) < seqStorePtr->maxNbSeq);
; 452  :     /* copy Literals */
; 453  :     assert(seqStorePtr->maxNbLit <= 128 KB);
; 454  :     assert(seqStorePtr->lit + litLength <= seqStorePtr->litStart + seqStorePtr->maxNbLit);
; 455  :     assert(literals + litLength <= litLimit);
; 456  :     if (litEnd <= litLimit_w) {

	cmp	r15, r14
	ja	SHORT $LN1014@ZSTD_compr
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [r15]
	movups	XMMWORD PTR [rcx], xmm0
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	SHORT $LN1015@ZSTD_compr
$LN1014@ZSTD_compr:

; 466  :         ZSTD_safecopyLiterals(seqStorePtr->lit, literals, litEnd, litLimit_w);

	mov	r9, r14
	mov	r8, r15
	mov	rdx, r15
	call	ZSTD_safecopyLiterals
$LN1015@ZSTD_compr:

; 475  :     }
; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	rax, QWORD PTR [rbx+8]
	mov	WORD PTR [rax+4], r12w

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	mov	rax, QWORD PTR [rbx+8]
	mov	DWORD PTR [rax], 1
	mov	rcx, QWORD PTR [rbx+8]

; 480  : 
; 481  :     /* match Length */
; 482  :     if (mlBase>0xFFFF) {

	cmp	rdi, 65535				; 0000ffffH
	jbe	SHORT $LN2585@ZSTD_compr

; 485  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [rbx+72], 2
	sub	rax, QWORD PTR [rbx]
	sar	rax, 3
	mov	DWORD PTR [rbx+76], eax
$LN2585@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 304  :                     ip += rLength;

	add	r13, rsi
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 487  :     seqStorePtr->sequences[0].matchLength = (U16)mlBase;

	mov	WORD PTR [rcx+6], di

; 488  : 
; 489  :     seqStorePtr->sequences++;

	add	QWORD PTR [rbx+8], 8
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 304  :                     ip += rLength;

	mov	r15, r13
	cmp	r13, QWORD PTR ilimit$1$[rsp]
	jbe	$LL500@ZSTD_compr

; 305  :                     anchor = ip;
; 306  :                     continue;   /* faster when present ... (?) */
; 307  :         }   }   }
; 308  :     }   /* while (ip < ilimit) */

	jmp	SHORT $LN2625@ZSTD_compr
$LN516@ZSTD_compr:
	mov	ebp, DWORD PTR offset_2$1$[rsp]

; 188  :                 goto _search_next_long;
; 189  :             }
; 190  :         } else if (dictMode == ZSTD_dictMatchState) {
; 191  :             /* check dictMatchState short match */
; 192  :             U32 const dictMatchIndexS = dictHashSmall[dictHS];
; 193  :             match = dictBase + dictMatchIndexS;
; 194  :             matchIndexS = dictMatchIndexS + dictIndexDelta;
; 195  : 
; 196  :             if (match > dictStart && MEM_read32(match) == MEM_read32(ip)) {
; 197  :                 goto _search_next_long;
; 198  :         }   }
; 199  : 
; 200  :         ip += ((ip-anchor) >> kSearchStrength) + 1;

	mov	rax, r13
	sub	rax, r15
	inc	r13
	sar	rax, 8
	add	r13, rax

; 259  : 
; 260  :         if (ip <= ilimit) {

	jmp	SHORT $LN2537@ZSTD_compr
$LN2621@ZSTD_compr:
	mov	ebp, DWORD PTR offset_2$1$[rsp]
$LN2625@ZSTD_compr:

; 125  :     while (ip < ilimit) {   /* < instead of <=, because repcode check at (ip+1) */

	mov	r10d, DWORD PTR offset_1$1$[rsp]
$LN2537@ZSTD_compr:
	mov	r14d, DWORD PTR hBitsL$1$[rsp]
	cmp	r13, QWORD PTR ilimit$1$[rsp]
	jb	$LL484@ZSTD_compr
	mov	ecx, DWORD PTR tv11909[rsp]
$LN2633@ZSTD_compr:

; 335  :     }
; 336  : }

	mov	rsi, QWORD PTR iend$1$[rsp]
$LN485@ZSTD_compr:
	mov	rdx, QWORD PTR rep$[rsp]
	test	r10d, r10d
	mov	eax, ecx
	cmovne	eax, r10d
	test	ebp, ebp
	cmovne	ecx, ebp
	mov	DWORD PTR [rdx], eax
	mov	DWORD PTR [rdx+4], ecx
$LN2629@ZSTD_compr:
	mov	rbx, QWORD PTR [rsp+200]
	sub	rsi, r15
	mov	rax, rsi
	add	rsp, 128				; 00000080H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
ZSTD_compressBlock_doubleFast ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
_TEXT	SEGMENT
iend$1$ = 48
dictIndexDelta$1$ = 56
dictIndexDelta$1$ = 56
dictIndexDelta$1$ = 56
hBitsL$1$ = 56
prefixLowestIndex$1$ = 60
hBitsS$1$ = 60
hBitsS$1$ = 60
prefixLowestIndex$1$ = 60
hBitsS$1$ = 64
prefixLowestIndex$1$ = 64
prefixLowestIndex$1$ = 64
matchIndexS$1$ = 64
base$1$ = 72
base$1$ = 72
base$1$ = 72
base$1$ = 72
prefixLowest$1$ = 80
prefixLowest$1$ = 80
prefixLowest$1$ = 80
prefixLowest$1$ = 80
matchIndexS$1$ = 88
matchIndexS$1$ = 88
matchIndexS$1$ = 88
hBitsS$1$ = 88
offset_2$1$ = 96
offset_1$1$ = 96
hBitsL$1$ = 96
offset_1$1$ = 96
tv11966 = 96
offset_1$1$ = 104
offset_2$1$ = 104
offset_1$1$ = 104
dictIndexDelta$1$ = 104
tv11967 = 104
hBitsL$1$ = 112
hBitsL$1$ = 112
offset_2$1$ = 112
offset_2$1$ = 112
tv11961 = 112
dictStart$1$ = 120
dictEnd$1$ = 120
dictEnd$1$ = 120
dictStart$1$ = 120
dictEnd$1$ = 128
dictStart$1$ = 128
dictStart$1$ = 128
dictBase$1$ = 128
dictHBitsL$1$ = 136
dictHBitsL$1$ = 136
dictHBitsL$1$ = 136
dictHBitsL$1$ = 136
dictBase$1$ = 144
dictBase$1$ = 144
dictBase$1$ = 144
dictEnd$1$ = 144
hashLong$1$ = 152
litLimit_w$1$ = 160
dictMatchIndexL3$1$ = 160
dictMatchIndexL$1$ = 160
litLimit_w$1$ = 160
dictMatchIndexL3$1$ = 160
dictMatchIndexL$1$ = 160
dictMatchIndexL3$1$ = 160
dictMatchIndexL$1$ = 160
dictHBitsS$1$ = 160
hashSmall$1$ = 168
hashSmall$1$ = 168
hashSmall$1$ = 168
hashSmall$1$ = 168
dictHashLong$1$ = 176
dictHashLong$1$ = 176
dictHL$1$ = 176
dictHashLong$1$ = 176
tv11980 = 176
dictHBitsS$1$ = 184
dictHBitsS$1$ = 184
dictHBitsS$1$ = 184
dictMatchIndexL3$1$ = 184
dictMatchIndexL$1$ = 184
dictHL$1$ = 184
dictHL$1$ = 192
dictHashSmall$1$ = 192
dictHashLong$1$ = 192
dictHashSmall$1$ = 192
dictHashSmall$1$ = 200
dictHL$1$ = 200
dictHashSmall$1$ = 200
current$1$ = 272
current$1$ = 272
current$1$ = 272
current$1$ = 272
ms$ = 272
seqStore$ = 280
rep$ = 288
src$ = 296
srcSize$ = 304
ZSTD_compressBlock_doubleFast_dictMatchState PROC

; 342  : {

$LN2691:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], r8
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 208				; 000000d0H
	mov	rbx, r9
	mov	rsi, r8
	mov	r9, rcx
	mov	r14, rdx

; 343  :     const U32 mls = ms->cParams.minMatch;
; 344  :     switch(mls)

	mov	rcx, QWORD PTR srcSize$[rsp]
	mov	r8d, ebx
	mov	edx, 1
	mov	rax, QWORD PTR [r9+48]
	mov	edi, DWORD PTR [r9+192]
	lea	r11, QWORD PTR [rbx+rcx]
	mov	QWORD PTR hashLong$1$[rsp], rax
	mov	eax, DWORD PTR [r9+200]
	mov	QWORD PTR iend$1$[rsp], r11
	sub	eax, 5
	je	$LN5@ZSTD_compr
	sub	eax, edx
	je	$LN6@ZSTD_compr
	cmp	eax, edx
	mov	rax, QWORD PTR [r9+64]
	mov	QWORD PTR hashSmall$1$[rsp], rax
	je	$LN7@ZSTD_compr

; 61   :     const BYTE* const base = ms->window.base;

	mov	rbp, QWORD PTR [r9+8]

; 96   :                                      dictCParams->chainLog : hBitsS;
; 97   :     const U32 dictAndPrefixLength  = (U32)((ip - prefixLowest) + (dictEnd - dictStart));
; 98   : 
; 99   :     DEBUGLOG(5, "ZSTD_compressBlock_doubleFast_generic");
; 100  : 
; 101  :     assert(dictMode == ZSTD_noDict || dictMode == ZSTD_dictMatchState);
; 102  : 
; 103  :     /* if a dictionary is attached, it must be within window range */
; 104  :     if (dictMode == ZSTD_dictMatchState) {
; 105  :         assert(ms->window.dictLimit + (1U << cParams->windowLog) >= endIndex);
; 106  :     }
; 107  : 
; 108  :     /* init */
; 109  :     ip += (dictAndPrefixLength == 0);

	mov	r15d, 0
	mov	eax, DWORD PTR [r9+188]
	sub	r8d, ebp
	mov	r13d, DWORD PTR [rsi+4]
	add	r8d, ecx
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 991  :     U32    const maxDistance = 1U << windowLog;

	mov	ecx, DWORD PTR [r9+184]
	shl	edx, cl
	mov	ecx, DWORD PTR [r9+24]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 60   :     const U32 hBitsS = cParams->chainLog;

	mov	DWORD PTR hBitsS$1$[rsp], eax
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 993  :     U32    const withinWindow = (current - lowestValid > maxDistance) ? current - maxDistance : lowestValid;

	mov	eax, r8d
	sub	eax, ecx
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 58   :     const U32 hBitsL = cParams->hashLog;

	mov	DWORD PTR hBitsL$1$[rsp], edi
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	sub	r8d, edx
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 61   :     const BYTE* const base = ms->window.base;

	mov	QWORD PTR base$1$[rsp], rbp
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	cmp	eax, edx
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 71   :     U32 offset_1=rep[0], offset_2=rep[1];

	mov	DWORD PTR offset_2$1$[rsp], r13d
	mov	eax, DWORD PTR [rsi]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	cmovbe	r8d, ecx
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 71   :     U32 offset_1=rep[0], offset_2=rep[1];

	mov	DWORD PTR offset_1$1$[rsp], eax

; 72   :     U32 offsetSaved = 0;
; 73   : 
; 74   :     const ZSTD_matchState_t* const dms = ms->dictMatchState;

	mov	rax, QWORD PTR [r9+176]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	cmp	DWORD PTR [r9+32], 0

; 995  :     U32    const matchLowest = isDictionary ? lowestValid : withinWindow;

	cmovne	r8d, ecx
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 70   :     const BYTE* const ilimit = iend - HASH_READ_SIZE;

	add	r11, -8

; 75   :     const ZSTD_compressionParameters* const dictCParams =
; 76   :                                      dictMode == ZSTD_dictMatchState ?
; 77   :                                      &dms->cParams : NULL;
; 78   :     const U32* const dictHashLong  = dictMode == ZSTD_dictMatchState ?
; 79   :                                      dms->hashTable : NULL;
; 80   :     const U32* const dictHashSmall = dictMode == ZSTD_dictMatchState ?
; 81   :                                      dms->chainTable : NULL;
; 82   :     const U32 dictStartIndex       = dictMode == ZSTD_dictMatchState ?
; 83   :                                      dms->window.dictLimit : 0;
; 84   :     const BYTE* const dictBase     = dictMode == ZSTD_dictMatchState ?

	mov	r9, QWORD PTR [rax+8]
	mov	rdx, QWORD PTR [rax+48]

; 85   :                                      dms->window.base : NULL;
; 86   :     const BYTE* const dictStart    = dictMode == ZSTD_dictMatchState ?
; 87   :                                      dictBase + dictStartIndex : NULL;
; 88   :     const BYTE* const dictEnd      = dictMode == ZSTD_dictMatchState ?

	mov	r10, QWORD PTR [rax]
	mov	QWORD PTR dictHashLong$1$[rsp], rdx
	mov	rdx, QWORD PTR [rax+64]
	mov	QWORD PTR dictHashSmall$1$[rsp], rdx
	mov	edx, DWORD PTR [rax+24]
	add	rdx, r9
	mov	QWORD PTR dictBase$1$[rsp], r9

; 90   :     const U32 dictIndexDelta       = dictMode == ZSTD_dictMatchState ?

	sub	r9d, r10d
	mov	ecx, r8d
	add	r9d, r8d
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 995  :     U32    const matchLowest = isDictionary ? lowestValid : withinWindow;

	mov	DWORD PTR prefixLowestIndex$1$[rsp], r8d
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 93   :     const U32 dictHBitsL           = dictMode == ZSTD_dictMatchState ?

	mov	r8d, DWORD PTR [rax+192]
	add	rcx, rbp

; 94   :                                      dictCParams->hashLog : hBitsL;
; 95   :     const U32 dictHBitsS           = dictMode == ZSTD_dictMatchState ?

	mov	eax, DWORD PTR [rax+188]
	mov	DWORD PTR dictHBitsS$1$[rsp], eax

; 96   :                                      dictCParams->chainLog : hBitsS;
; 97   :     const U32 dictAndPrefixLength  = (U32)((ip - prefixLowest) + (dictEnd - dictStart));
; 98   : 
; 99   :     DEBUGLOG(5, "ZSTD_compressBlock_doubleFast_generic");
; 100  : 
; 101  :     assert(dictMode == ZSTD_noDict || dictMode == ZSTD_dictMatchState);
; 102  : 
; 103  :     /* if a dictionary is attached, it must be within window range */
; 104  :     if (dictMode == ZSTD_dictMatchState) {
; 105  :         assert(ms->window.dictLimit + (1U << cParams->windowLog) >= endIndex);
; 106  :     }
; 107  : 
; 108  :     /* init */
; 109  :     ip += (dictAndPrefixLength == 0);

	mov	eax, r10d
	sub	eax, ecx
	mov	QWORD PTR prefixLowest$1$[rsp], rcx
	sub	eax, edx
	mov	QWORD PTR dictStart$1$[rsp], rdx
	add	eax, ebx
	mov	QWORD PTR dictEnd$1$[rsp], r10
	mov	eax, r15d
	mov	DWORD PTR dictIndexDelta$1$[rsp], r9d
	sete	al
	mov	DWORD PTR dictHBitsL$1$[rsp], r8d
	lea	r12, QWORD PTR [rax+rbx]
	cmp	r12, r11

; 110  :     if (dictMode == ZSTD_noDict) {
; 111  :         U32 const current = (U32)(ip - base);
; 112  :         U32 const windowLow = ZSTD_getLowestPrefixIndex(ms, current, cParams->windowLog);
; 113  :         U32 const maxRep = current - windowLow;
; 114  :         if (offset_2 > maxRep) offsetSaved = offset_2, offset_2 = 0;
; 115  :         if (offset_1 > maxRep) offsetSaved = offset_1, offset_1 = 0;
; 116  :     }
; 117  :     if (dictMode == ZSTD_dictMatchState) {
; 118  :         /* dictMatchState repCode checks don't currently handle repCode == 0
; 119  :          * disabling. */
; 120  :         assert(offset_1 <= dictAndPrefixLength);
; 121  :         assert(offset_2 <= dictAndPrefixLength);
; 122  :     }
; 123  : 
; 124  :     /* Main Search Loop */
; 125  :     while (ip < ilimit) {   /* < instead of <=, because repcode check at (ip+1) */

	jae	$LN11@ZSTD_compr
	npad	1
$LL10@ZSTD_compr:

; 126  :         size_t mLength;
; 127  :         U32 offset;
; 128  :         size_t const h2 = ZSTD_hashPtr(ip, hBitsL, 8);

	mov	r8d, 8
	mov	edx, edi
	mov	rcx, r12
	call	ZSTD_hashPtr

; 129  :         size_t const h = ZSTD_hashPtr(ip, hBitsS, mls);

	mov	edx, DWORD PTR hBitsS$1$[rsp]
	mov	r8d, 4
	mov	rcx, r12
	mov	rsi, rax
	call	ZSTD_hashPtr

; 130  :         size_t const dictHL = ZSTD_hashPtr(ip, dictHBitsL, 8);

	mov	edx, DWORD PTR dictHBitsL$1$[rsp]
	mov	r8d, 8
	mov	rcx, r12
	mov	rdi, rax
	call	ZSTD_hashPtr

; 131  :         size_t const dictHS = ZSTD_hashPtr(ip, dictHBitsS, mls);

	mov	edx, DWORD PTR dictHBitsS$1$[rsp]
	mov	r8d, 4
	mov	rcx, r12
	mov	QWORD PTR dictHL$1$[rsp], rax
	call	ZSTD_hashPtr

; 132  :         U32 const current = (U32)(ip-base);
; 133  :         U32 const matchIndexL = hashLong[h2];

	mov	rcx, QWORD PTR hashLong$1$[rsp]
	mov	r11, rax
	mov	r10d, DWORD PTR [rcx+rsi*4]
	lea	r9, QWORD PTR [rcx+rsi*4]

; 134  :         U32 matchIndexS = hashSmall[h];

	mov	rcx, QWORD PTR hashSmall$1$[rsp]
	mov	eax, r12d
	sub	eax, ebp

; 135  :         const BYTE* matchLong = base + matchIndexL;

	add	rbp, r10
	mov	DWORD PTR current$1$[rsp], eax
	mov	r8d, DWORD PTR [rcx+rdi*4]

; 136  :         const BYTE* match = base + matchIndexS;
; 137  :         const U32 repIndex = current + 1 - offset_1;

	mov	ecx, eax
	sub	ecx, DWORD PTR offset_1$1$[rsp]
	mov	esi, r8d
	add	rsi, QWORD PTR base$1$[rsp]
	inc	ecx
	mov	DWORD PTR matchIndexS$1$[rsp], r8d

; 138  :         const BYTE* repMatch = (dictMode == ZSTD_dictMatchState

	cmp	ecx, DWORD PTR prefixLowestIndex$1$[rsp]
	jae	SHORT $LN77@ZSTD_compr
	mov	edx, ecx
	sub	edx, DWORD PTR dictIndexDelta$1$[rsp]
	add	rdx, QWORD PTR dictBase$1$[rsp]
	jmp	SHORT $LN78@ZSTD_compr
$LN77@ZSTD_compr:
	mov	edx, ecx
	add	rdx, QWORD PTR base$1$[rsp]
$LN78@ZSTD_compr:

; 139  :                             && repIndex < prefixLowestIndex) ?
; 140  :                                dictBase + (repIndex - dictIndexDelta) :
; 141  :                                base + repIndex;
; 142  :         hashLong[h2] = hashSmall[h] = current;   /* update hash tables */

	mov	r13, QWORD PTR hashSmall$1$[rsp]
	mov	DWORD PTR [r13+rdi*4], eax

; 143  : 
; 144  :         /* check dictMatchState repcode */
; 145  :         if (dictMode == ZSTD_dictMatchState
; 146  :             && ((U32)((prefixLowestIndex-1) - repIndex) >= 3 /* intentional underflow */)
; 147  :             && (MEM_read32(repMatch) == MEM_read32(ip+1)) ) {

	mov	edi, DWORD PTR prefixLowestIndex$1$[rsp]
	mov	r13, QWORD PTR dictHL$1$[rsp]
	mov	DWORD PTR [r9], eax
	mov	eax, edi
	sub	eax, ecx
	dec	eax
	cmp	eax, 3
	jb	$LN33@ZSTD_compr
	mov	eax, DWORD PTR [r12+1]
	lea	r13, QWORD PTR [r12+1]
	cmp	DWORD PTR [rdx], eax
	jne	$LN2670@ZSTD_compr

; 148  :             const BYTE* repMatchEnd = repIndex < prefixLowestIndex ? dictEnd : iend;

	mov	rbp, QWORD PTR iend$1$[rsp]
	cmp	ecx, edi

; 149  :             mLength = ZSTD_count_2segments(ip+1+4, repMatch+4, iend, repMatchEnd, prefixLowest) + 4;

	mov	rax, QWORD PTR prefixLowest$1$[rsp]
	lea	rcx, QWORD PTR [r12+5]
	mov	r9, rbp
	mov	QWORD PTR [rsp+32], rax
	cmovb	r9, QWORD PTR dictEnd$1$[rsp]
	mov	r8, rbp
	add	rdx, 4
	call	ZSTD_count_2segments
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rcx, QWORD PTR [r14+24]
	lea	r9, QWORD PTR [rbp-32]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 150  :             ip++;

	mov	r12, r13

; 151  :             ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, 0, mLength-MINMATCH);

	sub	r13, rbx
	lea	rdi, QWORD PTR [rax+4]
	lea	rsi, QWORD PTR [rdi-3]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	lea	r8, QWORD PTR [rbx+r13]

; 456  :     if (litEnd <= litLimit_w) {

	cmp	r8, r9
	ja	SHORT $LN333@ZSTD_compr
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rbx]
	movups	XMMWORD PTR [rcx], xmm0
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 462  :         if (litLength > 16) {

	cmp	r13, 16
	jbe	SHORT $LN334@ZSTD_compr

; 463  :             ZSTD_wildcopy(seqStorePtr->lit+16, literals+16, (ptrdiff_t)litLength-16, ZSTD_no_overlap);

	mov	rax, QWORD PTR [r14+24]
	add	rbx, 16
	add	rax, 16
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	lea	rcx, QWORD PTR [rax-16]
	add	rcx, r13
	npad	13
$LL347@ZSTD_compr:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rbx]

; 289  :             COPY16(op, ip);

	lea	rbx, QWORD PTR [rbx+16]

; 243  :     memcpy(dst, src, 16);

	movups	XMMWORD PTR [rax], xmm0

; 289  :             COPY16(op, ip);

	add	rax, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rax, rcx
	jb	SHORT $LL347@ZSTD_compr
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	SHORT $LN334@ZSTD_compr
$LN333@ZSTD_compr:

; 466  :         ZSTD_safecopyLiterals(seqStorePtr->lit, literals, litEnd, litLimit_w);

	mov	rdx, rbx
	call	ZSTD_safecopyLiterals
$LN334@ZSTD_compr:

; 467  :     }
; 468  :     seqStorePtr->lit += litLength;

	add	QWORD PTR [r14+24], r13
	mov	rcx, QWORD PTR [r14+8]

; 469  : 
; 470  :     /* literal Length */
; 471  :     if (litLength>0xFFFF) {

	cmp	r13, 65535				; 0000ffffH
	jbe	SHORT $LN2602@ZSTD_compr

; 472  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 473  :         seqStorePtr->longLengthID = 1;
; 474  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [r14+72], 1
	sub	rax, QWORD PTR [r14]
	sar	rax, 3
	mov	DWORD PTR [r14+76], eax
$LN2602@ZSTD_compr:

; 475  :     }
; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	WORD PTR [rcx+4], r13w

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	mov	rax, QWORD PTR [r14+8]
	mov	DWORD PTR [rax], 1
	mov	rcx, QWORD PTR [r14+8]

; 480  : 
; 481  :     /* match Length */
; 482  :     if (mlBase>0xFFFF) {

	cmp	rsi, 65535				; 0000ffffH
	jbe	SHORT $LN2603@ZSTD_compr

; 483  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 484  :         seqStorePtr->longLengthID = 2;
; 485  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [r14+72], 2
	sub	rax, QWORD PTR [r14]
	sar	rax, 3
	mov	DWORD PTR [r14+76], eax
$LN2603@ZSTD_compr:

; 487  :     seqStorePtr->sequences[0].matchLength = (U16)mlBase;

	mov	WORD PTR [rcx+6], si
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 152  :             goto _match_stored;

	jmp	$LN2682@ZSTD_compr
$LN2670@ZSTD_compr:

; 143  : 
; 144  :         /* check dictMatchState repcode */
; 145  :         if (dictMode == ZSTD_dictMatchState
; 146  :             && ((U32)((prefixLowestIndex-1) - repIndex) >= 3 /* intentional underflow */)
; 147  :             && (MEM_read32(repMatch) == MEM_read32(ip+1)) ) {

	mov	r13, QWORD PTR dictHL$1$[rsp]
$LN33@ZSTD_compr:

; 153  :         }
; 154  : 
; 155  :         /* check noDict repcode */
; 156  :         if ( dictMode == ZSTD_noDict
; 157  :           && ((offset_1 > 0) & (MEM_read32(ip+1-offset_1) == MEM_read32(ip+1)))) {
; 158  :             mLength = ZSTD_count(ip+1+4, ip+1+4-offset_1, iend) + 4;
; 159  :             ip++;
; 160  :             ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, 0, mLength-MINMATCH);
; 161  :             goto _match_stored;
; 162  :         }
; 163  : 
; 164  :         if (matchIndexL > prefixLowestIndex) {

	cmp	r10d, edi
	jbe	$LN35@ZSTD_compr

; 165  :             /* check prefix long match */
; 166  :             if (MEM_read64(matchLong) == MEM_read64(ip)) {

	mov	rax, QWORD PTR [r12]
	cmp	QWORD PTR [rbp], rax
	jne	$LN2678@ZSTD_compr

; 167  :                 mLength = ZSTD_count(ip+8, matchLong+8, iend) + 8;

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rdx, QWORD PTR [rbp+8]
	lea	rcx, QWORD PTR [r12+8]
	call	ZSTD_count

; 168  :                 offset = (U32)(ip-matchLong);
; 169  :                 while (((ip>anchor) & (matchLong>prefixLowest)) && (ip[-1] == matchLong[-1])) { ip--; matchLong--; mLength++; } /* catch up */

	mov	r10, QWORD PTR prefixLowest$1$[rsp]
	mov	ecx, r15d
	mov	r13d, r12d
	sub	r13d, ebp
	cmp	rbp, r10
	lea	rdi, QWORD PTR [rax+8]
	mov	eax, r15d
	seta	cl
	cmp	r12, rbx
	seta	al
	test	ecx, eax
	je	$_match_found$2692
	npad	6
$LL12@ZSTD_compr:
	movzx	eax, BYTE PTR [rbp-1]
	lea	rdx, QWORD PTR [r12-1]
	dec	rbp
	cmp	BYTE PTR [rdx], al
	jne	$_match_found$2692
	inc	rdi
	mov	ecx, r15d
	cmp	rbp, r10
	mov	eax, r15d
	mov	r12, rdx
	seta	cl
	cmp	rdx, rbx
	seta	al
	test	ecx, eax
	jne	SHORT $LL12@ZSTD_compr

; 170  :                 goto _match_found;

	jmp	$_match_found$2692
$LN35@ZSTD_compr:

; 171  :             }
; 172  :         } else if (dictMode == ZSTD_dictMatchState) {
; 173  :             /* check dictMatchState long match */
; 174  :             U32 const dictMatchIndexL = dictHashLong[dictHL];

	mov	rax, QWORD PTR dictHashLong$1$[rsp]

; 175  :             const BYTE* dictMatchL = dictBase + dictMatchIndexL;

	mov	r9, QWORD PTR dictBase$1$[rsp]

; 176  :             assert(dictMatchL < dictEnd);
; 177  : 
; 178  :             if (dictMatchL > dictStart && MEM_read64(dictMatchL) == MEM_read64(ip)) {

	mov	rdx, QWORD PTR dictStart$1$[rsp]
	mov	eax, DWORD PTR [rax+r13*4]
	mov	DWORD PTR dictMatchIndexL$1$[rsp], eax
	lea	rbp, QWORD PTR [r9+rax]
	cmp	rbp, rdx
	jbe	$LN39@ZSTD_compr
	mov	rax, QWORD PTR [r12]
	cmp	QWORD PTR [rbp], rax
	jne	$LN39@ZSTD_compr

; 179  :                 mLength = ZSTD_count_2segments(ip+8, dictMatchL+8, iend, dictEnd, prefixLowest) + 8;

	mov	rax, QWORD PTR prefixLowest$1$[rsp]
	lea	rdx, QWORD PTR [rbp+8]
	mov	r9, QWORD PTR dictEnd$1$[rsp]
	lea	rcx, QWORD PTR [r12+8]
	mov	r8, QWORD PTR iend$1$[rsp]
	mov	QWORD PTR [rsp+32], rax
	call	ZSTD_count_2segments

; 180  :                 offset = (U32)(current - dictMatchIndexL - dictIndexDelta);

	mov	r13d, DWORD PTR current$1$[rsp]
	sub	r13d, DWORD PTR dictMatchIndexL$1$[rsp]
	sub	r13d, DWORD PTR dictIndexDelta$1$[rsp]
	lea	rdi, QWORD PTR [rax+8]

; 181  :                 while (((ip>anchor) & (dictMatchL>dictStart)) && (ip[-1] == dictMatchL[-1])) { ip--; dictMatchL--; mLength++; } /* catch up */

	cmp	r12, rbx
	jbe	$_match_found$2692
	mov	r8, QWORD PTR dictStart$1$[rsp]
	npad	4
$LL14@ZSTD_compr:
	movzx	eax, BYTE PTR [rbp-1]
	lea	rdx, QWORD PTR [r12-1]
	dec	rbp
	cmp	BYTE PTR [rdx], al
	jne	$_match_found$2692
	inc	rdi
	mov	ecx, r15d
	cmp	rdx, rbx
	mov	eax, r15d
	mov	r12, rdx
	seta	cl
	cmp	rbp, r8
	seta	al
	test	ecx, eax
	jne	SHORT $LL14@ZSTD_compr

; 182  :                 goto _match_found;

	jmp	$_match_found$2692
$LN2678@ZSTD_compr:

; 165  :             /* check prefix long match */
; 166  :             if (MEM_read64(matchLong) == MEM_read64(ip)) {

	mov	rdx, QWORD PTR dictStart$1$[rsp]
	mov	r9, QWORD PTR dictBase$1$[rsp]
$LN39@ZSTD_compr:

; 183  :         }   }
; 184  : 
; 185  :         if (matchIndexS > prefixLowestIndex) {

	cmp	r8d, edi
	jbe	SHORT $LN40@ZSTD_compr

; 186  :             /* check prefix short match */
; 187  :             if (MEM_read32(match) == MEM_read32(ip)) {

	mov	eax, DWORD PTR [r12]
	cmp	DWORD PTR [rsi], eax
	je	SHORT $_search_next_long$2693
$LN44@ZSTD_compr:

; 197  :                 goto _search_next_long;
; 198  :         }   }
; 199  : 
; 200  :         ip += ((ip-anchor) >> kSearchStrength) + 1;

	mov	rcx, r12
	inc	r12
	sub	rcx, rbx
	sar	rcx, 8
	add	r12, rcx
$LN2674@ZSTD_compr:

; 110  :     if (dictMode == ZSTD_noDict) {
; 111  :         U32 const current = (U32)(ip - base);
; 112  :         U32 const windowLow = ZSTD_getLowestPrefixIndex(ms, current, cParams->windowLog);
; 113  :         U32 const maxRep = current - windowLow;
; 114  :         if (offset_2 > maxRep) offsetSaved = offset_2, offset_2 = 0;
; 115  :         if (offset_1 > maxRep) offsetSaved = offset_1, offset_1 = 0;
; 116  :     }
; 117  :     if (dictMode == ZSTD_dictMatchState) {
; 118  :         /* dictMatchState repCode checks don't currently handle repCode == 0
; 119  :          * disabling. */
; 120  :         assert(offset_1 <= dictAndPrefixLength);
; 121  :         assert(offset_2 <= dictAndPrefixLength);
; 122  :     }
; 123  : 
; 124  :     /* Main Search Loop */
; 125  :     while (ip < ilimit) {   /* < instead of <=, because repcode check at (ip+1) */

	mov	r13d, DWORD PTR offset_2$1$[rsp]
$LN2683@ZSTD_compr:
	mov	rbp, QWORD PTR base$1$[rsp]
$LN2537@ZSTD_compr:
	mov	rax, QWORD PTR iend$1$[rsp]
	mov	edi, DWORD PTR hBitsL$1$[rsp]
	add	rax, -8
	cmp	r12, rax
	jb	$LL10@ZSTD_compr
	mov	rsi, QWORD PTR rep$[rsp]
$LN11@ZSTD_compr:

; 309  : 
; 310  :     /* save reps for next block */
; 311  :     rep[0] = offset_1 ? offset_1 : offsetSaved;

	mov	eax, DWORD PTR offset_1$1$[rsp]

; 345  :     {
; 346  :     default: /* includes case 3 */
; 347  :     case 4 :
; 348  :         return ZSTD_compressBlock_doubleFast_generic(ms, seqStore, rep, src, srcSize, 4, ZSTD_dictMatchState);

	jmp	$LN2684@ZSTD_compr
$LN40@ZSTD_compr:

; 192  :             U32 const dictMatchIndexS = dictHashSmall[dictHS];

	mov	rax, QWORD PTR dictHashSmall$1$[rsp]
	mov	ecx, DWORD PTR [rax+r11*4]

; 193  :             match = dictBase + dictMatchIndexS;
; 194  :             matchIndexS = dictMatchIndexS + dictIndexDelta;

	mov	eax, DWORD PTR dictIndexDelta$1$[rsp]
	add	eax, ecx
	mov	DWORD PTR matchIndexS$1$[rsp], eax
	lea	rsi, QWORD PTR [r9+rcx]

; 195  : 
; 196  :             if (match > dictStart && MEM_read32(match) == MEM_read32(ip)) {

	cmp	rsi, rdx
	jbe	SHORT $LN44@ZSTD_compr
	mov	eax, DWORD PTR [r12]
	cmp	DWORD PTR [rsi], eax
	jne	SHORT $LN44@ZSTD_compr
$_search_next_long$2693:

; 201  : #if defined(__aarch64__)
; 202  :         PREFETCH_L1(ip+256);
; 203  : #endif
; 204  :         continue;
; 205  : 
; 206  : _search_next_long:
; 207  : 
; 208  :         {   size_t const hl3 = ZSTD_hashPtr(ip+1, hBitsL, 8);

	mov	edx, DWORD PTR hBitsL$1$[rsp]
	lea	r13, QWORD PTR [r12+1]
	mov	rcx, r13
	mov	QWORD PTR tv11961[rsp], r13
	mov	r8d, 8
	call	ZSTD_hashPtr

; 209  :             size_t const dictHLNext = ZSTD_hashPtr(ip+1, dictHBitsL, 8);

	mov	edx, DWORD PTR dictHBitsL$1$[rsp]
	mov	r8d, 8
	mov	rcx, r13
	mov	rdi, rax
	call	ZSTD_hashPtr

; 210  :             U32 const matchIndexL3 = hashLong[hl3];

	mov	r9, QWORD PTR hashLong$1$[rsp]

; 211  :             const BYTE* matchL3 = base + matchIndexL3;
; 212  :             hashLong[hl3] = current + 1;

	mov	ecx, DWORD PTR current$1$[rsp]
	mov	edx, DWORD PTR [r9+rdi*4]
	mov	ebp, edx
	add	rbp, QWORD PTR base$1$[rsp]
	inc	ecx
	mov	DWORD PTR [r9+rdi*4], ecx

; 213  : 
; 214  :             /* check prefix long +1 match */
; 215  :             if (matchIndexL3 > prefixLowestIndex) {

	mov	ecx, DWORD PTR prefixLowestIndex$1$[rsp]
	cmp	edx, ecx
	jbe	$LN45@ZSTD_compr

; 216  :                 if (MEM_read64(matchL3) == MEM_read64(ip+1)) {

	mov	rax, QWORD PTR [r13]
	cmp	QWORD PTR [rbp], rax
	jne	$LN49@ZSTD_compr

; 217  :                     mLength = ZSTD_count(ip+9, matchL3+8, iend) + 8;

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rdx, QWORD PTR [rbp+8]
	lea	rcx, QWORD PTR [r12+9]
	call	ZSTD_count

; 218  :                     ip++;
; 219  :                     offset = (U32)(ip-matchL3);
; 220  :                     while (((ip>anchor) & (matchL3>prefixLowest)) && (ip[-1] == matchL3[-1])) { ip--; matchL3--; mLength++; } /* catch up */

	mov	r10, QWORD PTR prefixLowest$1$[rsp]
	mov	r12, r13
	sub	r13d, ebp
	mov	ecx, r15d
	cmp	rbp, r10
	lea	rdi, QWORD PTR [rax+8]
	mov	eax, r15d
	seta	cl
	cmp	r12, rbx
	seta	al
	test	ecx, eax
	je	$_match_found$2692
$LL16@ZSTD_compr:
	movzx	eax, BYTE PTR [rbp-1]
	lea	rdx, QWORD PTR [r12-1]
	dec	rbp
	cmp	BYTE PTR [rdx], al
	jne	$_match_found$2692
	inc	rdi
	mov	ecx, r15d
	cmp	rdx, rbx
	mov	eax, r15d
	mov	r12, rdx
	seta	cl
	cmp	rbp, r10
	seta	al
	test	ecx, eax
	jne	SHORT $LL16@ZSTD_compr

; 221  :                     goto _match_found;

	jmp	$_match_found$2692
$LN45@ZSTD_compr:

; 222  :                 }
; 223  :             } else if (dictMode == ZSTD_dictMatchState) {
; 224  :                 /* check dict long +1 match */
; 225  :                 U32 const dictMatchIndexL3 = dictHashLong[dictHLNext];

	mov	rdx, QWORD PTR dictHashLong$1$[rsp]
	mov	eax, DWORD PTR [rdx+rax*4]

; 226  :                 const BYTE* dictMatchL3 = dictBase + dictMatchIndexL3;

	mov	ebp, eax
	mov	DWORD PTR dictMatchIndexL3$1$[rsp], eax
	add	rbp, QWORD PTR dictBase$1$[rsp]

; 227  :                 assert(dictMatchL3 < dictEnd);
; 228  :                 if (dictMatchL3 > dictStart && MEM_read64(dictMatchL3) == MEM_read64(ip+1)) {

	cmp	rbp, QWORD PTR dictStart$1$[rsp]
	jbe	$LN49@ZSTD_compr
	mov	rax, QWORD PTR [r13]
	cmp	QWORD PTR [rbp], rax
	jne	$LN49@ZSTD_compr

; 229  :                     mLength = ZSTD_count_2segments(ip+1+8, dictMatchL3+8, iend, dictEnd, prefixLowest) + 8;

	mov	rax, QWORD PTR prefixLowest$1$[rsp]
	lea	rdx, QWORD PTR [rbp+8]
	mov	r9, QWORD PTR dictEnd$1$[rsp]
	lea	rcx, QWORD PTR [r12+9]
	mov	r8, QWORD PTR iend$1$[rsp]
	mov	QWORD PTR [rsp+32], rax
	call	ZSTD_count_2segments

; 230  :                     ip++;

	mov	r12, r13

; 231  :                     offset = (U32)(current + 1 - dictMatchIndexL3 - dictIndexDelta);

	mov	r13d, DWORD PTR current$1$[rsp]
	sub	r13d, DWORD PTR dictMatchIndexL3$1$[rsp]
	sub	r13d, DWORD PTR dictIndexDelta$1$[rsp]
	inc	r13d
	lea	rdi, QWORD PTR [rax+8]

; 232  :                     while (((ip>anchor) & (dictMatchL3>dictStart)) && (ip[-1] == dictMatchL3[-1])) { ip--; dictMatchL3--; mLength++; } /* catch up */

	cmp	QWORD PTR tv11961[rsp], rbx
	jbe	$_match_found$2692
	mov	r8, QWORD PTR dictStart$1$[rsp]
	npad	1
$LL18@ZSTD_compr:
	movzx	eax, BYTE PTR [rbp-1]
	lea	rdx, QWORD PTR [r12-1]
	dec	rbp
	cmp	BYTE PTR [rdx], al
	jne	$_match_found$2692
	inc	rdi
	mov	ecx, r15d
	cmp	rdx, rbx
	mov	eax, r15d
	mov	r12, rdx
	seta	cl
	cmp	rbp, r8
	seta	al
	test	ecx, eax
	jne	SHORT $LL18@ZSTD_compr

; 233  :                     goto _match_found;

	jmp	$_match_found$2692
$LN49@ZSTD_compr:

; 234  :         }   }   }
; 235  : 
; 236  :         /* if no long +1 match, explore the short match we found */
; 237  :         if (dictMode == ZSTD_dictMatchState && matchIndexS < prefixLowestIndex) {

	cmp	DWORD PTR matchIndexS$1$[rsp], ecx
	lea	rdx, QWORD PTR [rsi+4]
	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rcx, QWORD PTR [r12+4]
	jae	SHORT $LN50@ZSTD_compr

; 238  :             mLength = ZSTD_count_2segments(ip+4, match+4, iend, dictEnd, prefixLowest) + 4;

	mov	rax, QWORD PTR prefixLowest$1$[rsp]
	mov	r9, QWORD PTR dictEnd$1$[rsp]
	mov	QWORD PTR [rsp+32], rax
	call	ZSTD_count_2segments

; 239  :             offset = (U32)(current - matchIndexS);

	mov	r13d, DWORD PTR current$1$[rsp]

; 240  :             while (((ip>anchor) & (match>dictStart)) && (ip[-1] == match[-1])) { ip--; match--; mLength++; } /* catch up */

	mov	ecx, r15d
	sub	r13d, DWORD PTR matchIndexS$1$[rsp]
	mov	r8, QWORD PTR dictStart$1$[rsp]
	cmp	rsi, r8
	lea	rdi, QWORD PTR [rax+4]
	mov	eax, r15d
	seta	cl
	cmp	r12, rbx
	seta	al
	test	ecx, eax
	je	$_match_found$2692
$LL20@ZSTD_compr:
	movzx	eax, BYTE PTR [rsi-1]
	lea	rdx, QWORD PTR [r12-1]
	dec	rsi
	cmp	BYTE PTR [rdx], al
	jne	SHORT $_match_found$2692
	inc	rdi
	mov	ecx, r15d
	cmp	rsi, r8
	mov	eax, r15d
	mov	r12, rdx
	seta	cl
	cmp	rdx, rbx
	seta	al
	test	ecx, eax
	jne	SHORT $LL20@ZSTD_compr

; 241  :         } else {

	jmp	SHORT $_match_found$2692
$LN50@ZSTD_compr:

; 242  :             mLength = ZSTD_count(ip+4, match+4, iend) + 4;

	call	ZSTD_count

; 243  :             offset = (U32)(ip - match);
; 244  :             while (((ip>anchor) & (match>prefixLowest)) && (ip[-1] == match[-1])) { ip--; match--; mLength++; } /* catch up */

	mov	r10, QWORD PTR prefixLowest$1$[rsp]
	mov	ecx, r15d
	mov	r13d, r12d
	sub	r13d, esi
	cmp	rsi, r10
	lea	rdi, QWORD PTR [rax+4]
	mov	eax, r15d
	seta	cl
	cmp	r12, rbx
	seta	al
	test	ecx, eax
	je	SHORT $_match_found$2692
	npad	8
$LL22@ZSTD_compr:
	movzx	eax, BYTE PTR [rsi-1]
	lea	rdx, QWORD PTR [r12-1]
	dec	rsi
	cmp	BYTE PTR [rdx], al
	jne	SHORT $_match_found$2692
	inc	rdi
	mov	ecx, r15d
	cmp	rsi, r10
	mov	eax, r15d
	mov	r12, rdx
	seta	cl
	cmp	rdx, rbx
	seta	al
	test	ecx, eax
	jne	SHORT $LL22@ZSTD_compr
$_match_found$2692:

; 250  :         offset_2 = offset_1;

	mov	eax, DWORD PTR offset_1$1$[rsp]

; 253  :         ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, offset + ZSTD_REP_MOVE, mLength-MINMATCH);

	lea	rbp, QWORD PTR [rdi-3]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	mov	r9, QWORD PTR iend$1$[rsp]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 253  :         ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, offset + ZSTD_REP_MOVE, mLength-MINMATCH);

	mov	rsi, r12
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rcx, QWORD PTR [r14+24]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 253  :         ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, offset + ZSTD_REP_MOVE, mLength-MINMATCH);

	sub	rsi, rbx
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	add	r9, -32					; ffffffffffffffe0H
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 250  :         offset_2 = offset_1;

	mov	DWORD PTR offset_2$1$[rsp], eax

; 251  :         offset_1 = offset;

	mov	DWORD PTR offset_1$1$[rsp], r13d
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	lea	r8, QWORD PTR [rsi+rbx]

; 456  :     if (litEnd <= litLimit_w) {

	cmp	r8, r9
	ja	SHORT $LN407@ZSTD_compr
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rbx]
	movups	XMMWORD PTR [rcx], xmm0
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 462  :         if (litLength > 16) {

	cmp	rsi, 16
	jbe	SHORT $LN408@ZSTD_compr

; 463  :             ZSTD_wildcopy(seqStorePtr->lit+16, literals+16, (ptrdiff_t)litLength-16, ZSTD_no_overlap);

	mov	rax, QWORD PTR [r14+24]
	add	rbx, 16
	add	rax, 16
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	lea	rcx, QWORD PTR [rax-16]
	add	rcx, rsi
	npad	8
$LL421@ZSTD_compr:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rbx]

; 289  :             COPY16(op, ip);

	lea	rbx, QWORD PTR [rbx+16]

; 243  :     memcpy(dst, src, 16);

	movups	XMMWORD PTR [rax], xmm0

; 289  :             COPY16(op, ip);

	add	rax, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rax, rcx
	jb	SHORT $LL421@ZSTD_compr
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	SHORT $LN408@ZSTD_compr
$LN407@ZSTD_compr:

; 466  :         ZSTD_safecopyLiterals(seqStorePtr->lit, literals, litEnd, litLimit_w);

	mov	rdx, rbx
	call	ZSTD_safecopyLiterals
$LN408@ZSTD_compr:

; 467  :     }
; 468  :     seqStorePtr->lit += litLength;

	add	QWORD PTR [r14+24], rsi
	mov	rcx, QWORD PTR [r14+8]

; 469  : 
; 470  :     /* literal Length */
; 471  :     if (litLength>0xFFFF) {

	cmp	rsi, 65535				; 0000ffffH
	jbe	SHORT $LN2604@ZSTD_compr

; 472  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 473  :         seqStorePtr->longLengthID = 1;
; 474  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [r14+72], 1
	sub	rax, QWORD PTR [r14]
	sar	rax, 3
	mov	DWORD PTR [r14+76], eax
$LN2604@ZSTD_compr:

; 475  :     }
; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	WORD PTR [rcx+4], si

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	lea	ecx, DWORD PTR [r13+3]
	mov	rax, QWORD PTR [r14+8]
	mov	DWORD PTR [rax], ecx
	mov	rcx, QWORD PTR [r14+8]

; 480  : 
; 481  :     /* match Length */
; 482  :     if (mlBase>0xFFFF) {

	cmp	rbp, 65535				; 0000ffffH
	jbe	SHORT $LN2605@ZSTD_compr

; 483  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 484  :         seqStorePtr->longLengthID = 2;
; 485  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [r14+72], 2
	sub	rax, QWORD PTR [r14]
	sar	rax, 3
	mov	DWORD PTR [r14+76], eax
$LN2605@ZSTD_compr:

; 487  :     seqStorePtr->sequences[0].matchLength = (U16)mlBase;

	mov	WORD PTR [rcx+6], bp
$LN2682@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 257  :         ip += mLength;

	add	QWORD PTR [r14+8], 8
$_match_stored$2694:

; 258  :         anchor = ip;

	mov	rbp, QWORD PTR iend$1$[rsp]
	lea	rbx, QWORD PTR [rdi+r12]
	add	rbp, -8
	mov	r12, rbx
	cmp	rbx, rbp

; 259  : 
; 260  :         if (ip <= ilimit) {

	ja	$LN2674@ZSTD_compr

; 261  :             /* Complementary insertion */
; 262  :             /* done after iLimit test, as candidates could be > iend-8 */
; 263  :             {   U32 const indexToInsert = current+2;

	mov	ebp, DWORD PTR current$1$[rsp]

; 264  :                 hashLong[ZSTD_hashPtr(base+indexToInsert, hBitsL, 8)] = indexToInsert;

	mov	r8d, 8
	mov	r13, QWORD PTR base$1$[rsp]
	add	ebp, 2
	mov	edx, DWORD PTR hBitsL$1$[rsp]
	mov	esi, ebp
	add	rsi, r13
	mov	rcx, rsi
	call	ZSTD_hashPtr
	mov	rcx, QWORD PTR hashLong$1$[rsp]

; 265  :                 hashLong[ZSTD_hashPtr(ip-2, hBitsL, 8)] = (U32)(ip-2-base);

	mov	edi, ebx
	mov	edx, DWORD PTR hBitsL$1$[rsp]
	sub	edi, r13d
	mov	r8d, 8
	sub	edi, 2
	mov	DWORD PTR [rcx+rax*4], ebp
	lea	rcx, QWORD PTR [rbx-2]
	call	ZSTD_hashPtr
	mov	rcx, QWORD PTR hashLong$1$[rsp]

; 266  :                 hashSmall[ZSTD_hashPtr(base+indexToInsert, hBitsS, mls)] = indexToInsert;

	mov	r8d, 4
	mov	edx, DWORD PTR hBitsS$1$[rsp]
	mov	DWORD PTR [rcx+rax*4], edi
	mov	rcx, rsi
	call	ZSTD_hashPtr
	mov	rsi, QWORD PTR hashSmall$1$[rsp]

; 267  :                 hashSmall[ZSTD_hashPtr(ip-1, hBitsS, mls)] = (U32)(ip-1-base);

	lea	rcx, QWORD PTR [rbx-1]
	mov	edx, DWORD PTR hBitsS$1$[rsp]
	mov	edi, ebx
	mov	r8d, 4
	mov	DWORD PTR [rsi+rax*4], ebp
	mov	rbp, r13
	sub	edi, ebp
	dec	edi
	call	ZSTD_hashPtr
	mov	r13d, DWORD PTR offset_2$1$[rsp]
	mov	DWORD PTR [rsi+rax*4], edi
	npad	1
$LL24@ZSTD_compr:

; 275  :                     const BYTE* repMatch2 = dictMode == ZSTD_dictMatchState

	mov	r8d, DWORD PTR prefixLowestIndex$1$[rsp]
	mov	edi, r12d
	sub	edi, ebp
	mov	ecx, edi
	sub	ecx, r13d
	mov	edx, ecx
	cmp	ecx, r8d
	jae	SHORT $LN79@ZSTD_compr
	mov	eax, DWORD PTR dictIndexDelta$1$[rsp]
	sub	rdx, rax
	add	rdx, QWORD PTR dictBase$1$[rsp]
	jmp	SHORT $LN80@ZSTD_compr
$LN79@ZSTD_compr:
	add	rdx, rbp
$LN80@ZSTD_compr:

; 276  :                         && repIndex2 < prefixLowestIndex ?
; 277  :                             dictBase + repIndex2 - dictIndexDelta :
; 278  :                             base + repIndex2;
; 279  :                     if ( ((U32)((prefixLowestIndex-1) - (U32)repIndex2) >= 3 /* intentional overflow */)
; 280  :                        && (MEM_read32(repMatch2) == MEM_read32(ip)) ) {

	mov	eax, r8d
	sub	eax, ecx
	dec	eax
	cmp	eax, 3
	jb	$LN2537@ZSTD_compr
	mov	eax, DWORD PTR [r12]
	cmp	DWORD PTR [rdx], eax
	jne	$LN2537@ZSTD_compr

; 282  :                         size_t const repLength2 = ZSTD_count_2segments(ip+4, repMatch2+4, iend, repEnd2, prefixLowest) + 4;

	mov	rax, QWORD PTR prefixLowest$1$[rsp]
	cmp	ecx, r8d
	mov	r9, QWORD PTR iend$1$[rsp]
	lea	rcx, QWORD PTR [r12+4]
	cmovb	r9, QWORD PTR dictEnd$1$[rsp]
	add	rdx, 4
	mov	r8, QWORD PTR iend$1$[rsp]
	mov	QWORD PTR [rsp+32], rax
	call	ZSTD_count_2segments

; 283  :                         U32 tmpOffset = offset_2; offset_2 = offset_1; offset_1 = tmpOffset;   /* swap offset_2 <=> offset_1 */

	mov	ecx, r13d
	mov	r13d, DWORD PTR offset_1$1$[rsp]
	mov	DWORD PTR offset_1$1$[rsp], ecx
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rcx, QWORD PTR [r14+24]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 282  :                         size_t const repLength2 = ZSTD_count_2segments(ip+4, repMatch2+4, iend, repEnd2, prefixLowest) + 4;

	lea	rsi, QWORD PTR [rax+4]

; 283  :                         U32 tmpOffset = offset_2; offset_2 = offset_1; offset_1 = tmpOffset;   /* swap offset_2 <=> offset_1 */

	mov	DWORD PTR offset_2$1$[rsp], r13d
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 456  :     if (litEnd <= litLimit_w) {

	mov	rax, QWORD PTR iend$1$[rsp]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 284  :                         ZSTD_storeSeq(seqStore, 0, anchor, iend, 0, repLength2-MINMATCH);

	lea	rbp, QWORD PTR [rsi-3]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 456  :     if (litEnd <= litLimit_w) {

	add	rax, -32				; ffffffffffffffe0H
	cmp	rbx, rax
	ja	SHORT $LN434@ZSTD_compr
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rbx]
	movups	XMMWORD PTR [rcx], xmm0
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	SHORT $LN435@ZSTD_compr
$LN434@ZSTD_compr:

; 466  :         ZSTD_safecopyLiterals(seqStorePtr->lit, literals, litEnd, litLimit_w);

	mov	r9, rax
	mov	r8, rbx
	mov	rdx, rbx
	call	ZSTD_safecopyLiterals
$LN435@ZSTD_compr:

; 475  :     }
; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	rax, QWORD PTR [r14+8]
	mov	WORD PTR [rax+4], r15w

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	mov	rax, QWORD PTR [r14+8]
	mov	DWORD PTR [rax], 1

; 480  : 
; 481  :     /* match Length */
; 482  :     if (mlBase>0xFFFF) {

	cmp	rbp, 65535				; 0000ffffH
	jbe	SHORT $LN2662@ZSTD_compr

; 483  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 484  :         seqStorePtr->longLengthID = 2;
; 485  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, QWORD PTR [r14+8]
	sub	rax, QWORD PTR [r14]
	sar	rax, 3
	mov	DWORD PTR [r14+76], eax
	mov	DWORD PTR [r14+72], 2
$LN2662@ZSTD_compr:

; 487  :     seqStorePtr->sequences[0].matchLength = (U16)mlBase;

	mov	rax, QWORD PTR [r14+8]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 285  :                         hashSmall[ZSTD_hashPtr(ip, hBitsS, mls)] = current2;

	mov	r8d, 4
	mov	edx, DWORD PTR hBitsS$1$[rsp]
	mov	rcx, r12
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 487  :     seqStorePtr->sequences[0].matchLength = (U16)mlBase;

	mov	WORD PTR [rax+6], bp

; 488  : 
; 489  :     seqStorePtr->sequences++;

	add	QWORD PTR [r14+8], 8
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 285  :                         hashSmall[ZSTD_hashPtr(ip, hBitsS, mls)] = current2;

	call	ZSTD_hashPtr
	mov	rcx, QWORD PTR hashSmall$1$[rsp]

; 286  :                         hashLong[ZSTD_hashPtr(ip, hBitsL, 8)] = current2;

	mov	r8d, 8
	mov	edx, DWORD PTR hBitsL$1$[rsp]
	mov	DWORD PTR [rcx+rax*4], edi
	mov	rcx, r12
	call	ZSTD_hashPtr
	mov	rcx, QWORD PTR hashLong$1$[rsp]

; 287  :                         ip += repLength2;

	add	r12, rsi
	mov	rbp, QWORD PTR iend$1$[rsp]
	mov	rbx, r12
	add	rbp, -8
	cmp	r12, rbp
	mov	rbp, QWORD PTR base$1$[rsp]
	mov	DWORD PTR [rcx+rax*4], edi
	jbe	$LL24@ZSTD_compr

; 288  :                         anchor = ip;
; 289  :                         continue;
; 290  :                     }
; 291  :                     break;
; 292  :             }   }
; 293  : 
; 294  :             if (dictMode == ZSTD_noDict) {
; 295  :                 while ( (ip <= ilimit)
; 296  :                      && ( (offset_2>0)
; 297  :                         & (MEM_read32(ip) == MEM_read32(ip - offset_2)) )) {
; 298  :                     /* store sequence */
; 299  :                     size_t const rLength = ZSTD_count(ip+4, ip+4-offset_2, iend) + 4;
; 300  :                     U32 const tmpOff = offset_2; offset_2 = offset_1; offset_1 = tmpOff;  /* swap offset_2 <=> offset_1 */
; 301  :                     hashSmall[ZSTD_hashPtr(ip, hBitsS, mls)] = (U32)(ip-base);
; 302  :                     hashLong[ZSTD_hashPtr(ip, hBitsL, 8)] = (U32)(ip-base);
; 303  :                     ZSTD_storeSeq(seqStore, 0, anchor, iend, 0, rLength-MINMATCH);
; 304  :                     ip += rLength;
; 305  :                     anchor = ip;
; 306  :                     continue;   /* faster when present ... (?) */
; 307  :         }   }   }
; 308  :     }   /* while (ip < ilimit) */

	jmp	$LN2683@ZSTD_compr
$LN7@ZSTD_compr:

; 61   :     const BYTE* const base = ms->window.base;

	mov	r10, QWORD PTR [r9+8]

; 96   :                                      dictCParams->chainLog : hBitsS;
; 97   :     const U32 dictAndPrefixLength  = (U32)((ip - prefixLowest) + (dictEnd - dictStart));
; 98   : 
; 99   :     DEBUGLOG(5, "ZSTD_compressBlock_doubleFast_generic");
; 100  : 
; 101  :     assert(dictMode == ZSTD_noDict || dictMode == ZSTD_dictMatchState);
; 102  : 
; 103  :     /* if a dictionary is attached, it must be within window range */
; 104  :     if (dictMode == ZSTD_dictMatchState) {
; 105  :         assert(ms->window.dictLimit + (1U << cParams->windowLog) >= endIndex);
; 106  :     }
; 107  : 
; 108  :     /* init */
; 109  :     ip += (dictAndPrefixLength == 0);

	mov	r15d, 0
	mov	r13d, DWORD PTR [r9+188]
	sub	r8d, r10d
	mov	ebp, DWORD PTR [rsi+4]
	add	r8d, ecx
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 991  :     U32    const maxDistance = 1U << windowLog;

	mov	ecx, DWORD PTR [r9+184]

; 993  :     U32    const withinWindow = (current - lowestValid > maxDistance) ? current - maxDistance : lowestValid;

	mov	eax, r8d
	shl	edx, cl
	mov	ecx, DWORD PTR [r9+24]

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	sub	r8d, edx
	sub	eax, ecx
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 61   :     const BYTE* const base = ms->window.base;

	mov	QWORD PTR base$1$[rsp], r10
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	cmp	eax, edx
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 58   :     const U32 hBitsL = cParams->hashLog;

	mov	DWORD PTR hBitsL$1$[rsp], edi

; 71   :     U32 offset_1=rep[0], offset_2=rep[1];

	mov	eax, DWORD PTR [rsi]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	cmovbe	r8d, ecx
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 71   :     U32 offset_1=rep[0], offset_2=rep[1];

	mov	DWORD PTR offset_1$1$[rsp], eax

; 72   :     U32 offsetSaved = 0;
; 73   : 
; 74   :     const ZSTD_matchState_t* const dms = ms->dictMatchState;

	mov	rax, QWORD PTR [r9+176]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	cmp	DWORD PTR [r9+32], 0
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 60   :     const U32 hBitsS = cParams->chainLog;

	mov	DWORD PTR hBitsS$1$[rsp], r13d
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 995  :     U32    const matchLowest = isDictionary ? lowestValid : withinWindow;

	cmovne	r8d, ecx
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 71   :     U32 offset_1=rep[0], offset_2=rep[1];

	mov	DWORD PTR offset_2$1$[rsp], ebp

; 75   :     const ZSTD_compressionParameters* const dictCParams =
; 76   :                                      dictMode == ZSTD_dictMatchState ?
; 77   :                                      &dms->cParams : NULL;
; 78   :     const U32* const dictHashLong  = dictMode == ZSTD_dictMatchState ?
; 79   :                                      dms->hashTable : NULL;
; 80   :     const U32* const dictHashSmall = dictMode == ZSTD_dictMatchState ?
; 81   :                                      dms->chainTable : NULL;
; 82   :     const U32 dictStartIndex       = dictMode == ZSTD_dictMatchState ?
; 83   :                                      dms->window.dictLimit : 0;
; 84   :     const BYTE* const dictBase     = dictMode == ZSTD_dictMatchState ?

	mov	r9, QWORD PTR [rax+8]
	add	r11, -8
	mov	rdx, QWORD PTR [rax+48]
	mov	QWORD PTR dictHashLong$1$[rsp], rdx
	mov	rdx, QWORD PTR [rax+64]
	mov	ecx, r8d
	add	rcx, r10
	mov	QWORD PTR dictHashSmall$1$[rsp], rdx

; 85   :                                      dms->window.base : NULL;
; 86   :     const BYTE* const dictStart    = dictMode == ZSTD_dictMatchState ?
; 87   :                                      dictBase + dictStartIndex : NULL;
; 88   :     const BYTE* const dictEnd      = dictMode == ZSTD_dictMatchState ?

	mov	r10, QWORD PTR [rax]
	mov	edx, DWORD PTR [rax+24]
	add	rdx, r9
	mov	QWORD PTR dictBase$1$[rsp], r9

; 90   :     const U32 dictIndexDelta       = dictMode == ZSTD_dictMatchState ?

	sub	r9d, r10d
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 995  :     U32    const matchLowest = isDictionary ? lowestValid : withinWindow;

	mov	DWORD PTR prefixLowestIndex$1$[rsp], r8d
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 90   :     const U32 dictIndexDelta       = dictMode == ZSTD_dictMatchState ?

	add	r9d, r8d
	mov	QWORD PTR prefixLowest$1$[rsp], rcx

; 93   :     const U32 dictHBitsL           = dictMode == ZSTD_dictMatchState ?

	mov	r8d, DWORD PTR [rax+192]

; 94   :                                      dictCParams->hashLog : hBitsL;
; 95   :     const U32 dictHBitsS           = dictMode == ZSTD_dictMatchState ?

	mov	eax, DWORD PTR [rax+188]
	mov	DWORD PTR dictHBitsS$1$[rsp], eax

; 96   :                                      dictCParams->chainLog : hBitsS;
; 97   :     const U32 dictAndPrefixLength  = (U32)((ip - prefixLowest) + (dictEnd - dictStart));
; 98   : 
; 99   :     DEBUGLOG(5, "ZSTD_compressBlock_doubleFast_generic");
; 100  : 
; 101  :     assert(dictMode == ZSTD_noDict || dictMode == ZSTD_dictMatchState);
; 102  : 
; 103  :     /* if a dictionary is attached, it must be within window range */
; 104  :     if (dictMode == ZSTD_dictMatchState) {
; 105  :         assert(ms->window.dictLimit + (1U << cParams->windowLog) >= endIndex);
; 106  :     }
; 107  : 
; 108  :     /* init */
; 109  :     ip += (dictAndPrefixLength == 0);

	mov	eax, ebx
	sub	eax, ecx
	mov	QWORD PTR dictStart$1$[rsp], rdx
	sub	eax, edx
	mov	QWORD PTR dictEnd$1$[rsp], r10
	add	eax, r10d
	mov	DWORD PTR dictIndexDelta$1$[rsp], r9d
	mov	eax, r15d
	mov	DWORD PTR dictHBitsL$1$[rsp], r8d
	sete	al
	lea	r12, QWORD PTR [rax+rbx]
	cmp	r12, r11

; 110  :     if (dictMode == ZSTD_noDict) {
; 111  :         U32 const current = (U32)(ip - base);
; 112  :         U32 const windowLow = ZSTD_getLowestPrefixIndex(ms, current, cParams->windowLog);
; 113  :         U32 const maxRep = current - windowLow;
; 114  :         if (offset_2 > maxRep) offsetSaved = offset_2, offset_2 = 0;
; 115  :         if (offset_1 > maxRep) offsetSaved = offset_1, offset_1 = 0;
; 116  :     }
; 117  :     if (dictMode == ZSTD_dictMatchState) {
; 118  :         /* dictMatchState repCode checks don't currently handle repCode == 0
; 119  :          * disabling. */
; 120  :         assert(offset_1 <= dictAndPrefixLength);
; 121  :         assert(offset_2 <= dictAndPrefixLength);
; 122  :     }
; 123  : 
; 124  :     /* Main Search Loop */
; 125  :     while (ip < ilimit) {   /* < instead of <=, because repcode check at (ip+1) */

	jae	$LN1680@ZSTD_compr
	npad	1
$LL1679@ZSTD_compr:

; 126  :         size_t mLength;
; 127  :         U32 offset;
; 128  :         size_t const h2 = ZSTD_hashPtr(ip, hBitsL, 8);

	mov	r8d, 8
	mov	edx, edi
	mov	rcx, r12
	call	ZSTD_hashPtr

; 129  :         size_t const h = ZSTD_hashPtr(ip, hBitsS, mls);

	mov	r8d, 7
	mov	edx, r13d
	mov	rcx, r12
	mov	rsi, rax
	call	ZSTD_hashPtr

; 130  :         size_t const dictHL = ZSTD_hashPtr(ip, dictHBitsL, 8);

	mov	edx, DWORD PTR dictHBitsL$1$[rsp]
	mov	r8d, 8
	mov	rcx, r12
	mov	rdi, rax
	call	ZSTD_hashPtr

; 131  :         size_t const dictHS = ZSTD_hashPtr(ip, dictHBitsS, mls);

	mov	edx, DWORD PTR dictHBitsS$1$[rsp]
	mov	r8d, 7
	mov	rcx, r12
	mov	QWORD PTR dictHL$1$[rsp], rax
	mov	r13, rax
	call	ZSTD_hashPtr

; 132  :         U32 const current = (U32)(ip-base);
; 133  :         U32 const matchIndexL = hashLong[h2];

	mov	rcx, QWORD PTR hashLong$1$[rsp]
	mov	r11, rax
	mov	r10d, DWORD PTR [rcx+rsi*4]
	lea	r8, QWORD PTR [rcx+rsi*4]

; 134  :         U32 matchIndexS = hashSmall[h];

	mov	rcx, QWORD PTR hashSmall$1$[rsp]
	mov	eax, r12d
	sub	eax, DWORD PTR base$1$[rsp]
	lea	r9, QWORD PTR [rcx+rdi*4]
	mov	edx, DWORD PTR [r9]

; 136  :         const BYTE* match = base + matchIndexS;
; 137  :         const U32 repIndex = current + 1 - offset_1;

	mov	ecx, eax
	sub	ecx, DWORD PTR offset_1$1$[rsp]
	mov	esi, edx
	add	rsi, QWORD PTR base$1$[rsp]
	mov	ebp, r10d
	add	rbp, QWORD PTR base$1$[rsp]
	inc	ecx
	mov	DWORD PTR current$1$[rsp], eax
	mov	DWORD PTR matchIndexS$1$[rsp], edx

; 138  :         const BYTE* repMatch = (dictMode == ZSTD_dictMatchState

	cmp	ecx, DWORD PTR prefixLowestIndex$1$[rsp]
	jae	SHORT $LN1746@ZSTD_compr
	mov	edi, ecx
	sub	edi, DWORD PTR dictIndexDelta$1$[rsp]
	add	rdi, QWORD PTR dictBase$1$[rsp]
	jmp	SHORT $LN1747@ZSTD_compr
$LN1746@ZSTD_compr:
	mov	edi, ecx
	add	rdi, QWORD PTR base$1$[rsp]
$LN1747@ZSTD_compr:

; 139  :                             && repIndex < prefixLowestIndex) ?
; 140  :                                dictBase + (repIndex - dictIndexDelta) :
; 141  :                                base + repIndex;
; 142  :         hashLong[h2] = hashSmall[h] = current;   /* update hash tables */

	mov	DWORD PTR [r9], eax
	mov	DWORD PTR [r8], eax

; 143  : 
; 144  :         /* check dictMatchState repcode */
; 145  :         if (dictMode == ZSTD_dictMatchState
; 146  :             && ((U32)((prefixLowestIndex-1) - repIndex) >= 3 /* intentional underflow */)
; 147  :             && (MEM_read32(repMatch) == MEM_read32(ip+1)) ) {

	mov	r8d, DWORD PTR prefixLowestIndex$1$[rsp]
	mov	eax, r8d
	sub	eax, ecx
	dec	eax
	cmp	eax, 3
	jb	$LN1702@ZSTD_compr
	mov	eax, DWORD PTR [r12+1]
	lea	r13, QWORD PTR [r12+1]
	cmp	DWORD PTR [rdi], eax
	jne	$LN2671@ZSTD_compr

; 148  :             const BYTE* repMatchEnd = repIndex < prefixLowestIndex ? dictEnd : iend;

	mov	rdx, QWORD PTR iend$1$[rsp]
	cmp	ecx, r8d
	mov	rsi, rdx
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	mov	r8, rdx
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 148  :             const BYTE* repMatchEnd = repIndex < prefixLowestIndex ? dictEnd : iend;

	cmovb	rsi, QWORD PTR dictEnd$1$[rsp]

; 149  :             mLength = ZSTD_count_2segments(ip+1+4, repMatch+4, iend, repMatchEnd, prefixLowest) + 4;

	add	r12, 5
	add	rdi, 4
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	mov	rcx, r12
	sub	rcx, rdi
	add	rcx, rsi
	cmp	rcx, rdx

; 591  :     size_t const matchLength = ZSTD_count(ip, match, vEnd);

	mov	rdx, rdi
	cmovb	r8, rcx
	mov	rcx, r12
	call	ZSTD_count
	mov	rbp, rax

; 592  :     if (match + matchLength != mEnd) return matchLength;

	lea	rcx, QWORD PTR [rdi+rax]
	cmp	rcx, rsi
	jne	SHORT $LN2080@ZSTD_compr

; 593  :     DEBUGLOG(7, "ZSTD_count_2segments: found a 2-parts match (current length==%zu)", matchLength);
; 594  :     DEBUGLOG(7, "distance from match beginning to end dictionary = %zi", mEnd - match);
; 595  :     DEBUGLOG(7, "distance from current pos to end buffer = %zi", iEnd - ip);
; 596  :     DEBUGLOG(7, "next byte : ip==%02X, istart==%02X", ip[matchLength], *iStart);
; 597  :     DEBUGLOG(7, "final match length = %zu", matchLength + ZSTD_count(ip+matchLength, iStart, iEnd));
; 598  :     return matchLength + ZSTD_count(ip+matchLength, iStart, iEnd);

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rcx, QWORD PTR [r12+rax]
	mov	rdx, QWORD PTR prefixLowest$1$[rsp]
	call	ZSTD_count
	add	rbp, rax
$LN2080@ZSTD_compr:

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rcx, QWORD PTR [r14+24]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 149  :             mLength = ZSTD_count_2segments(ip+1+4, repMatch+4, iend, repMatchEnd, prefixLowest) + 4;

	lea	rdi, QWORD PTR [rbp+4]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	mov	rbp, QWORD PTR iend$1$[rsp]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 151  :             ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, 0, mLength-MINMATCH);

	lea	rsi, QWORD PTR [rdi-3]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	add	rbp, -32				; ffffffffffffffe0H
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 150  :             ip++;

	mov	r12, r13

; 151  :             ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, 0, mLength-MINMATCH);

	sub	r13, rbx
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	mov	QWORD PTR litLimit_w$1$[rsp], rbp

; 442  :     BYTE const* const litEnd = literals + litLength;

	lea	r8, QWORD PTR [rbx+r13]

; 456  :     if (litEnd <= litLimit_w) {

	cmp	r8, rbp
	ja	SHORT $LN2086@ZSTD_compr
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rbx]
	movups	XMMWORD PTR [rcx], xmm0
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 462  :         if (litLength > 16) {

	cmp	r13, 16
	jbe	SHORT $LN2087@ZSTD_compr

; 463  :             ZSTD_wildcopy(seqStorePtr->lit+16, literals+16, (ptrdiff_t)litLength-16, ZSTD_no_overlap);

	mov	rax, QWORD PTR [r14+24]
	add	rbx, 16
	add	rax, 16
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	lea	rcx, QWORD PTR [rax-16]
	add	rcx, r13
	npad	8
$LL2100@ZSTD_compr:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rbx]

; 289  :             COPY16(op, ip);

	lea	rbx, QWORD PTR [rbx+16]

; 243  :     memcpy(dst, src, 16);

	movups	XMMWORD PTR [rax], xmm0

; 289  :             COPY16(op, ip);

	add	rax, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rax, rcx
	jb	SHORT $LL2100@ZSTD_compr
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	SHORT $LN2087@ZSTD_compr
$LN2086@ZSTD_compr:

; 466  :         ZSTD_safecopyLiterals(seqStorePtr->lit, literals, litEnd, litLimit_w);

	mov	r9, rbp
	mov	rdx, rbx
	call	ZSTD_safecopyLiterals
$LN2087@ZSTD_compr:

; 467  :     }
; 468  :     seqStorePtr->lit += litLength;

	add	QWORD PTR [r14+24], r13
	mov	rcx, QWORD PTR [r14+8]

; 469  : 
; 470  :     /* literal Length */
; 471  :     if (litLength>0xFFFF) {

	cmp	r13, 65535				; 0000ffffH
	jbe	SHORT $LN2607@ZSTD_compr

; 472  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 473  :         seqStorePtr->longLengthID = 1;
; 474  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [r14+72], 1
	sub	rax, QWORD PTR [r14]
	sar	rax, 3
	mov	DWORD PTR [r14+76], eax
$LN2607@ZSTD_compr:

; 475  :     }
; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	WORD PTR [rcx+4], r13w

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	mov	rax, QWORD PTR [r14+8]
	mov	DWORD PTR [rax], 1
	mov	rcx, QWORD PTR [r14+8]

; 480  : 
; 481  :     /* match Length */
; 482  :     if (mlBase>0xFFFF) {

	cmp	rsi, 65535				; 0000ffffH
	jbe	SHORT $LN2608@ZSTD_compr

; 483  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 484  :         seqStorePtr->longLengthID = 2;
; 485  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [r14+72], 2
	sub	rax, QWORD PTR [r14]
	sar	rax, 3
	mov	DWORD PTR [r14+76], eax
$LN2608@ZSTD_compr:

; 487  :     seqStorePtr->sequences[0].matchLength = (U16)mlBase;

	mov	WORD PTR [rcx+6], si
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 152  :             goto _match_stored;

	jmp	$LN2685@ZSTD_compr
$LN2671@ZSTD_compr:

; 143  : 
; 144  :         /* check dictMatchState repcode */
; 145  :         if (dictMode == ZSTD_dictMatchState
; 146  :             && ((U32)((prefixLowestIndex-1) - repIndex) >= 3 /* intentional underflow */)
; 147  :             && (MEM_read32(repMatch) == MEM_read32(ip+1)) ) {

	mov	r13, QWORD PTR dictHL$1$[rsp]
$LN1702@ZSTD_compr:

; 153  :         }
; 154  : 
; 155  :         /* check noDict repcode */
; 156  :         if ( dictMode == ZSTD_noDict
; 157  :           && ((offset_1 > 0) & (MEM_read32(ip+1-offset_1) == MEM_read32(ip+1)))) {
; 158  :             mLength = ZSTD_count(ip+1+4, ip+1+4-offset_1, iend) + 4;
; 159  :             ip++;
; 160  :             ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, 0, mLength-MINMATCH);
; 161  :             goto _match_stored;
; 162  :         }
; 163  : 
; 164  :         if (matchIndexL > prefixLowestIndex) {

	cmp	r10d, r8d
	jbe	$LN1704@ZSTD_compr

; 165  :             /* check prefix long match */
; 166  :             if (MEM_read64(matchLong) == MEM_read64(ip)) {

	mov	rax, QWORD PTR [r12]
	cmp	QWORD PTR [rbp], rax
	jne	$LN2680@ZSTD_compr

; 167  :                 mLength = ZSTD_count(ip+8, matchLong+8, iend) + 8;

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rdx, QWORD PTR [rbp+8]
	lea	rcx, QWORD PTR [r12+8]
	call	ZSTD_count

; 168  :                 offset = (U32)(ip-matchLong);
; 169  :                 while (((ip>anchor) & (matchLong>prefixLowest)) && (ip[-1] == matchLong[-1])) { ip--; matchLong--; mLength++; } /* catch up */

	mov	r9, QWORD PTR prefixLowest$1$[rsp]
	mov	edx, r15d
	mov	ecx, r15d
	mov	r13d, r12d
	sub	r13d, ebp
	cmp	rbp, r9
	lea	rdi, QWORD PTR [rax+8]
	seta	dl
	cmp	r12, rbx
	seta	cl
	test	edx, ecx
	je	$_match_found$2695
	npad	3
$LL1681@ZSTD_compr:
	movzx	eax, BYTE PTR [rbp-1]
	lea	rdx, QWORD PTR [r12-1]
	dec	rbp
	cmp	BYTE PTR [rdx], al
	jne	$_match_found$2695
	inc	rdi
	mov	ecx, r15d
	cmp	rbp, r9
	mov	eax, r15d
	mov	r12, rdx
	seta	cl
	cmp	rdx, rbx
	seta	al
	test	ecx, eax
	jne	SHORT $LL1681@ZSTD_compr

; 170  :                 goto _match_found;

	jmp	$_match_found$2695
$LN1704@ZSTD_compr:

; 171  :             }
; 172  :         } else if (dictMode == ZSTD_dictMatchState) {
; 173  :             /* check dictMatchState long match */
; 174  :             U32 const dictMatchIndexL = dictHashLong[dictHL];

	mov	rax, QWORD PTR dictHashLong$1$[rsp]

; 175  :             const BYTE* dictMatchL = dictBase + dictMatchIndexL;

	mov	r10, QWORD PTR dictBase$1$[rsp]

; 176  :             assert(dictMatchL < dictEnd);
; 177  : 
; 178  :             if (dictMatchL > dictStart && MEM_read64(dictMatchL) == MEM_read64(ip)) {

	mov	r9, QWORD PTR dictStart$1$[rsp]
	mov	eax, DWORD PTR [rax+r13*4]
	mov	DWORD PTR dictMatchIndexL$1$[rsp], eax
	lea	rbp, QWORD PTR [r10+rax]
	cmp	rbp, r9
	jbe	$LN1708@ZSTD_compr
	mov	rax, QWORD PTR [r12]
	cmp	QWORD PTR [rbp], rax
	jne	$LN1708@ZSTD_compr
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	mov	r8, QWORD PTR iend$1$[rsp]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 179  :                 mLength = ZSTD_count_2segments(ip+8, dictMatchL+8, iend, dictEnd, prefixLowest) + 8;

	lea	rdi, QWORD PTR [rbp+8]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	mov	rcx, QWORD PTR dictEnd$1$[rsp]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 179  :                 mLength = ZSTD_count_2segments(ip+8, dictMatchL+8, iend, dictEnd, prefixLowest) + 8;

	lea	r13, QWORD PTR [r12+8]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	sub	rcx, rdi

; 591  :     size_t const matchLength = ZSTD_count(ip, match, vEnd);

	mov	rdx, rdi
	add	rcx, r13
	cmp	rcx, r8
	cmovb	r8, rcx
	mov	rcx, r13
	call	ZSTD_count
	mov	rsi, rax

; 592  :     if (match + matchLength != mEnd) return matchLength;

	lea	rcx, QWORD PTR [rdi+rax]
	cmp	rcx, QWORD PTR dictEnd$1$[rsp]
	jne	SHORT $LN2201@ZSTD_compr

; 593  :     DEBUGLOG(7, "ZSTD_count_2segments: found a 2-parts match (current length==%zu)", matchLength);
; 594  :     DEBUGLOG(7, "distance from match beginning to end dictionary = %zi", mEnd - match);
; 595  :     DEBUGLOG(7, "distance from current pos to end buffer = %zi", iEnd - ip);
; 596  :     DEBUGLOG(7, "next byte : ip==%02X, istart==%02X", ip[matchLength], *iStart);
; 597  :     DEBUGLOG(7, "final match length = %zu", matchLength + ZSTD_count(ip+matchLength, iStart, iEnd));
; 598  :     return matchLength + ZSTD_count(ip+matchLength, iStart, iEnd);

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rcx, QWORD PTR [rax+r13]
	mov	rdx, QWORD PTR prefixLowest$1$[rsp]
	call	ZSTD_count
	add	rsi, rax
$LN2201@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 180  :                 offset = (U32)(current - dictMatchIndexL - dictIndexDelta);

	mov	r13d, DWORD PTR current$1$[rsp]
	lea	rdi, QWORD PTR [rsi+8]
	sub	r13d, DWORD PTR dictMatchIndexL$1$[rsp]
	sub	r13d, DWORD PTR dictIndexDelta$1$[rsp]

; 181  :                 while (((ip>anchor) & (dictMatchL>dictStart)) && (ip[-1] == dictMatchL[-1])) { ip--; dictMatchL--; mLength++; } /* catch up */

	cmp	r12, rbx
	jbe	$_match_found$2695
	mov	r8, QWORD PTR dictStart$1$[rsp]
	npad	4
$LL1683@ZSTD_compr:
	movzx	eax, BYTE PTR [rbp-1]
	lea	rdx, QWORD PTR [r12-1]
	dec	rbp
	cmp	BYTE PTR [rdx], al
	jne	$_match_found$2695
	inc	rdi
	mov	ecx, r15d
	cmp	rbp, r8
	mov	eax, r15d
	mov	r12, rdx
	seta	cl
	cmp	rdx, rbx
	seta	al
	test	ecx, eax
	jne	SHORT $LL1683@ZSTD_compr

; 182  :                 goto _match_found;

	jmp	$_match_found$2695
$LN2680@ZSTD_compr:

; 165  :             /* check prefix long match */
; 166  :             if (MEM_read64(matchLong) == MEM_read64(ip)) {

	mov	r9, QWORD PTR dictStart$1$[rsp]
	mov	r10, QWORD PTR dictBase$1$[rsp]
$LN1708@ZSTD_compr:

; 183  :         }   }
; 184  : 
; 185  :         if (matchIndexS > prefixLowestIndex) {

	cmp	edx, r8d
	jbe	SHORT $LN1709@ZSTD_compr

; 186  :             /* check prefix short match */
; 187  :             if (MEM_read32(match) == MEM_read32(ip)) {

	mov	eax, DWORD PTR [r12]
	cmp	DWORD PTR [rsi], eax
	je	SHORT $_search_next_long$2696
$LN1713@ZSTD_compr:

; 197  :                 goto _search_next_long;
; 198  :         }   }
; 199  : 
; 200  :         ip += ((ip-anchor) >> kSearchStrength) + 1;

	mov	rax, r12
	inc	r12
	sub	rax, rbx
	sar	rax, 8
	add	r12, rax
$LN2676@ZSTD_compr:

; 110  :     if (dictMode == ZSTD_noDict) {
; 111  :         U32 const current = (U32)(ip - base);
; 112  :         U32 const windowLow = ZSTD_getLowestPrefixIndex(ms, current, cParams->windowLog);
; 113  :         U32 const maxRep = current - windowLow;
; 114  :         if (offset_2 > maxRep) offsetSaved = offset_2, offset_2 = 0;
; 115  :         if (offset_1 > maxRep) offsetSaved = offset_1, offset_1 = 0;
; 116  :     }
; 117  :     if (dictMode == ZSTD_dictMatchState) {
; 118  :         /* dictMatchState repCode checks don't currently handle repCode == 0
; 119  :          * disabling. */
; 120  :         assert(offset_1 <= dictAndPrefixLength);
; 121  :         assert(offset_2 <= dictAndPrefixLength);
; 122  :     }
; 123  : 
; 124  :     /* Main Search Loop */
; 125  :     while (ip < ilimit) {   /* < instead of <=, because repcode check at (ip+1) */

	mov	ebp, DWORD PTR offset_2$1$[rsp]
$LN2545@ZSTD_compr:
	mov	rax, QWORD PTR iend$1$[rsp]
	mov	edi, DWORD PTR hBitsL$1$[rsp]
	add	rax, -8
	mov	r13d, DWORD PTR hBitsS$1$[rsp]
	cmp	r12, rax
	jb	$LL1679@ZSTD_compr
	mov	rsi, QWORD PTR rep$[rsp]
$LN1680@ZSTD_compr:

; 309  : 
; 310  :     /* save reps for next block */
; 311  :     rep[0] = offset_1 ? offset_1 : offsetSaved;

	mov	eax, DWORD PTR offset_1$1$[rsp]

; 312  :     rep[1] = offset_2 ? offset_2 : offsetSaved;

	mov	DWORD PTR [rsi+4], ebp

; 353  :     case 7 :
; 354  :         return ZSTD_compressBlock_doubleFast_generic(ms, seqStore, rep, src, srcSize, 7, ZSTD_dictMatchState);

	jmp	$LN2686@ZSTD_compr
$LN1709@ZSTD_compr:

; 192  :             U32 const dictMatchIndexS = dictHashSmall[dictHS];

	mov	rax, QWORD PTR dictHashSmall$1$[rsp]
	mov	ecx, DWORD PTR [rax+r11*4]

; 193  :             match = dictBase + dictMatchIndexS;
; 194  :             matchIndexS = dictMatchIndexS + dictIndexDelta;

	mov	eax, DWORD PTR dictIndexDelta$1$[rsp]
	add	eax, ecx
	mov	DWORD PTR matchIndexS$1$[rsp], eax
	lea	rsi, QWORD PTR [r10+rcx]

; 195  : 
; 196  :             if (match > dictStart && MEM_read32(match) == MEM_read32(ip)) {

	cmp	rsi, r9
	jbe	SHORT $LN1713@ZSTD_compr
	mov	eax, DWORD PTR [r12]
	cmp	DWORD PTR [rsi], eax
	jne	SHORT $LN1713@ZSTD_compr
$_search_next_long$2696:

; 201  : #if defined(__aarch64__)
; 202  :         PREFETCH_L1(ip+256);
; 203  : #endif
; 204  :         continue;
; 205  : 
; 206  : _search_next_long:
; 207  : 
; 208  :         {   size_t const hl3 = ZSTD_hashPtr(ip+1, hBitsL, 8);

	mov	edx, DWORD PTR hBitsL$1$[rsp]
	lea	r13, QWORD PTR [r12+1]
	mov	rcx, r13
	mov	QWORD PTR tv11966[rsp], r13
	mov	r8d, 8
	call	ZSTD_hashPtr

; 209  :             size_t const dictHLNext = ZSTD_hashPtr(ip+1, dictHBitsL, 8);

	mov	edx, DWORD PTR dictHBitsL$1$[rsp]
	mov	r8d, 8
	mov	rcx, r13
	mov	rdi, rax
	call	ZSTD_hashPtr

; 210  :             U32 const matchIndexL3 = hashLong[hl3];

	mov	r9, QWORD PTR hashLong$1$[rsp]

; 211  :             const BYTE* matchL3 = base + matchIndexL3;
; 212  :             hashLong[hl3] = current + 1;

	mov	ecx, DWORD PTR current$1$[rsp]
	mov	edx, DWORD PTR [r9+rdi*4]
	mov	ebp, edx
	add	rbp, QWORD PTR base$1$[rsp]
	inc	ecx
	mov	DWORD PTR [r9+rdi*4], ecx

; 213  : 
; 214  :             /* check prefix long +1 match */
; 215  :             if (matchIndexL3 > prefixLowestIndex) {

	mov	ecx, DWORD PTR prefixLowestIndex$1$[rsp]
	cmp	edx, ecx
	jbe	$LN1714@ZSTD_compr

; 216  :                 if (MEM_read64(matchL3) == MEM_read64(ip+1)) {

	mov	rax, QWORD PTR [r13]
	cmp	QWORD PTR [rbp], rax
	jne	$LN1718@ZSTD_compr

; 217  :                     mLength = ZSTD_count(ip+9, matchL3+8, iend) + 8;

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rdx, QWORD PTR [rbp+8]
	lea	rcx, QWORD PTR [r12+9]
	call	ZSTD_count

; 218  :                     ip++;
; 219  :                     offset = (U32)(ip-matchL3);
; 220  :                     while (((ip>anchor) & (matchL3>prefixLowest)) && (ip[-1] == matchL3[-1])) { ip--; matchL3--; mLength++; } /* catch up */

	mov	r9, QWORD PTR prefixLowest$1$[rsp]
	mov	r12, r13
	sub	r13d, ebp
	mov	ecx, r15d
	cmp	r12, rbx
	lea	rdi, QWORD PTR [rax+8]
	mov	eax, r15d
	seta	cl
	cmp	rbp, r9
	seta	al
	test	ecx, eax
	je	$_match_found$2695
	npad	13
$LL1685@ZSTD_compr:
	movzx	eax, BYTE PTR [rbp-1]
	lea	rdx, QWORD PTR [r12-1]
	dec	rbp
	cmp	BYTE PTR [rdx], al
	jne	$_match_found$2695
	inc	rdi
	mov	ecx, r15d
	cmp	rbp, r9
	mov	eax, r15d
	mov	r12, rdx
	seta	cl
	cmp	rdx, rbx
	seta	al
	test	ecx, eax
	jne	SHORT $LL1685@ZSTD_compr

; 221  :                     goto _match_found;

	jmp	$_match_found$2695
$LN1714@ZSTD_compr:

; 222  :                 }
; 223  :             } else if (dictMode == ZSTD_dictMatchState) {
; 224  :                 /* check dict long +1 match */
; 225  :                 U32 const dictMatchIndexL3 = dictHashLong[dictHLNext];

	mov	rdx, QWORD PTR dictHashLong$1$[rsp]
	mov	eax, DWORD PTR [rdx+rax*4]

; 226  :                 const BYTE* dictMatchL3 = dictBase + dictMatchIndexL3;

	mov	ebp, eax
	mov	DWORD PTR dictMatchIndexL3$1$[rsp], eax
	add	rbp, QWORD PTR dictBase$1$[rsp]

; 227  :                 assert(dictMatchL3 < dictEnd);
; 228  :                 if (dictMatchL3 > dictStart && MEM_read64(dictMatchL3) == MEM_read64(ip+1)) {

	cmp	rbp, QWORD PTR dictStart$1$[rsp]
	jbe	$LN1718@ZSTD_compr
	mov	rax, QWORD PTR [r13]
	cmp	QWORD PTR [rbp], rax
	jne	$LN1718@ZSTD_compr

; 229  :                     mLength = ZSTD_count_2segments(ip+1+8, dictMatchL3+8, iend, dictEnd, prefixLowest) + 8;

	mov	rax, QWORD PTR prefixLowest$1$[rsp]
	lea	rdx, QWORD PTR [rbp+8]
	mov	r9, QWORD PTR dictEnd$1$[rsp]
	lea	rcx, QWORD PTR [r12+9]
	mov	r8, QWORD PTR iend$1$[rsp]
	mov	QWORD PTR [rsp+32], rax
	call	ZSTD_count_2segments

; 230  :                     ip++;

	mov	r12, r13

; 231  :                     offset = (U32)(current + 1 - dictMatchIndexL3 - dictIndexDelta);

	mov	r13d, DWORD PTR current$1$[rsp]
	sub	r13d, DWORD PTR dictMatchIndexL3$1$[rsp]
	sub	r13d, DWORD PTR dictIndexDelta$1$[rsp]
	inc	r13d
	lea	rdi, QWORD PTR [rax+8]

; 232  :                     while (((ip>anchor) & (dictMatchL3>dictStart)) && (ip[-1] == dictMatchL3[-1])) { ip--; dictMatchL3--; mLength++; } /* catch up */

	cmp	QWORD PTR tv11966[rsp], rbx
	jbe	$_match_found$2695
	npad	7
$LL1687@ZSTD_compr:
	movzx	eax, BYTE PTR [rbp-1]
	lea	rdx, QWORD PTR [r12-1]
	dec	rbp
	cmp	BYTE PTR [rdx], al
	jne	$_match_found$2695
	inc	rdi
	mov	ecx, r15d
	cmp	rbp, QWORD PTR dictStart$1$[rsp]
	mov	eax, r15d
	mov	r12, rdx
	seta	cl
	cmp	rdx, rbx
	seta	al
	test	ecx, eax
	jne	SHORT $LL1687@ZSTD_compr

; 233  :                     goto _match_found;

	jmp	$_match_found$2695
$LN1718@ZSTD_compr:

; 234  :         }   }   }
; 235  : 
; 236  :         /* if no long +1 match, explore the short match we found */
; 237  :         if (dictMode == ZSTD_dictMatchState && matchIndexS < prefixLowestIndex) {

	cmp	DWORD PTR matchIndexS$1$[rsp], ecx
	lea	rdx, QWORD PTR [rsi+4]
	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rcx, QWORD PTR [r12+4]
	jae	$LN1719@ZSTD_compr

; 238  :             mLength = ZSTD_count_2segments(ip+4, match+4, iend, dictEnd, prefixLowest) + 4;

	mov	rax, QWORD PTR prefixLowest$1$[rsp]
	mov	r9, QWORD PTR dictEnd$1$[rsp]
	mov	QWORD PTR [rsp+32], rax
	call	ZSTD_count_2segments

; 239  :             offset = (U32)(current - matchIndexS);

	mov	r13d, DWORD PTR current$1$[rsp]

; 240  :             while (((ip>anchor) & (match>dictStart)) && (ip[-1] == match[-1])) { ip--; match--; mLength++; } /* catch up */

	mov	ecx, r15d
	sub	r13d, DWORD PTR matchIndexS$1$[rsp]
	mov	r8, QWORD PTR dictStart$1$[rsp]
	cmp	rsi, r8
	lea	rdi, QWORD PTR [rax+4]
	mov	eax, r15d
	seta	cl
	cmp	r12, rbx
	seta	al
	test	ecx, eax
	je	$_match_found$2695
	npad	10
$LL1689@ZSTD_compr:
	movzx	eax, BYTE PTR [rsi-1]
	lea	rdx, QWORD PTR [r12-1]
	dec	rsi
	cmp	BYTE PTR [rdx], al
	jne	SHORT $_match_found$2695
	inc	rdi
	mov	ecx, r15d
	cmp	rsi, r8
	mov	eax, r15d
	mov	r12, rdx
	seta	cl
	cmp	rdx, rbx
	seta	al
	test	ecx, eax
	jne	SHORT $LL1689@ZSTD_compr

; 241  :         } else {

	jmp	SHORT $_match_found$2695
$LN1719@ZSTD_compr:

; 242  :             mLength = ZSTD_count(ip+4, match+4, iend) + 4;

	call	ZSTD_count

; 243  :             offset = (U32)(ip - match);
; 244  :             while (((ip>anchor) & (match>prefixLowest)) && (ip[-1] == match[-1])) { ip--; match--; mLength++; } /* catch up */

	mov	r9, QWORD PTR prefixLowest$1$[rsp]
	mov	ecx, r15d
	mov	r13d, r12d
	sub	r13d, esi
	cmp	rsi, r9
	lea	rdi, QWORD PTR [rax+4]
	mov	eax, r15d
	seta	cl
	cmp	r12, rbx
	seta	al
	test	ecx, eax
	je	SHORT $_match_found$2695
	npad	8
$LL1691@ZSTD_compr:
	movzx	eax, BYTE PTR [rsi-1]
	lea	rdx, QWORD PTR [r12-1]
	dec	rsi
	cmp	BYTE PTR [rdx], al
	jne	SHORT $_match_found$2695
	inc	rdi
	mov	ecx, r15d
	cmp	rsi, r9
	mov	eax, r15d
	mov	r12, rdx
	seta	cl
	cmp	rdx, rbx
	seta	al
	test	ecx, eax
	jne	SHORT $LL1691@ZSTD_compr
$_match_found$2695:

; 250  :         offset_2 = offset_1;

	mov	eax, DWORD PTR offset_1$1$[rsp]

; 253  :         ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, offset + ZSTD_REP_MOVE, mLength-MINMATCH);

	lea	rdx, QWORD PTR [rdi-3]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	mov	rbp, QWORD PTR iend$1$[rsp]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 253  :         ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, offset + ZSTD_REP_MOVE, mLength-MINMATCH);

	mov	rsi, r12
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rcx, QWORD PTR [r14+24]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 253  :         ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, offset + ZSTD_REP_MOVE, mLength-MINMATCH);

	sub	rsi, rbx
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	add	rbp, -32				; ffffffffffffffe0H
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 250  :         offset_2 = offset_1;

	mov	DWORD PTR offset_2$1$[rsp], eax

; 251  :         offset_1 = offset;

	mov	DWORD PTR offset_1$1$[rsp], r13d
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	mov	QWORD PTR litLimit_w$1$[rsp], rbp

; 442  :     BYTE const* const litEnd = literals + litLength;

	lea	r8, QWORD PTR [rbx+rsi]

; 456  :     if (litEnd <= litLimit_w) {

	cmp	r8, rbp
	ja	SHORT $LN2410@ZSTD_compr
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rbx]
	movups	XMMWORD PTR [rcx], xmm0
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 462  :         if (litLength > 16) {

	cmp	rsi, 16
	jbe	SHORT $LN2411@ZSTD_compr

; 463  :             ZSTD_wildcopy(seqStorePtr->lit+16, literals+16, (ptrdiff_t)litLength-16, ZSTD_no_overlap);

	mov	rax, QWORD PTR [r14+24]
	add	rbx, 16
	add	rax, 16
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	lea	rcx, QWORD PTR [rax-16]
	add	rcx, rsi
$LL2424@ZSTD_compr:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rbx]

; 289  :             COPY16(op, ip);

	lea	rbx, QWORD PTR [rbx+16]

; 243  :     memcpy(dst, src, 16);

	movups	XMMWORD PTR [rax], xmm0

; 289  :             COPY16(op, ip);

	add	rax, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rax, rcx
	jb	SHORT $LL2424@ZSTD_compr
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	SHORT $LN2411@ZSTD_compr
$LN2410@ZSTD_compr:

; 466  :         ZSTD_safecopyLiterals(seqStorePtr->lit, literals, litEnd, litLimit_w);

	mov	r9, rbp
	mov	rdx, rbx
	call	ZSTD_safecopyLiterals
	lea	rdx, QWORD PTR [rdi-3]
$LN2411@ZSTD_compr:

; 467  :     }
; 468  :     seqStorePtr->lit += litLength;

	add	QWORD PTR [r14+24], rsi
	mov	rcx, QWORD PTR [r14+8]

; 469  : 
; 470  :     /* literal Length */
; 471  :     if (litLength>0xFFFF) {

	cmp	rsi, 65535				; 0000ffffH
	jbe	SHORT $LN2609@ZSTD_compr

; 472  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 473  :         seqStorePtr->longLengthID = 1;
; 474  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [r14+72], 1
	sub	rax, QWORD PTR [r14]
	sar	rax, 3
	mov	DWORD PTR [r14+76], eax
$LN2609@ZSTD_compr:

; 475  :     }
; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	WORD PTR [rcx+4], si

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	lea	ecx, DWORD PTR [r13+3]
	mov	rax, QWORD PTR [r14+8]
	mov	DWORD PTR [rax], ecx
	mov	rcx, QWORD PTR [r14+8]

; 480  : 
; 481  :     /* match Length */
; 482  :     if (mlBase>0xFFFF) {

	cmp	rdx, 65535				; 0000ffffH
	jbe	SHORT $LN2610@ZSTD_compr

; 483  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 484  :         seqStorePtr->longLengthID = 2;
; 485  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [r14+72], 2
	sub	rax, QWORD PTR [r14]
	sar	rax, 3
	mov	DWORD PTR [r14+76], eax
$LN2610@ZSTD_compr:

; 487  :     seqStorePtr->sequences[0].matchLength = (U16)mlBase;

	mov	WORD PTR [rcx+6], dx
$LN2685@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 257  :         ip += mLength;

	add	QWORD PTR [r14+8], 8
$_match_stored$2697:

; 258  :         anchor = ip;

	mov	rbp, QWORD PTR iend$1$[rsp]
	lea	rbx, QWORD PTR [rdi+r12]
	add	rbp, -8
	mov	r12, rbx
	cmp	rbx, rbp

; 259  : 
; 260  :         if (ip <= ilimit) {

	ja	$LN2676@ZSTD_compr

; 261  :             /* Complementary insertion */
; 262  :             /* done after iLimit test, as candidates could be > iend-8 */
; 263  :             {   U32 const indexToInsert = current+2;

	mov	ebp, DWORD PTR current$1$[rsp]

; 264  :                 hashLong[ZSTD_hashPtr(base+indexToInsert, hBitsL, 8)] = indexToInsert;

	mov	r8d, 8
	mov	r13, QWORD PTR base$1$[rsp]
	add	ebp, 2
	mov	edx, DWORD PTR hBitsL$1$[rsp]
	mov	esi, ebp
	add	rsi, r13
	mov	rcx, rsi
	call	ZSTD_hashPtr
	mov	rcx, QWORD PTR hashLong$1$[rsp]

; 265  :                 hashLong[ZSTD_hashPtr(ip-2, hBitsL, 8)] = (U32)(ip-2-base);

	mov	edi, ebx
	mov	edx, DWORD PTR hBitsL$1$[rsp]
	sub	edi, r13d
	mov	r8d, 8
	sub	edi, 2
	mov	DWORD PTR [rcx+rax*4], ebp
	lea	rcx, QWORD PTR [rbx-2]
	call	ZSTD_hashPtr
	mov	rcx, QWORD PTR hashLong$1$[rsp]

; 266  :                 hashSmall[ZSTD_hashPtr(base+indexToInsert, hBitsS, mls)] = indexToInsert;

	mov	r8d, 7
	mov	edx, DWORD PTR hBitsS$1$[rsp]
	mov	DWORD PTR [rcx+rax*4], edi
	mov	rcx, rsi
	call	ZSTD_hashPtr
	mov	r13, QWORD PTR hashSmall$1$[rsp]

; 267  :                 hashSmall[ZSTD_hashPtr(ip-1, hBitsS, mls)] = (U32)(ip-1-base);

	lea	rcx, QWORD PTR [rbx-1]
	mov	rsi, QWORD PTR base$1$[rsp]
	mov	edi, ebx
	mov	edx, DWORD PTR hBitsS$1$[rsp]
	sub	edi, esi
	dec	edi
	mov	r8d, 7
	mov	DWORD PTR [r13+rax*4], ebp
	call	ZSTD_hashPtr
	mov	DWORD PTR [r13+rax*4], edi
	mov	r13, QWORD PTR litLimit_w$1$[rsp]
	npad	1
$LL1693@ZSTD_compr:

; 268  :             }
; 269  : 
; 270  :             /* check immediate repcode */
; 271  :             if (dictMode == ZSTD_dictMatchState) {
; 272  :                 while (ip <= ilimit) {
; 273  :                     U32 const current2 = (U32)(ip-base);
; 274  :                     U32 const repIndex2 = current2 - offset_2;

	mov	ebp, DWORD PTR offset_2$1$[rsp]
	mov	edi, r12d

; 275  :                     const BYTE* repMatch2 = dictMode == ZSTD_dictMatchState

	mov	r8d, DWORD PTR prefixLowestIndex$1$[rsp]
	sub	edi, esi
	mov	ecx, edi
	sub	ecx, ebp
	mov	edx, ecx
	cmp	ecx, r8d
	jae	SHORT $LN1748@ZSTD_compr
	mov	eax, DWORD PTR dictIndexDelta$1$[rsp]
	sub	rdx, rax
	add	rdx, QWORD PTR dictBase$1$[rsp]
	jmp	SHORT $LN1749@ZSTD_compr
$LN1748@ZSTD_compr:
	add	rdx, rsi
$LN1749@ZSTD_compr:

; 276  :                         && repIndex2 < prefixLowestIndex ?
; 277  :                             dictBase + repIndex2 - dictIndexDelta :
; 278  :                             base + repIndex2;
; 279  :                     if ( ((U32)((prefixLowestIndex-1) - (U32)repIndex2) >= 3 /* intentional overflow */)
; 280  :                        && (MEM_read32(repMatch2) == MEM_read32(ip)) ) {

	mov	eax, r8d
	sub	eax, ecx
	dec	eax
	cmp	eax, 3
	jb	$LN2545@ZSTD_compr
	mov	eax, DWORD PTR [r12]
	cmp	DWORD PTR [rdx], eax
	jne	$LN2545@ZSTD_compr

; 282  :                         size_t const repLength2 = ZSTD_count_2segments(ip+4, repMatch2+4, iend, repEnd2, prefixLowest) + 4;

	mov	rax, QWORD PTR prefixLowest$1$[rsp]
	cmp	ecx, r8d
	mov	r9, QWORD PTR iend$1$[rsp]
	lea	rcx, QWORD PTR [r12+4]
	cmovb	r9, QWORD PTR dictEnd$1$[rsp]
	add	rdx, 4
	mov	r8, QWORD PTR iend$1$[rsp]
	mov	QWORD PTR [rsp+32], rax
	call	ZSTD_count_2segments
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rcx, QWORD PTR [r14+24]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 282  :                         size_t const repLength2 = ZSTD_count_2segments(ip+4, repMatch2+4, iend, repEnd2, prefixLowest) + 4;

	lea	rsi, QWORD PTR [rax+4]

; 283  :                         U32 tmpOffset = offset_2; offset_2 = offset_1; offset_1 = tmpOffset;   /* swap offset_2 <=> offset_1 */

	mov	eax, DWORD PTR offset_1$1$[rsp]
	mov	DWORD PTR offset_1$1$[rsp], ebp

; 284  :                         ZSTD_storeSeq(seqStore, 0, anchor, iend, 0, repLength2-MINMATCH);

	lea	rbp, QWORD PTR [rsi-3]
	mov	DWORD PTR offset_2$1$[rsp], eax
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 456  :     if (litEnd <= litLimit_w) {

	cmp	rbx, r13
	ja	SHORT $LN2437@ZSTD_compr
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rbx]
	movups	XMMWORD PTR [rcx], xmm0
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	SHORT $LN2438@ZSTD_compr
$LN2437@ZSTD_compr:

; 466  :         ZSTD_safecopyLiterals(seqStorePtr->lit, literals, litEnd, litLimit_w);

	mov	r9, r13
	mov	r8, rbx
	mov	rdx, rbx
	call	ZSTD_safecopyLiterals
$LN2438@ZSTD_compr:

; 475  :     }
; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	rax, QWORD PTR [r14+8]
	mov	WORD PTR [rax+4], r15w

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	mov	rax, QWORD PTR [r14+8]
	mov	DWORD PTR [rax], 1

; 480  : 
; 481  :     /* match Length */
; 482  :     if (mlBase>0xFFFF) {

	cmp	rbp, 65535				; 0000ffffH
	jbe	SHORT $LN2663@ZSTD_compr

; 483  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 484  :         seqStorePtr->longLengthID = 2;
; 485  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, QWORD PTR [r14+8]
	sub	rax, QWORD PTR [r14]
	sar	rax, 3
	mov	DWORD PTR [r14+76], eax
	mov	DWORD PTR [r14+72], 2
$LN2663@ZSTD_compr:

; 487  :     seqStorePtr->sequences[0].matchLength = (U16)mlBase;

	mov	rax, QWORD PTR [r14+8]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 285  :                         hashSmall[ZSTD_hashPtr(ip, hBitsS, mls)] = current2;

	mov	r8d, 7
	mov	edx, DWORD PTR hBitsS$1$[rsp]
	mov	rcx, r12
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 487  :     seqStorePtr->sequences[0].matchLength = (U16)mlBase;

	mov	WORD PTR [rax+6], bp

; 488  : 
; 489  :     seqStorePtr->sequences++;

	add	QWORD PTR [r14+8], 8
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 285  :                         hashSmall[ZSTD_hashPtr(ip, hBitsS, mls)] = current2;

	call	ZSTD_hashPtr
	mov	rcx, QWORD PTR hashSmall$1$[rsp]

; 286  :                         hashLong[ZSTD_hashPtr(ip, hBitsL, 8)] = current2;

	mov	r8d, 8
	mov	edx, DWORD PTR hBitsL$1$[rsp]
	mov	DWORD PTR [rcx+rax*4], edi
	mov	rcx, r12
	call	ZSTD_hashPtr
	mov	rcx, QWORD PTR hashLong$1$[rsp]

; 287  :                         ip += repLength2;

	add	r12, rsi
	mov	rsi, QWORD PTR iend$1$[rsp]
	mov	rbx, r12
	add	rsi, -8
	cmp	r12, rsi
	mov	rsi, QWORD PTR base$1$[rsp]
	mov	DWORD PTR [rcx+rax*4], edi
	jbe	$LL1693@ZSTD_compr

; 288  :                         anchor = ip;
; 289  :                         continue;
; 290  :                     }
; 291  :                     break;
; 292  :             }   }
; 293  : 
; 294  :             if (dictMode == ZSTD_noDict) {
; 295  :                 while ( (ip <= ilimit)
; 296  :                      && ( (offset_2>0)
; 297  :                         & (MEM_read32(ip) == MEM_read32(ip - offset_2)) )) {
; 298  :                     /* store sequence */
; 299  :                     size_t const rLength = ZSTD_count(ip+4, ip+4-offset_2, iend) + 4;
; 300  :                     U32 const tmpOff = offset_2; offset_2 = offset_1; offset_1 = tmpOff;  /* swap offset_2 <=> offset_1 */
; 301  :                     hashSmall[ZSTD_hashPtr(ip, hBitsS, mls)] = (U32)(ip-base);
; 302  :                     hashLong[ZSTD_hashPtr(ip, hBitsL, 8)] = (U32)(ip-base);
; 303  :                     ZSTD_storeSeq(seqStore, 0, anchor, iend, 0, rLength-MINMATCH);
; 304  :                     ip += rLength;
; 305  :                     anchor = ip;
; 306  :                     continue;   /* faster when present ... (?) */
; 307  :         }   }   }
; 308  :     }   /* while (ip < ilimit) */

	jmp	$LN2676@ZSTD_compr
$LN6@ZSTD_compr:

; 61   :     const BYTE* const base = ms->window.base;

	mov	r10, QWORD PTR [r9+8]

; 96   :                                      dictCParams->chainLog : hBitsS;
; 97   :     const U32 dictAndPrefixLength  = (U32)((ip - prefixLowest) + (dictEnd - dictStart));
; 98   : 
; 99   :     DEBUGLOG(5, "ZSTD_compressBlock_doubleFast_generic");
; 100  : 
; 101  :     assert(dictMode == ZSTD_noDict || dictMode == ZSTD_dictMatchState);
; 102  : 
; 103  :     /* if a dictionary is attached, it must be within window range */
; 104  :     if (dictMode == ZSTD_dictMatchState) {
; 105  :         assert(ms->window.dictLimit + (1U << cParams->windowLog) >= endIndex);
; 106  :     }
; 107  : 
; 108  :     /* init */
; 109  :     ip += (dictAndPrefixLength == 0);

	mov	r15d, 0
	mov	rax, QWORD PTR [r9+64]
	sub	r8d, r10d
	mov	r13d, DWORD PTR [r9+188]
	add	r8d, ecx
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 991  :     U32    const maxDistance = 1U << windowLog;

	mov	ecx, DWORD PTR [r9+184]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 71   :     U32 offset_1=rep[0], offset_2=rep[1];

	mov	ebp, DWORD PTR [rsi+4]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 991  :     U32    const maxDistance = 1U << windowLog;

	shl	edx, cl
	mov	ecx, DWORD PTR [r9+24]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 59   :     U32* const hashSmall = ms->chainTable;

	mov	QWORD PTR hashSmall$1$[rsp], rax
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 993  :     U32    const withinWindow = (current - lowestValid > maxDistance) ? current - maxDistance : lowestValid;

	mov	eax, r8d
	sub	eax, ecx
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 61   :     const BYTE* const base = ms->window.base;

	mov	QWORD PTR base$1$[rsp], r10
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	sub	r8d, edx
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 58   :     const U32 hBitsL = cParams->hashLog;

	mov	DWORD PTR hBitsL$1$[rsp], edi
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	cmp	eax, edx
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 60   :     const U32 hBitsS = cParams->chainLog;

	mov	DWORD PTR hBitsS$1$[rsp], r13d

; 71   :     U32 offset_1=rep[0], offset_2=rep[1];

	mov	eax, DWORD PTR [rsi]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	cmovbe	r8d, ecx
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 71   :     U32 offset_1=rep[0], offset_2=rep[1];

	mov	DWORD PTR offset_1$1$[rsp], eax

; 72   :     U32 offsetSaved = 0;
; 73   : 
; 74   :     const ZSTD_matchState_t* const dms = ms->dictMatchState;

	mov	rax, QWORD PTR [r9+176]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	cmp	DWORD PTR [r9+32], 0
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 71   :     U32 offset_1=rep[0], offset_2=rep[1];

	mov	DWORD PTR offset_2$1$[rsp], ebp
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 995  :     U32    const matchLowest = isDictionary ? lowestValid : withinWindow;

	cmovne	r8d, ecx
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 70   :     const BYTE* const ilimit = iend - HASH_READ_SIZE;

	add	r11, -8

; 75   :     const ZSTD_compressionParameters* const dictCParams =
; 76   :                                      dictMode == ZSTD_dictMatchState ?
; 77   :                                      &dms->cParams : NULL;
; 78   :     const U32* const dictHashLong  = dictMode == ZSTD_dictMatchState ?
; 79   :                                      dms->hashTable : NULL;
; 80   :     const U32* const dictHashSmall = dictMode == ZSTD_dictMatchState ?
; 81   :                                      dms->chainTable : NULL;
; 82   :     const U32 dictStartIndex       = dictMode == ZSTD_dictMatchState ?
; 83   :                                      dms->window.dictLimit : 0;
; 84   :     const BYTE* const dictBase     = dictMode == ZSTD_dictMatchState ?

	mov	r9, QWORD PTR [rax+8]
	mov	rdx, QWORD PTR [rax+48]
	mov	QWORD PTR dictHashLong$1$[rsp], rdx
	mov	rdx, QWORD PTR [rax+64]
	mov	ecx, r8d
	add	rcx, r10
	mov	QWORD PTR dictHashSmall$1$[rsp], rdx

; 85   :                                      dms->window.base : NULL;
; 86   :     const BYTE* const dictStart    = dictMode == ZSTD_dictMatchState ?
; 87   :                                      dictBase + dictStartIndex : NULL;
; 88   :     const BYTE* const dictEnd      = dictMode == ZSTD_dictMatchState ?

	mov	r10, QWORD PTR [rax]
	mov	edx, DWORD PTR [rax+24]
	add	rdx, r9
	mov	QWORD PTR dictBase$1$[rsp], r9

; 90   :     const U32 dictIndexDelta       = dictMode == ZSTD_dictMatchState ?

	sub	r9d, r10d
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 995  :     U32    const matchLowest = isDictionary ? lowestValid : withinWindow;

	mov	DWORD PTR prefixLowestIndex$1$[rsp], r8d
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 90   :     const U32 dictIndexDelta       = dictMode == ZSTD_dictMatchState ?

	add	r9d, r8d
	mov	QWORD PTR prefixLowest$1$[rsp], rcx

; 93   :     const U32 dictHBitsL           = dictMode == ZSTD_dictMatchState ?

	mov	r8d, DWORD PTR [rax+192]

; 94   :                                      dictCParams->hashLog : hBitsL;
; 95   :     const U32 dictHBitsS           = dictMode == ZSTD_dictMatchState ?

	mov	eax, DWORD PTR [rax+188]
	mov	DWORD PTR dictHBitsS$1$[rsp], eax

; 96   :                                      dictCParams->chainLog : hBitsS;
; 97   :     const U32 dictAndPrefixLength  = (U32)((ip - prefixLowest) + (dictEnd - dictStart));
; 98   : 
; 99   :     DEBUGLOG(5, "ZSTD_compressBlock_doubleFast_generic");
; 100  : 
; 101  :     assert(dictMode == ZSTD_noDict || dictMode == ZSTD_dictMatchState);
; 102  : 
; 103  :     /* if a dictionary is attached, it must be within window range */
; 104  :     if (dictMode == ZSTD_dictMatchState) {
; 105  :         assert(ms->window.dictLimit + (1U << cParams->windowLog) >= endIndex);
; 106  :     }
; 107  : 
; 108  :     /* init */
; 109  :     ip += (dictAndPrefixLength == 0);

	mov	eax, ebx
	sub	eax, ecx
	mov	QWORD PTR dictStart$1$[rsp], rdx
	sub	eax, edx
	mov	QWORD PTR dictEnd$1$[rsp], r10
	add	eax, r10d
	mov	DWORD PTR dictIndexDelta$1$[rsp], r9d
	mov	eax, r15d
	mov	DWORD PTR dictHBitsL$1$[rsp], r8d
	sete	al
	lea	r12, QWORD PTR [rax+rbx]
	cmp	r12, r11

; 110  :     if (dictMode == ZSTD_noDict) {
; 111  :         U32 const current = (U32)(ip - base);
; 112  :         U32 const windowLow = ZSTD_getLowestPrefixIndex(ms, current, cParams->windowLog);
; 113  :         U32 const maxRep = current - windowLow;
; 114  :         if (offset_2 > maxRep) offsetSaved = offset_2, offset_2 = 0;
; 115  :         if (offset_1 > maxRep) offsetSaved = offset_1, offset_1 = 0;
; 116  :     }
; 117  :     if (dictMode == ZSTD_dictMatchState) {
; 118  :         /* dictMatchState repCode checks don't currently handle repCode == 0
; 119  :          * disabling. */
; 120  :         assert(offset_1 <= dictAndPrefixLength);
; 121  :         assert(offset_2 <= dictAndPrefixLength);
; 122  :     }
; 123  : 
; 124  :     /* Main Search Loop */
; 125  :     while (ip < ilimit) {   /* < instead of <=, because repcode check at (ip+1) */

	jae	$LN1038@ZSTD_compr
$LL1037@ZSTD_compr:

; 126  :         size_t mLength;
; 127  :         U32 offset;
; 128  :         size_t const h2 = ZSTD_hashPtr(ip, hBitsL, 8);

	mov	r8d, 8
	mov	edx, edi
	mov	rcx, r12
	call	ZSTD_hashPtr

; 129  :         size_t const h = ZSTD_hashPtr(ip, hBitsS, mls);

	mov	r8d, 6
	mov	edx, r13d
	mov	rcx, r12
	mov	rsi, rax
	call	ZSTD_hashPtr

; 130  :         size_t const dictHL = ZSTD_hashPtr(ip, dictHBitsL, 8);

	mov	edx, DWORD PTR dictHBitsL$1$[rsp]
	mov	r8d, 8
	mov	rcx, r12
	mov	rdi, rax
	call	ZSTD_hashPtr

; 131  :         size_t const dictHS = ZSTD_hashPtr(ip, dictHBitsS, mls);

	mov	edx, DWORD PTR dictHBitsS$1$[rsp]
	mov	r8d, 6
	mov	rcx, r12
	mov	QWORD PTR dictHL$1$[rsp], rax
	mov	r13, rax
	call	ZSTD_hashPtr

; 132  :         U32 const current = (U32)(ip-base);
; 133  :         U32 const matchIndexL = hashLong[h2];

	mov	rcx, QWORD PTR hashLong$1$[rsp]
	mov	r11, rax
	mov	r10d, DWORD PTR [rcx+rsi*4]
	lea	r8, QWORD PTR [rcx+rsi*4]

; 134  :         U32 matchIndexS = hashSmall[h];

	mov	rcx, QWORD PTR hashSmall$1$[rsp]
	mov	eax, r12d
	sub	eax, DWORD PTR base$1$[rsp]
	lea	r9, QWORD PTR [rcx+rdi*4]
	mov	edx, DWORD PTR [r9]

; 136  :         const BYTE* match = base + matchIndexS;
; 137  :         const U32 repIndex = current + 1 - offset_1;

	mov	ecx, eax
	sub	ecx, DWORD PTR offset_1$1$[rsp]
	mov	esi, edx
	add	rsi, QWORD PTR base$1$[rsp]
	mov	ebp, r10d
	add	rbp, QWORD PTR base$1$[rsp]
	inc	ecx
	mov	DWORD PTR current$1$[rsp], eax
	mov	DWORD PTR matchIndexS$1$[rsp], edx

; 138  :         const BYTE* repMatch = (dictMode == ZSTD_dictMatchState

	cmp	ecx, DWORD PTR prefixLowestIndex$1$[rsp]
	jae	SHORT $LN1104@ZSTD_compr
	mov	edi, ecx
	sub	edi, DWORD PTR dictIndexDelta$1$[rsp]
	add	rdi, QWORD PTR dictBase$1$[rsp]
	jmp	SHORT $LN1105@ZSTD_compr
$LN1104@ZSTD_compr:
	mov	edi, ecx
	add	rdi, QWORD PTR base$1$[rsp]
$LN1105@ZSTD_compr:

; 139  :                             && repIndex < prefixLowestIndex) ?
; 140  :                                dictBase + (repIndex - dictIndexDelta) :
; 141  :                                base + repIndex;
; 142  :         hashLong[h2] = hashSmall[h] = current;   /* update hash tables */

	mov	DWORD PTR [r9], eax
	mov	DWORD PTR [r8], eax

; 143  : 
; 144  :         /* check dictMatchState repcode */
; 145  :         if (dictMode == ZSTD_dictMatchState
; 146  :             && ((U32)((prefixLowestIndex-1) - repIndex) >= 3 /* intentional underflow */)
; 147  :             && (MEM_read32(repMatch) == MEM_read32(ip+1)) ) {

	mov	r8d, DWORD PTR prefixLowestIndex$1$[rsp]
	mov	eax, r8d
	sub	eax, ecx
	dec	eax
	cmp	eax, 3
	jb	$LN1060@ZSTD_compr
	mov	eax, DWORD PTR [r12+1]
	lea	r13, QWORD PTR [r12+1]
	cmp	DWORD PTR [rdi], eax
	jne	$LN2672@ZSTD_compr

; 148  :             const BYTE* repMatchEnd = repIndex < prefixLowestIndex ? dictEnd : iend;

	mov	rdx, QWORD PTR iend$1$[rsp]
	cmp	ecx, r8d
	mov	rsi, rdx
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	mov	r8, rdx
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 148  :             const BYTE* repMatchEnd = repIndex < prefixLowestIndex ? dictEnd : iend;

	cmovb	rsi, QWORD PTR dictEnd$1$[rsp]

; 149  :             mLength = ZSTD_count_2segments(ip+1+4, repMatch+4, iend, repMatchEnd, prefixLowest) + 4;

	add	r12, 5
	add	rdi, 4
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	mov	rcx, r12
	sub	rcx, rdi
	add	rcx, rsi
	cmp	rcx, rdx

; 591  :     size_t const matchLength = ZSTD_count(ip, match, vEnd);

	mov	rdx, rdi
	cmovb	r8, rcx
	mov	rcx, r12
	call	ZSTD_count
	mov	rbp, rax

; 592  :     if (match + matchLength != mEnd) return matchLength;

	lea	rcx, QWORD PTR [rdi+rax]
	cmp	rcx, rsi
	jne	SHORT $LN1438@ZSTD_compr

; 593  :     DEBUGLOG(7, "ZSTD_count_2segments: found a 2-parts match (current length==%zu)", matchLength);
; 594  :     DEBUGLOG(7, "distance from match beginning to end dictionary = %zi", mEnd - match);
; 595  :     DEBUGLOG(7, "distance from current pos to end buffer = %zi", iEnd - ip);
; 596  :     DEBUGLOG(7, "next byte : ip==%02X, istart==%02X", ip[matchLength], *iStart);
; 597  :     DEBUGLOG(7, "final match length = %zu", matchLength + ZSTD_count(ip+matchLength, iStart, iEnd));
; 598  :     return matchLength + ZSTD_count(ip+matchLength, iStart, iEnd);

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rcx, QWORD PTR [r12+rax]
	mov	rdx, QWORD PTR prefixLowest$1$[rsp]
	call	ZSTD_count
	add	rbp, rax
$LN1438@ZSTD_compr:

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rcx, QWORD PTR [r14+24]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 149  :             mLength = ZSTD_count_2segments(ip+1+4, repMatch+4, iend, repMatchEnd, prefixLowest) + 4;

	lea	rdi, QWORD PTR [rbp+4]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	mov	rbp, QWORD PTR iend$1$[rsp]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 151  :             ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, 0, mLength-MINMATCH);

	lea	rsi, QWORD PTR [rdi-3]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	add	rbp, -32				; ffffffffffffffe0H
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 150  :             ip++;

	mov	r12, r13

; 151  :             ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, 0, mLength-MINMATCH);

	sub	r13, rbx
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	mov	QWORD PTR litLimit_w$1$[rsp], rbp

; 442  :     BYTE const* const litEnd = literals + litLength;

	lea	r8, QWORD PTR [rbx+r13]

; 456  :     if (litEnd <= litLimit_w) {

	cmp	r8, rbp
	ja	SHORT $LN1444@ZSTD_compr
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rbx]
	movups	XMMWORD PTR [rcx], xmm0
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 462  :         if (litLength > 16) {

	cmp	r13, 16
	jbe	SHORT $LN1445@ZSTD_compr

; 463  :             ZSTD_wildcopy(seqStorePtr->lit+16, literals+16, (ptrdiff_t)litLength-16, ZSTD_no_overlap);

	mov	rax, QWORD PTR [r14+24]
	add	rbx, 16
	add	rax, 16
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	lea	rcx, QWORD PTR [rax-16]
	add	rcx, r13
	npad	11
$LL1458@ZSTD_compr:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rbx]

; 289  :             COPY16(op, ip);

	lea	rbx, QWORD PTR [rbx+16]

; 243  :     memcpy(dst, src, 16);

	movups	XMMWORD PTR [rax], xmm0

; 289  :             COPY16(op, ip);

	add	rax, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rax, rcx
	jb	SHORT $LL1458@ZSTD_compr
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	SHORT $LN1445@ZSTD_compr
$LN1444@ZSTD_compr:

; 466  :         ZSTD_safecopyLiterals(seqStorePtr->lit, literals, litEnd, litLimit_w);

	mov	r9, rbp
	mov	rdx, rbx
	call	ZSTD_safecopyLiterals
$LN1445@ZSTD_compr:

; 467  :     }
; 468  :     seqStorePtr->lit += litLength;

	add	QWORD PTR [r14+24], r13
	mov	rcx, QWORD PTR [r14+8]

; 469  : 
; 470  :     /* literal Length */
; 471  :     if (litLength>0xFFFF) {

	cmp	r13, 65535				; 0000ffffH
	jbe	SHORT $LN2612@ZSTD_compr

; 472  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 473  :         seqStorePtr->longLengthID = 1;
; 474  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [r14+72], 1
	sub	rax, QWORD PTR [r14]
	sar	rax, 3
	mov	DWORD PTR [r14+76], eax
$LN2612@ZSTD_compr:

; 475  :     }
; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	WORD PTR [rcx+4], r13w

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	mov	rax, QWORD PTR [r14+8]
	mov	DWORD PTR [rax], 1
	mov	rcx, QWORD PTR [r14+8]

; 480  : 
; 481  :     /* match Length */
; 482  :     if (mlBase>0xFFFF) {

	cmp	rsi, 65535				; 0000ffffH
	jbe	SHORT $LN2613@ZSTD_compr

; 483  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 484  :         seqStorePtr->longLengthID = 2;
; 485  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [r14+72], 2
	sub	rax, QWORD PTR [r14]
	sar	rax, 3
	mov	DWORD PTR [r14+76], eax
$LN2613@ZSTD_compr:

; 487  :     seqStorePtr->sequences[0].matchLength = (U16)mlBase;

	mov	WORD PTR [rcx+6], si
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 152  :             goto _match_stored;

	jmp	$LN2687@ZSTD_compr
$LN2672@ZSTD_compr:

; 143  : 
; 144  :         /* check dictMatchState repcode */
; 145  :         if (dictMode == ZSTD_dictMatchState
; 146  :             && ((U32)((prefixLowestIndex-1) - repIndex) >= 3 /* intentional underflow */)
; 147  :             && (MEM_read32(repMatch) == MEM_read32(ip+1)) ) {

	mov	r13, QWORD PTR dictHL$1$[rsp]
$LN1060@ZSTD_compr:

; 153  :         }
; 154  : 
; 155  :         /* check noDict repcode */
; 156  :         if ( dictMode == ZSTD_noDict
; 157  :           && ((offset_1 > 0) & (MEM_read32(ip+1-offset_1) == MEM_read32(ip+1)))) {
; 158  :             mLength = ZSTD_count(ip+1+4, ip+1+4-offset_1, iend) + 4;
; 159  :             ip++;
; 160  :             ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, 0, mLength-MINMATCH);
; 161  :             goto _match_stored;
; 162  :         }
; 163  : 
; 164  :         if (matchIndexL > prefixLowestIndex) {

	cmp	r10d, r8d
	jbe	$LN1062@ZSTD_compr

; 165  :             /* check prefix long match */
; 166  :             if (MEM_read64(matchLong) == MEM_read64(ip)) {

	mov	rax, QWORD PTR [r12]
	cmp	QWORD PTR [rbp], rax
	jne	$LN2681@ZSTD_compr

; 167  :                 mLength = ZSTD_count(ip+8, matchLong+8, iend) + 8;

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rdx, QWORD PTR [rbp+8]
	lea	rcx, QWORD PTR [r12+8]
	call	ZSTD_count

; 168  :                 offset = (U32)(ip-matchLong);
; 169  :                 while (((ip>anchor) & (matchLong>prefixLowest)) && (ip[-1] == matchLong[-1])) { ip--; matchLong--; mLength++; } /* catch up */

	mov	r9, QWORD PTR prefixLowest$1$[rsp]
	mov	edx, r15d
	mov	ecx, r15d
	mov	r13d, r12d
	sub	r13d, ebp
	cmp	rbp, r9
	lea	rdi, QWORD PTR [rax+8]
	seta	dl
	cmp	r12, rbx
	seta	cl
	test	edx, ecx
	je	$_match_found$2698
	npad	3
$LL1039@ZSTD_compr:
	movzx	eax, BYTE PTR [rbp-1]
	lea	rdx, QWORD PTR [r12-1]
	dec	rbp
	cmp	BYTE PTR [rdx], al
	jne	$_match_found$2698
	inc	rdi
	mov	ecx, r15d
	cmp	rbp, r9
	mov	eax, r15d
	mov	r12, rdx
	seta	cl
	cmp	rdx, rbx
	seta	al
	test	ecx, eax
	jne	SHORT $LL1039@ZSTD_compr

; 170  :                 goto _match_found;

	jmp	$_match_found$2698
$LN1062@ZSTD_compr:

; 171  :             }
; 172  :         } else if (dictMode == ZSTD_dictMatchState) {
; 173  :             /* check dictMatchState long match */
; 174  :             U32 const dictMatchIndexL = dictHashLong[dictHL];

	mov	rax, QWORD PTR dictHashLong$1$[rsp]

; 175  :             const BYTE* dictMatchL = dictBase + dictMatchIndexL;

	mov	r10, QWORD PTR dictBase$1$[rsp]

; 176  :             assert(dictMatchL < dictEnd);
; 177  : 
; 178  :             if (dictMatchL > dictStart && MEM_read64(dictMatchL) == MEM_read64(ip)) {

	mov	r9, QWORD PTR dictStart$1$[rsp]
	mov	eax, DWORD PTR [rax+r13*4]
	mov	DWORD PTR dictMatchIndexL$1$[rsp], eax
	lea	rbp, QWORD PTR [r10+rax]
	cmp	rbp, r9
	jbe	$LN1066@ZSTD_compr
	mov	rax, QWORD PTR [r12]
	cmp	QWORD PTR [rbp], rax
	jne	$LN1066@ZSTD_compr
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	mov	r8, QWORD PTR iend$1$[rsp]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 179  :                 mLength = ZSTD_count_2segments(ip+8, dictMatchL+8, iend, dictEnd, prefixLowest) + 8;

	lea	rdi, QWORD PTR [rbp+8]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	mov	rcx, QWORD PTR dictEnd$1$[rsp]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 179  :                 mLength = ZSTD_count_2segments(ip+8, dictMatchL+8, iend, dictEnd, prefixLowest) + 8;

	lea	r13, QWORD PTR [r12+8]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	sub	rcx, rdi

; 591  :     size_t const matchLength = ZSTD_count(ip, match, vEnd);

	mov	rdx, rdi
	add	rcx, r13
	cmp	rcx, r8
	cmovb	r8, rcx
	mov	rcx, r13
	call	ZSTD_count
	mov	rsi, rax

; 592  :     if (match + matchLength != mEnd) return matchLength;

	lea	rcx, QWORD PTR [rax+rdi]
	cmp	rcx, QWORD PTR dictEnd$1$[rsp]
	jne	SHORT $LN1501@ZSTD_compr

; 593  :     DEBUGLOG(7, "ZSTD_count_2segments: found a 2-parts match (current length==%zu)", matchLength);
; 594  :     DEBUGLOG(7, "distance from match beginning to end dictionary = %zi", mEnd - match);
; 595  :     DEBUGLOG(7, "distance from current pos to end buffer = %zi", iEnd - ip);
; 596  :     DEBUGLOG(7, "next byte : ip==%02X, istart==%02X", ip[matchLength], *iStart);
; 597  :     DEBUGLOG(7, "final match length = %zu", matchLength + ZSTD_count(ip+matchLength, iStart, iEnd));
; 598  :     return matchLength + ZSTD_count(ip+matchLength, iStart, iEnd);

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rcx, QWORD PTR [rax+r13]
	mov	rdx, QWORD PTR prefixLowest$1$[rsp]
	call	ZSTD_count
	add	rsi, rax
$LN1501@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 180  :                 offset = (U32)(current - dictMatchIndexL - dictIndexDelta);

	mov	r13d, DWORD PTR current$1$[rsp]
	lea	rdi, QWORD PTR [rsi+8]
	sub	r13d, DWORD PTR dictMatchIndexL$1$[rsp]
	sub	r13d, DWORD PTR dictIndexDelta$1$[rsp]

; 181  :                 while (((ip>anchor) & (dictMatchL>dictStart)) && (ip[-1] == dictMatchL[-1])) { ip--; dictMatchL--; mLength++; } /* catch up */

	cmp	r12, rbx
	jbe	$_match_found$2698
	mov	r8, QWORD PTR dictStart$1$[rsp]
	npad	4
$LL1041@ZSTD_compr:
	movzx	eax, BYTE PTR [rbp-1]
	lea	rdx, QWORD PTR [r12-1]
	dec	rbp
	cmp	BYTE PTR [rdx], al
	jne	$_match_found$2698
	inc	rdi
	mov	ecx, r15d
	cmp	rbp, r8
	mov	eax, r15d
	mov	r12, rdx
	seta	cl
	cmp	rdx, rbx
	seta	al
	test	ecx, eax
	jne	SHORT $LL1041@ZSTD_compr

; 182  :                 goto _match_found;

	jmp	$_match_found$2698
$LN2681@ZSTD_compr:

; 165  :             /* check prefix long match */
; 166  :             if (MEM_read64(matchLong) == MEM_read64(ip)) {

	mov	r9, QWORD PTR dictStart$1$[rsp]
	mov	r10, QWORD PTR dictBase$1$[rsp]
$LN1066@ZSTD_compr:

; 183  :         }   }
; 184  : 
; 185  :         if (matchIndexS > prefixLowestIndex) {

	cmp	edx, r8d
	jbe	SHORT $LN1067@ZSTD_compr

; 186  :             /* check prefix short match */
; 187  :             if (MEM_read32(match) == MEM_read32(ip)) {

	mov	eax, DWORD PTR [r12]
	cmp	DWORD PTR [rsi], eax
	je	SHORT $_search_next_long$2699
$LN1071@ZSTD_compr:

; 197  :                 goto _search_next_long;
; 198  :         }   }
; 199  : 
; 200  :         ip += ((ip-anchor) >> kSearchStrength) + 1;

	mov	rax, r12
	inc	r12
	sub	rax, rbx
	sar	rax, 8
	add	r12, rax
$LN2677@ZSTD_compr:

; 110  :     if (dictMode == ZSTD_noDict) {
; 111  :         U32 const current = (U32)(ip - base);
; 112  :         U32 const windowLow = ZSTD_getLowestPrefixIndex(ms, current, cParams->windowLog);
; 113  :         U32 const maxRep = current - windowLow;
; 114  :         if (offset_2 > maxRep) offsetSaved = offset_2, offset_2 = 0;
; 115  :         if (offset_1 > maxRep) offsetSaved = offset_1, offset_1 = 0;
; 116  :     }
; 117  :     if (dictMode == ZSTD_dictMatchState) {
; 118  :         /* dictMatchState repCode checks don't currently handle repCode == 0
; 119  :          * disabling. */
; 120  :         assert(offset_1 <= dictAndPrefixLength);
; 121  :         assert(offset_2 <= dictAndPrefixLength);
; 122  :     }
; 123  : 
; 124  :     /* Main Search Loop */
; 125  :     while (ip < ilimit) {   /* < instead of <=, because repcode check at (ip+1) */

	mov	ebp, DWORD PTR offset_2$1$[rsp]
$LN2553@ZSTD_compr:
	mov	rax, QWORD PTR iend$1$[rsp]
	mov	edi, DWORD PTR hBitsL$1$[rsp]
	add	rax, -8
	mov	r13d, DWORD PTR hBitsS$1$[rsp]
	cmp	r12, rax
	jb	$LL1037@ZSTD_compr
	mov	rsi, QWORD PTR rep$[rsp]
$LN1038@ZSTD_compr:

; 309  : 
; 310  :     /* save reps for next block */
; 311  :     rep[0] = offset_1 ? offset_1 : offsetSaved;

	mov	eax, DWORD PTR offset_1$1$[rsp]

; 312  :     rep[1] = offset_2 ? offset_2 : offsetSaved;

	mov	DWORD PTR [rsi+4], ebp

; 349  :     case 5 :
; 350  :         return ZSTD_compressBlock_doubleFast_generic(ms, seqStore, rep, src, srcSize, 5, ZSTD_dictMatchState);
; 351  :     case 6 :
; 352  :         return ZSTD_compressBlock_doubleFast_generic(ms, seqStore, rep, src, srcSize, 6, ZSTD_dictMatchState);

	jmp	$LN2686@ZSTD_compr
$LN1067@ZSTD_compr:

; 192  :             U32 const dictMatchIndexS = dictHashSmall[dictHS];

	mov	rax, QWORD PTR dictHashSmall$1$[rsp]
	mov	ecx, DWORD PTR [rax+r11*4]

; 193  :             match = dictBase + dictMatchIndexS;
; 194  :             matchIndexS = dictMatchIndexS + dictIndexDelta;

	mov	eax, DWORD PTR dictIndexDelta$1$[rsp]
	add	eax, ecx
	mov	DWORD PTR matchIndexS$1$[rsp], eax
	lea	rsi, QWORD PTR [r10+rcx]

; 195  : 
; 196  :             if (match > dictStart && MEM_read32(match) == MEM_read32(ip)) {

	cmp	rsi, r9
	jbe	SHORT $LN1071@ZSTD_compr
	mov	eax, DWORD PTR [r12]
	cmp	DWORD PTR [rsi], eax
	jne	SHORT $LN1071@ZSTD_compr
$_search_next_long$2699:

; 201  : #if defined(__aarch64__)
; 202  :         PREFETCH_L1(ip+256);
; 203  : #endif
; 204  :         continue;
; 205  : 
; 206  : _search_next_long:
; 207  : 
; 208  :         {   size_t const hl3 = ZSTD_hashPtr(ip+1, hBitsL, 8);

	mov	edx, DWORD PTR hBitsL$1$[rsp]
	lea	r13, QWORD PTR [r12+1]
	mov	rcx, r13
	mov	QWORD PTR tv11967[rsp], r13
	mov	r8d, 8
	call	ZSTD_hashPtr

; 209  :             size_t const dictHLNext = ZSTD_hashPtr(ip+1, dictHBitsL, 8);

	mov	edx, DWORD PTR dictHBitsL$1$[rsp]
	mov	r8d, 8
	mov	rcx, r13
	mov	rdi, rax
	call	ZSTD_hashPtr

; 210  :             U32 const matchIndexL3 = hashLong[hl3];

	mov	r9, QWORD PTR hashLong$1$[rsp]

; 211  :             const BYTE* matchL3 = base + matchIndexL3;
; 212  :             hashLong[hl3] = current + 1;

	mov	ecx, DWORD PTR current$1$[rsp]
	mov	edx, DWORD PTR [r9+rdi*4]
	mov	ebp, edx
	add	rbp, QWORD PTR base$1$[rsp]
	inc	ecx
	mov	DWORD PTR [r9+rdi*4], ecx

; 213  : 
; 214  :             /* check prefix long +1 match */
; 215  :             if (matchIndexL3 > prefixLowestIndex) {

	mov	ecx, DWORD PTR prefixLowestIndex$1$[rsp]
	cmp	edx, ecx
	jbe	$LN1072@ZSTD_compr

; 216  :                 if (MEM_read64(matchL3) == MEM_read64(ip+1)) {

	mov	rax, QWORD PTR [r13]
	cmp	QWORD PTR [rbp], rax
	jne	$LN1076@ZSTD_compr

; 217  :                     mLength = ZSTD_count(ip+9, matchL3+8, iend) + 8;

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rdx, QWORD PTR [rbp+8]
	lea	rcx, QWORD PTR [r12+9]
	call	ZSTD_count

; 218  :                     ip++;
; 219  :                     offset = (U32)(ip-matchL3);
; 220  :                     while (((ip>anchor) & (matchL3>prefixLowest)) && (ip[-1] == matchL3[-1])) { ip--; matchL3--; mLength++; } /* catch up */

	mov	r9, QWORD PTR prefixLowest$1$[rsp]
	mov	r12, r13
	sub	r13d, ebp
	mov	ecx, r15d
	cmp	rbp, r9
	lea	rdi, QWORD PTR [rax+8]
	mov	eax, r15d
	seta	cl
	cmp	r12, rbx
	seta	al
	test	ecx, eax
	je	$_match_found$2698
	npad	10
$LL1043@ZSTD_compr:
	movzx	eax, BYTE PTR [rbp-1]
	lea	rdx, QWORD PTR [r12-1]
	dec	rbp
	cmp	BYTE PTR [rdx], al
	jne	$_match_found$2698
	inc	rdi
	mov	ecx, r15d
	cmp	rbp, r9
	mov	eax, r15d
	mov	r12, rdx
	seta	cl
	cmp	rdx, rbx
	seta	al
	test	ecx, eax
	jne	SHORT $LL1043@ZSTD_compr

; 221  :                     goto _match_found;

	jmp	$_match_found$2698
$LN1072@ZSTD_compr:

; 222  :                 }
; 223  :             } else if (dictMode == ZSTD_dictMatchState) {
; 224  :                 /* check dict long +1 match */
; 225  :                 U32 const dictMatchIndexL3 = dictHashLong[dictHLNext];

	mov	rdx, QWORD PTR dictHashLong$1$[rsp]
	mov	eax, DWORD PTR [rdx+rax*4]

; 226  :                 const BYTE* dictMatchL3 = dictBase + dictMatchIndexL3;

	mov	ebp, eax
	mov	DWORD PTR dictMatchIndexL3$1$[rsp], eax
	add	rbp, QWORD PTR dictBase$1$[rsp]

; 227  :                 assert(dictMatchL3 < dictEnd);
; 228  :                 if (dictMatchL3 > dictStart && MEM_read64(dictMatchL3) == MEM_read64(ip+1)) {

	cmp	rbp, QWORD PTR dictStart$1$[rsp]
	jbe	$LN1076@ZSTD_compr
	mov	rax, QWORD PTR [r13]
	cmp	QWORD PTR [rbp], rax
	jne	$LN1076@ZSTD_compr

; 229  :                     mLength = ZSTD_count_2segments(ip+1+8, dictMatchL3+8, iend, dictEnd, prefixLowest) + 8;

	mov	rax, QWORD PTR prefixLowest$1$[rsp]
	lea	rdx, QWORD PTR [rbp+8]
	mov	r9, QWORD PTR dictEnd$1$[rsp]
	lea	rcx, QWORD PTR [r12+9]
	mov	r8, QWORD PTR iend$1$[rsp]
	mov	QWORD PTR [rsp+32], rax
	call	ZSTD_count_2segments

; 230  :                     ip++;

	mov	r12, r13

; 231  :                     offset = (U32)(current + 1 - dictMatchIndexL3 - dictIndexDelta);

	mov	r13d, DWORD PTR current$1$[rsp]
	sub	r13d, DWORD PTR dictMatchIndexL3$1$[rsp]
	sub	r13d, DWORD PTR dictIndexDelta$1$[rsp]
	inc	r13d
	lea	rdi, QWORD PTR [rax+8]

; 232  :                     while (((ip>anchor) & (dictMatchL3>dictStart)) && (ip[-1] == dictMatchL3[-1])) { ip--; dictMatchL3--; mLength++; } /* catch up */

	cmp	QWORD PTR tv11967[rsp], rbx
	jbe	$_match_found$2698
	mov	r8, QWORD PTR dictStart$1$[rsp]
$LL1045@ZSTD_compr:
	movzx	eax, BYTE PTR [rbp-1]
	lea	rdx, QWORD PTR [r12-1]
	dec	rbp
	cmp	BYTE PTR [rdx], al
	jne	$_match_found$2698
	inc	rdi
	mov	ecx, r15d
	cmp	rdx, rbx
	mov	eax, r15d
	mov	r12, rdx
	seta	cl
	cmp	rbp, r8
	seta	al
	test	ecx, eax
	jne	SHORT $LL1045@ZSTD_compr

; 233  :                     goto _match_found;

	jmp	$_match_found$2698
$LN1076@ZSTD_compr:

; 234  :         }   }   }
; 235  : 
; 236  :         /* if no long +1 match, explore the short match we found */
; 237  :         if (dictMode == ZSTD_dictMatchState && matchIndexS < prefixLowestIndex) {

	cmp	DWORD PTR matchIndexS$1$[rsp], ecx
	lea	rdx, QWORD PTR [rsi+4]
	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rcx, QWORD PTR [r12+4]
	jae	$LN1077@ZSTD_compr

; 238  :             mLength = ZSTD_count_2segments(ip+4, match+4, iend, dictEnd, prefixLowest) + 4;

	mov	rax, QWORD PTR prefixLowest$1$[rsp]
	mov	r9, QWORD PTR dictEnd$1$[rsp]
	mov	QWORD PTR [rsp+32], rax
	call	ZSTD_count_2segments

; 239  :             offset = (U32)(current - matchIndexS);

	mov	r13d, DWORD PTR current$1$[rsp]

; 240  :             while (((ip>anchor) & (match>dictStart)) && (ip[-1] == match[-1])) { ip--; match--; mLength++; } /* catch up */

	mov	ecx, r15d
	sub	r13d, DWORD PTR matchIndexS$1$[rsp]
	mov	r8, QWORD PTR dictStart$1$[rsp]
	cmp	r12, rbx
	lea	rdi, QWORD PTR [rax+4]
	mov	eax, r15d
	seta	cl
	cmp	rsi, r8
	seta	al
	test	ecx, eax
	je	$_match_found$2698
	npad	11
$LL1047@ZSTD_compr:
	movzx	eax, BYTE PTR [rsi-1]
	lea	rdx, QWORD PTR [r12-1]
	dec	rsi
	cmp	BYTE PTR [rdx], al
	jne	SHORT $_match_found$2698
	inc	rdi
	mov	ecx, r15d
	cmp	rsi, r8
	mov	eax, r15d
	mov	r12, rdx
	seta	cl
	cmp	rdx, rbx
	seta	al
	test	ecx, eax
	jne	SHORT $LL1047@ZSTD_compr

; 241  :         } else {

	jmp	SHORT $_match_found$2698
$LN1077@ZSTD_compr:

; 242  :             mLength = ZSTD_count(ip+4, match+4, iend) + 4;

	call	ZSTD_count

; 243  :             offset = (U32)(ip - match);
; 244  :             while (((ip>anchor) & (match>prefixLowest)) && (ip[-1] == match[-1])) { ip--; match--; mLength++; } /* catch up */

	mov	r9, QWORD PTR prefixLowest$1$[rsp]
	mov	ecx, r15d
	mov	r13d, r12d
	sub	r13d, esi
	cmp	r12, rbx
	lea	rdi, QWORD PTR [rax+4]
	mov	eax, r15d
	seta	cl
	cmp	rsi, r9
	seta	al
	test	ecx, eax
	je	SHORT $_match_found$2698
	npad	8
$LL1049@ZSTD_compr:
	movzx	eax, BYTE PTR [rsi-1]
	lea	rdx, QWORD PTR [r12-1]
	dec	rsi
	cmp	BYTE PTR [rdx], al
	jne	SHORT $_match_found$2698
	inc	rdi
	mov	ecx, r15d
	cmp	rsi, r9
	mov	eax, r15d
	mov	r12, rdx
	seta	cl
	cmp	rdx, rbx
	seta	al
	test	ecx, eax
	jne	SHORT $LL1049@ZSTD_compr
$_match_found$2698:

; 250  :         offset_2 = offset_1;

	mov	eax, DWORD PTR offset_1$1$[rsp]

; 253  :         ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, offset + ZSTD_REP_MOVE, mLength-MINMATCH);

	lea	rdx, QWORD PTR [rdi-3]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	mov	rbp, QWORD PTR iend$1$[rsp]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 253  :         ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, offset + ZSTD_REP_MOVE, mLength-MINMATCH);

	mov	rsi, r12
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rcx, QWORD PTR [r14+24]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 253  :         ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, offset + ZSTD_REP_MOVE, mLength-MINMATCH);

	sub	rsi, rbx
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	add	rbp, -32				; ffffffffffffffe0H
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 250  :         offset_2 = offset_1;

	mov	DWORD PTR offset_2$1$[rsp], eax

; 251  :         offset_1 = offset;

	mov	DWORD PTR offset_1$1$[rsp], r13d
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	mov	QWORD PTR litLimit_w$1$[rsp], rbp

; 442  :     BYTE const* const litEnd = literals + litLength;

	lea	r8, QWORD PTR [rbx+rsi]

; 456  :     if (litEnd <= litLimit_w) {

	cmp	r8, rbp
	ja	SHORT $LN1602@ZSTD_compr
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rbx]
	movups	XMMWORD PTR [rcx], xmm0
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 462  :         if (litLength > 16) {

	cmp	rsi, 16
	jbe	SHORT $LN1603@ZSTD_compr

; 463  :             ZSTD_wildcopy(seqStorePtr->lit+16, literals+16, (ptrdiff_t)litLength-16, ZSTD_no_overlap);

	mov	rax, QWORD PTR [r14+24]
	add	rbx, 16
	add	rax, 16
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	lea	rcx, QWORD PTR [rax-16]
	add	rcx, rsi
$LL1616@ZSTD_compr:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rbx]

; 289  :             COPY16(op, ip);

	lea	rbx, QWORD PTR [rbx+16]

; 243  :     memcpy(dst, src, 16);

	movups	XMMWORD PTR [rax], xmm0

; 289  :             COPY16(op, ip);

	add	rax, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rax, rcx
	jb	SHORT $LL1616@ZSTD_compr
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	SHORT $LN1603@ZSTD_compr
$LN1602@ZSTD_compr:

; 466  :         ZSTD_safecopyLiterals(seqStorePtr->lit, literals, litEnd, litLimit_w);

	mov	r9, rbp
	mov	rdx, rbx
	call	ZSTD_safecopyLiterals
	lea	rdx, QWORD PTR [rdi-3]
$LN1603@ZSTD_compr:

; 467  :     }
; 468  :     seqStorePtr->lit += litLength;

	add	QWORD PTR [r14+24], rsi
	mov	rcx, QWORD PTR [r14+8]

; 469  : 
; 470  :     /* literal Length */
; 471  :     if (litLength>0xFFFF) {

	cmp	rsi, 65535				; 0000ffffH
	jbe	SHORT $LN2614@ZSTD_compr

; 472  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 473  :         seqStorePtr->longLengthID = 1;
; 474  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [r14+72], 1
	sub	rax, QWORD PTR [r14]
	sar	rax, 3
	mov	DWORD PTR [r14+76], eax
$LN2614@ZSTD_compr:

; 475  :     }
; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	WORD PTR [rcx+4], si

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	lea	ecx, DWORD PTR [r13+3]
	mov	rax, QWORD PTR [r14+8]
	mov	DWORD PTR [rax], ecx
	mov	rcx, QWORD PTR [r14+8]

; 480  : 
; 481  :     /* match Length */
; 482  :     if (mlBase>0xFFFF) {

	cmp	rdx, 65535				; 0000ffffH
	jbe	SHORT $LN2615@ZSTD_compr

; 483  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 484  :         seqStorePtr->longLengthID = 2;
; 485  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [r14+72], 2
	sub	rax, QWORD PTR [r14]
	sar	rax, 3
	mov	DWORD PTR [r14+76], eax
$LN2615@ZSTD_compr:

; 487  :     seqStorePtr->sequences[0].matchLength = (U16)mlBase;

	mov	WORD PTR [rcx+6], dx
$LN2687@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 257  :         ip += mLength;

	add	QWORD PTR [r14+8], 8
$_match_stored$2700:

; 258  :         anchor = ip;

	mov	rbp, QWORD PTR iend$1$[rsp]
	lea	rbx, QWORD PTR [rdi+r12]
	add	rbp, -8
	mov	r12, rbx
	cmp	rbx, rbp

; 259  : 
; 260  :         if (ip <= ilimit) {

	ja	$LN2677@ZSTD_compr

; 261  :             /* Complementary insertion */
; 262  :             /* done after iLimit test, as candidates could be > iend-8 */
; 263  :             {   U32 const indexToInsert = current+2;

	mov	ebp, DWORD PTR current$1$[rsp]

; 264  :                 hashLong[ZSTD_hashPtr(base+indexToInsert, hBitsL, 8)] = indexToInsert;

	mov	r8d, 8
	mov	r13, QWORD PTR base$1$[rsp]
	add	ebp, 2
	mov	edx, DWORD PTR hBitsL$1$[rsp]
	mov	esi, ebp
	add	rsi, r13
	mov	rcx, rsi
	call	ZSTD_hashPtr
	mov	rcx, QWORD PTR hashLong$1$[rsp]

; 265  :                 hashLong[ZSTD_hashPtr(ip-2, hBitsL, 8)] = (U32)(ip-2-base);

	mov	edi, ebx
	mov	edx, DWORD PTR hBitsL$1$[rsp]
	sub	edi, r13d
	mov	r8d, 8
	sub	edi, 2
	mov	DWORD PTR [rcx+rax*4], ebp
	lea	rcx, QWORD PTR [rbx-2]
	call	ZSTD_hashPtr
	mov	rcx, QWORD PTR hashLong$1$[rsp]

; 266  :                 hashSmall[ZSTD_hashPtr(base+indexToInsert, hBitsS, mls)] = indexToInsert;

	mov	r8d, 6
	mov	edx, DWORD PTR hBitsS$1$[rsp]
	mov	DWORD PTR [rcx+rax*4], edi
	mov	rcx, rsi
	call	ZSTD_hashPtr
	mov	r13, QWORD PTR hashSmall$1$[rsp]

; 267  :                 hashSmall[ZSTD_hashPtr(ip-1, hBitsS, mls)] = (U32)(ip-1-base);

	lea	rcx, QWORD PTR [rbx-1]
	mov	rsi, QWORD PTR base$1$[rsp]
	mov	edi, ebx
	mov	edx, DWORD PTR hBitsS$1$[rsp]
	sub	edi, esi
	dec	edi
	mov	r8d, 6
	mov	DWORD PTR [r13+rax*4], ebp
	call	ZSTD_hashPtr
	mov	DWORD PTR [r13+rax*4], edi
	mov	r13, QWORD PTR litLimit_w$1$[rsp]
	npad	1
$LL1051@ZSTD_compr:

; 268  :             }
; 269  : 
; 270  :             /* check immediate repcode */
; 271  :             if (dictMode == ZSTD_dictMatchState) {
; 272  :                 while (ip <= ilimit) {
; 273  :                     U32 const current2 = (U32)(ip-base);
; 274  :                     U32 const repIndex2 = current2 - offset_2;

	mov	ebp, DWORD PTR offset_2$1$[rsp]
	mov	edi, r12d

; 275  :                     const BYTE* repMatch2 = dictMode == ZSTD_dictMatchState

	mov	r10d, DWORD PTR prefixLowestIndex$1$[rsp]
	sub	edi, esi
	mov	ecx, edi
	sub	ecx, ebp
	mov	r8d, ecx
	cmp	ecx, r10d
	jae	SHORT $LN1106@ZSTD_compr
	mov	eax, DWORD PTR dictIndexDelta$1$[rsp]
	mov	rdx, QWORD PTR dictBase$1$[rsp]
	sub	rdx, rax
	add	rdx, r8
	jmp	SHORT $LN1107@ZSTD_compr
$LN1106@ZSTD_compr:
	lea	rdx, QWORD PTR [rsi+rcx]
$LN1107@ZSTD_compr:

; 276  :                         && repIndex2 < prefixLowestIndex ?
; 277  :                             dictBase + repIndex2 - dictIndexDelta :
; 278  :                             base + repIndex2;
; 279  :                     if ( ((U32)((prefixLowestIndex-1) - (U32)repIndex2) >= 3 /* intentional overflow */)
; 280  :                        && (MEM_read32(repMatch2) == MEM_read32(ip)) ) {

	mov	eax, r10d
	sub	eax, ecx
	dec	eax
	cmp	eax, 3
	jb	$LN2553@ZSTD_compr
	mov	eax, DWORD PTR [r12]
	cmp	DWORD PTR [rdx], eax
	jne	$LN2553@ZSTD_compr

; 281  :                         const BYTE* const repEnd2 = repIndex2 < prefixLowestIndex ? dictEnd : iend;

	mov	r8, QWORD PTR iend$1$[rsp]
	cmp	ecx, r10d

; 282  :                         size_t const repLength2 = ZSTD_count_2segments(ip+4, repMatch2+4, iend, repEnd2, prefixLowest) + 4;

	mov	rax, QWORD PTR prefixLowest$1$[rsp]
	lea	rcx, QWORD PTR [r12+4]
	mov	r9, r8
	mov	QWORD PTR [rsp+32], rax
	cmovb	r9, QWORD PTR dictEnd$1$[rsp]
	add	rdx, 4
	call	ZSTD_count_2segments
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rcx, QWORD PTR [r14+24]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 282  :                         size_t const repLength2 = ZSTD_count_2segments(ip+4, repMatch2+4, iend, repEnd2, prefixLowest) + 4;

	lea	rsi, QWORD PTR [rax+4]

; 283  :                         U32 tmpOffset = offset_2; offset_2 = offset_1; offset_1 = tmpOffset;   /* swap offset_2 <=> offset_1 */

	mov	eax, DWORD PTR offset_1$1$[rsp]
	mov	DWORD PTR offset_1$1$[rsp], ebp

; 284  :                         ZSTD_storeSeq(seqStore, 0, anchor, iend, 0, repLength2-MINMATCH);

	lea	rbp, QWORD PTR [rsi-3]
	mov	DWORD PTR offset_2$1$[rsp], eax
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 456  :     if (litEnd <= litLimit_w) {

	cmp	rbx, r13
	ja	SHORT $LN1629@ZSTD_compr
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rbx]
	movups	XMMWORD PTR [rcx], xmm0
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	SHORT $LN1630@ZSTD_compr
$LN1629@ZSTD_compr:

; 466  :         ZSTD_safecopyLiterals(seqStorePtr->lit, literals, litEnd, litLimit_w);

	mov	r9, r13
	mov	r8, rbx
	mov	rdx, rbx
	call	ZSTD_safecopyLiterals
$LN1630@ZSTD_compr:

; 475  :     }
; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	rax, QWORD PTR [r14+8]
	mov	WORD PTR [rax+4], r15w

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	mov	rax, QWORD PTR [r14+8]
	mov	DWORD PTR [rax], 1

; 480  : 
; 481  :     /* match Length */
; 482  :     if (mlBase>0xFFFF) {

	cmp	rbp, 65535				; 0000ffffH
	jbe	SHORT $LN2664@ZSTD_compr

; 483  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 484  :         seqStorePtr->longLengthID = 2;
; 485  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, QWORD PTR [r14+8]
	sub	rax, QWORD PTR [r14]
	sar	rax, 3
	mov	DWORD PTR [r14+76], eax
	mov	DWORD PTR [r14+72], 2
$LN2664@ZSTD_compr:

; 487  :     seqStorePtr->sequences[0].matchLength = (U16)mlBase;

	mov	rax, QWORD PTR [r14+8]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 285  :                         hashSmall[ZSTD_hashPtr(ip, hBitsS, mls)] = current2;

	mov	r8d, 6
	mov	edx, DWORD PTR hBitsS$1$[rsp]
	mov	rcx, r12
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 487  :     seqStorePtr->sequences[0].matchLength = (U16)mlBase;

	mov	WORD PTR [rax+6], bp

; 488  : 
; 489  :     seqStorePtr->sequences++;

	add	QWORD PTR [r14+8], 8
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 285  :                         hashSmall[ZSTD_hashPtr(ip, hBitsS, mls)] = current2;

	call	ZSTD_hashPtr
	mov	rcx, QWORD PTR hashSmall$1$[rsp]

; 286  :                         hashLong[ZSTD_hashPtr(ip, hBitsL, 8)] = current2;

	mov	r8d, 8
	mov	edx, DWORD PTR hBitsL$1$[rsp]
	mov	DWORD PTR [rcx+rax*4], edi
	mov	rcx, r12
	call	ZSTD_hashPtr
	mov	rcx, QWORD PTR hashLong$1$[rsp]

; 287  :                         ip += repLength2;

	add	r12, rsi
	mov	rsi, QWORD PTR iend$1$[rsp]
	mov	rbx, r12
	add	rsi, -8
	cmp	r12, rsi
	mov	rsi, QWORD PTR base$1$[rsp]
	mov	DWORD PTR [rcx+rax*4], edi
	jbe	$LL1051@ZSTD_compr

; 288  :                         anchor = ip;
; 289  :                         continue;
; 290  :                     }
; 291  :                     break;
; 292  :             }   }
; 293  : 
; 294  :             if (dictMode == ZSTD_noDict) {
; 295  :                 while ( (ip <= ilimit)
; 296  :                      && ( (offset_2>0)
; 297  :                         & (MEM_read32(ip) == MEM_read32(ip - offset_2)) )) {
; 298  :                     /* store sequence */
; 299  :                     size_t const rLength = ZSTD_count(ip+4, ip+4-offset_2, iend) + 4;
; 300  :                     U32 const tmpOff = offset_2; offset_2 = offset_1; offset_1 = tmpOff;  /* swap offset_2 <=> offset_1 */
; 301  :                     hashSmall[ZSTD_hashPtr(ip, hBitsS, mls)] = (U32)(ip-base);
; 302  :                     hashLong[ZSTD_hashPtr(ip, hBitsL, 8)] = (U32)(ip-base);
; 303  :                     ZSTD_storeSeq(seqStore, 0, anchor, iend, 0, rLength-MINMATCH);
; 304  :                     ip += rLength;
; 305  :                     anchor = ip;
; 306  :                     continue;   /* faster when present ... (?) */
; 307  :         }   }   }
; 308  :     }   /* while (ip < ilimit) */

	jmp	$LN2677@ZSTD_compr
$LN5@ZSTD_compr:

; 61   :     const BYTE* const base = ms->window.base;

	mov	rbp, QWORD PTR [r9+8]

; 96   :                                      dictCParams->chainLog : hBitsS;
; 97   :     const U32 dictAndPrefixLength  = (U32)((ip - prefixLowest) + (dictEnd - dictStart));
; 98   : 
; 99   :     DEBUGLOG(5, "ZSTD_compressBlock_doubleFast_generic");
; 100  : 
; 101  :     assert(dictMode == ZSTD_noDict || dictMode == ZSTD_dictMatchState);
; 102  : 
; 103  :     /* if a dictionary is attached, it must be within window range */
; 104  :     if (dictMode == ZSTD_dictMatchState) {
; 105  :         assert(ms->window.dictLimit + (1U << cParams->windowLog) >= endIndex);
; 106  :     }
; 107  : 
; 108  :     /* init */
; 109  :     ip += (dictAndPrefixLength == 0);

	mov	r15d, 0
	mov	rax, QWORD PTR [r9+64]
	sub	r8d, ebp
	mov	r13d, DWORD PTR [rsi+4]
	add	r8d, ecx
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 991  :     U32    const maxDistance = 1U << windowLog;

	mov	ecx, DWORD PTR [r9+184]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 59   :     U32* const hashSmall = ms->chainTable;

	mov	QWORD PTR hashSmall$1$[rsp], rax

; 60   :     const U32 hBitsS = cParams->chainLog;

	mov	eax, DWORD PTR [r9+188]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 991  :     U32    const maxDistance = 1U << windowLog;

	shl	edx, cl
	mov	ecx, DWORD PTR [r9+24]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 60   :     const U32 hBitsS = cParams->chainLog;

	mov	DWORD PTR hBitsS$1$[rsp], eax
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 993  :     U32    const withinWindow = (current - lowestValid > maxDistance) ? current - maxDistance : lowestValid;

	mov	eax, r8d
	sub	eax, ecx
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 58   :     const U32 hBitsL = cParams->hashLog;

	mov	DWORD PTR hBitsL$1$[rsp], edi
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	sub	r8d, edx
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 61   :     const BYTE* const base = ms->window.base;

	mov	QWORD PTR base$1$[rsp], rbp
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	cmp	eax, edx
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 71   :     U32 offset_1=rep[0], offset_2=rep[1];

	mov	DWORD PTR offset_2$1$[rsp], r13d
	mov	eax, DWORD PTR [rsi]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	cmovbe	r8d, ecx
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 71   :     U32 offset_1=rep[0], offset_2=rep[1];

	mov	DWORD PTR offset_1$1$[rsp], eax

; 72   :     U32 offsetSaved = 0;
; 73   : 
; 74   :     const ZSTD_matchState_t* const dms = ms->dictMatchState;

	mov	rax, QWORD PTR [r9+176]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	cmp	DWORD PTR [r9+32], 0

; 995  :     U32    const matchLowest = isDictionary ? lowestValid : withinWindow;

	cmovne	r8d, ecx
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 70   :     const BYTE* const ilimit = iend - HASH_READ_SIZE;

	add	r11, -8

; 75   :     const ZSTD_compressionParameters* const dictCParams =
; 76   :                                      dictMode == ZSTD_dictMatchState ?
; 77   :                                      &dms->cParams : NULL;
; 78   :     const U32* const dictHashLong  = dictMode == ZSTD_dictMatchState ?
; 79   :                                      dms->hashTable : NULL;
; 80   :     const U32* const dictHashSmall = dictMode == ZSTD_dictMatchState ?
; 81   :                                      dms->chainTable : NULL;
; 82   :     const U32 dictStartIndex       = dictMode == ZSTD_dictMatchState ?
; 83   :                                      dms->window.dictLimit : 0;
; 84   :     const BYTE* const dictBase     = dictMode == ZSTD_dictMatchState ?

	mov	r9, QWORD PTR [rax+8]

; 85   :                                      dms->window.base : NULL;
; 86   :     const BYTE* const dictStart    = dictMode == ZSTD_dictMatchState ?
; 87   :                                      dictBase + dictStartIndex : NULL;
; 88   :     const BYTE* const dictEnd      = dictMode == ZSTD_dictMatchState ?

	mov	r10, QWORD PTR [rax]
	mov	rdx, QWORD PTR [rax+48]
	mov	ecx, r8d
	add	rcx, rbp
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 995  :     U32    const matchLowest = isDictionary ? lowestValid : withinWindow;

	mov	DWORD PTR prefixLowestIndex$1$[rsp], r8d
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 90   :     const U32 dictIndexDelta       = dictMode == ZSTD_dictMatchState ?

	sub	r8d, r10d
	mov	QWORD PTR dictHashLong$1$[rsp], rdx
	mov	rdx, QWORD PTR [rax+64]
	add	r8d, r9d
	mov	QWORD PTR dictHashSmall$1$[rsp], rdx
	mov	edx, DWORD PTR [rax+24]
	add	rdx, r9
	mov	DWORD PTR dictIndexDelta$1$[rsp], r8d

; 93   :     const U32 dictHBitsL           = dictMode == ZSTD_dictMatchState ?

	mov	r8d, DWORD PTR [rax+192]

; 94   :                                      dictCParams->hashLog : hBitsL;
; 95   :     const U32 dictHBitsS           = dictMode == ZSTD_dictMatchState ?

	mov	eax, DWORD PTR [rax+188]
	mov	DWORD PTR dictHBitsS$1$[rsp], eax

; 96   :                                      dictCParams->chainLog : hBitsS;
; 97   :     const U32 dictAndPrefixLength  = (U32)((ip - prefixLowest) + (dictEnd - dictStart));
; 98   : 
; 99   :     DEBUGLOG(5, "ZSTD_compressBlock_doubleFast_generic");
; 100  : 
; 101  :     assert(dictMode == ZSTD_noDict || dictMode == ZSTD_dictMatchState);
; 102  : 
; 103  :     /* if a dictionary is attached, it must be within window range */
; 104  :     if (dictMode == ZSTD_dictMatchState) {
; 105  :         assert(ms->window.dictLimit + (1U << cParams->windowLog) >= endIndex);
; 106  :     }
; 107  : 
; 108  :     /* init */
; 109  :     ip += (dictAndPrefixLength == 0);

	mov	eax, ebx
	sub	eax, ecx
	mov	QWORD PTR prefixLowest$1$[rsp], rcx
	sub	eax, edx
	mov	QWORD PTR dictBase$1$[rsp], r9
	add	eax, r10d
	mov	QWORD PTR dictStart$1$[rsp], rdx
	mov	eax, r15d
	mov	QWORD PTR dictEnd$1$[rsp], r10
	sete	al
	mov	DWORD PTR dictHBitsL$1$[rsp], r8d
	lea	r12, QWORD PTR [rax+rbx]
	cmp	r12, r11

; 110  :     if (dictMode == ZSTD_noDict) {
; 111  :         U32 const current = (U32)(ip - base);
; 112  :         U32 const windowLow = ZSTD_getLowestPrefixIndex(ms, current, cParams->windowLog);
; 113  :         U32 const maxRep = current - windowLow;
; 114  :         if (offset_2 > maxRep) offsetSaved = offset_2, offset_2 = 0;
; 115  :         if (offset_1 > maxRep) offsetSaved = offset_1, offset_1 = 0;
; 116  :     }
; 117  :     if (dictMode == ZSTD_dictMatchState) {
; 118  :         /* dictMatchState repCode checks don't currently handle repCode == 0
; 119  :          * disabling. */
; 120  :         assert(offset_1 <= dictAndPrefixLength);
; 121  :         assert(offset_2 <= dictAndPrefixLength);
; 122  :     }
; 123  : 
; 124  :     /* Main Search Loop */
; 125  :     while (ip < ilimit) {   /* < instead of <=, because repcode check at (ip+1) */

	jae	$LN485@ZSTD_compr
	npad	15
$LL484@ZSTD_compr:

; 126  :         size_t mLength;
; 127  :         U32 offset;
; 128  :         size_t const h2 = ZSTD_hashPtr(ip, hBitsL, 8);

	mov	r8d, 8
	mov	edx, edi
	mov	rcx, r12
	call	ZSTD_hashPtr

; 129  :         size_t const h = ZSTD_hashPtr(ip, hBitsS, mls);

	mov	edx, DWORD PTR hBitsS$1$[rsp]
	mov	r8d, 5
	mov	rcx, r12
	mov	rsi, rax
	call	ZSTD_hashPtr

; 130  :         size_t const dictHL = ZSTD_hashPtr(ip, dictHBitsL, 8);

	mov	edx, DWORD PTR dictHBitsL$1$[rsp]
	mov	r8d, 8
	mov	rcx, r12
	mov	rdi, rax
	call	ZSTD_hashPtr

; 131  :         size_t const dictHS = ZSTD_hashPtr(ip, dictHBitsS, mls);

	mov	edx, DWORD PTR dictHBitsS$1$[rsp]
	mov	r8d, 5
	mov	rcx, r12
	mov	QWORD PTR dictHL$1$[rsp], rax
	call	ZSTD_hashPtr

; 132  :         U32 const current = (U32)(ip-base);
; 133  :         U32 const matchIndexL = hashLong[h2];

	mov	rcx, QWORD PTR hashLong$1$[rsp]
	mov	r11, rax
	mov	r10d, DWORD PTR [rcx+rsi*4]
	lea	r9, QWORD PTR [rcx+rsi*4]

; 134  :         U32 matchIndexS = hashSmall[h];

	mov	rcx, QWORD PTR hashSmall$1$[rsp]
	mov	eax, r12d
	sub	eax, ebp

; 135  :         const BYTE* matchLong = base + matchIndexL;

	add	rbp, r10
	mov	DWORD PTR current$1$[rsp], eax
	mov	r8d, DWORD PTR [rcx+rdi*4]

; 136  :         const BYTE* match = base + matchIndexS;
; 137  :         const U32 repIndex = current + 1 - offset_1;

	mov	ecx, eax
	sub	ecx, DWORD PTR offset_1$1$[rsp]
	mov	esi, r8d
	add	rsi, QWORD PTR base$1$[rsp]
	inc	ecx
	mov	DWORD PTR matchIndexS$1$[rsp], r8d

; 138  :         const BYTE* repMatch = (dictMode == ZSTD_dictMatchState

	cmp	ecx, DWORD PTR prefixLowestIndex$1$[rsp]
	jae	SHORT $LN551@ZSTD_compr
	mov	edx, ecx
	sub	edx, DWORD PTR dictIndexDelta$1$[rsp]
	add	rdx, QWORD PTR dictBase$1$[rsp]
	jmp	SHORT $LN552@ZSTD_compr
$LN551@ZSTD_compr:
	mov	edx, ecx
	add	rdx, QWORD PTR base$1$[rsp]
$LN552@ZSTD_compr:

; 139  :                             && repIndex < prefixLowestIndex) ?
; 140  :                                dictBase + (repIndex - dictIndexDelta) :
; 141  :                                base + repIndex;
; 142  :         hashLong[h2] = hashSmall[h] = current;   /* update hash tables */

	mov	r13, QWORD PTR hashSmall$1$[rsp]
	mov	DWORD PTR [r13+rdi*4], eax

; 143  : 
; 144  :         /* check dictMatchState repcode */
; 145  :         if (dictMode == ZSTD_dictMatchState
; 146  :             && ((U32)((prefixLowestIndex-1) - repIndex) >= 3 /* intentional underflow */)
; 147  :             && (MEM_read32(repMatch) == MEM_read32(ip+1)) ) {

	mov	edi, DWORD PTR prefixLowestIndex$1$[rsp]
	mov	r13, QWORD PTR dictHL$1$[rsp]
	mov	DWORD PTR [r9], eax
	mov	eax, edi
	sub	eax, ecx
	dec	eax
	cmp	eax, 3
	jb	$LN507@ZSTD_compr
	mov	eax, DWORD PTR [r12+1]
	lea	r13, QWORD PTR [r12+1]
	cmp	DWORD PTR [rdx], eax
	jne	$LN2673@ZSTD_compr

; 148  :             const BYTE* repMatchEnd = repIndex < prefixLowestIndex ? dictEnd : iend;

	mov	rbp, QWORD PTR iend$1$[rsp]
	cmp	ecx, edi

; 149  :             mLength = ZSTD_count_2segments(ip+1+4, repMatch+4, iend, repMatchEnd, prefixLowest) + 4;

	mov	rax, QWORD PTR prefixLowest$1$[rsp]
	lea	rcx, QWORD PTR [r12+5]
	mov	r9, rbp
	mov	QWORD PTR [rsp+32], rax
	cmovb	r9, QWORD PTR dictEnd$1$[rsp]
	mov	r8, rbp
	add	rdx, 4
	call	ZSTD_count_2segments
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rcx, QWORD PTR [r14+24]
	lea	r9, QWORD PTR [rbp-32]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 150  :             ip++;

	mov	r12, r13

; 151  :             ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, 0, mLength-MINMATCH);

	sub	r13, rbx
	lea	rdi, QWORD PTR [rax+4]
	lea	rsi, QWORD PTR [rdi-3]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	lea	r8, QWORD PTR [rbx+r13]

; 456  :     if (litEnd <= litLimit_w) {

	cmp	r8, r9
	ja	SHORT $LN886@ZSTD_compr
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rbx]
	movups	XMMWORD PTR [rcx], xmm0
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 462  :         if (litLength > 16) {

	cmp	r13, 16
	jbe	SHORT $LN887@ZSTD_compr

; 463  :             ZSTD_wildcopy(seqStorePtr->lit+16, literals+16, (ptrdiff_t)litLength-16, ZSTD_no_overlap);

	mov	rax, QWORD PTR [r14+24]
	add	rbx, 16
	add	rax, 16
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	lea	rcx, QWORD PTR [rax-16]
	add	rcx, r13
$LL900@ZSTD_compr:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rbx]

; 289  :             COPY16(op, ip);

	lea	rbx, QWORD PTR [rbx+16]

; 243  :     memcpy(dst, src, 16);

	movups	XMMWORD PTR [rax], xmm0

; 289  :             COPY16(op, ip);

	add	rax, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rax, rcx
	jb	SHORT $LL900@ZSTD_compr
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	SHORT $LN887@ZSTD_compr
$LN886@ZSTD_compr:

; 466  :         ZSTD_safecopyLiterals(seqStorePtr->lit, literals, litEnd, litLimit_w);

	mov	rdx, rbx
	call	ZSTD_safecopyLiterals
$LN887@ZSTD_compr:

; 467  :     }
; 468  :     seqStorePtr->lit += litLength;

	add	QWORD PTR [r14+24], r13
	mov	rcx, QWORD PTR [r14+8]

; 469  : 
; 470  :     /* literal Length */
; 471  :     if (litLength>0xFFFF) {

	cmp	r13, 65535				; 0000ffffH
	jbe	SHORT $LN2617@ZSTD_compr

; 472  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 473  :         seqStorePtr->longLengthID = 1;
; 474  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [r14+72], 1
	sub	rax, QWORD PTR [r14]
	sar	rax, 3
	mov	DWORD PTR [r14+76], eax
$LN2617@ZSTD_compr:

; 475  :     }
; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	WORD PTR [rcx+4], r13w

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	mov	rax, QWORD PTR [r14+8]
	mov	DWORD PTR [rax], 1
	mov	rcx, QWORD PTR [r14+8]

; 480  : 
; 481  :     /* match Length */
; 482  :     if (mlBase>0xFFFF) {

	cmp	rsi, 65535				; 0000ffffH
	jbe	SHORT $LN2618@ZSTD_compr

; 483  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 484  :         seqStorePtr->longLengthID = 2;
; 485  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [r14+72], 2
	sub	rax, QWORD PTR [r14]
	sar	rax, 3
	mov	DWORD PTR [r14+76], eax
$LN2618@ZSTD_compr:

; 487  :     seqStorePtr->sequences[0].matchLength = (U16)mlBase;

	mov	WORD PTR [rcx+6], si
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 152  :             goto _match_stored;

	jmp	$LN2688@ZSTD_compr
$LN2673@ZSTD_compr:

; 143  : 
; 144  :         /* check dictMatchState repcode */
; 145  :         if (dictMode == ZSTD_dictMatchState
; 146  :             && ((U32)((prefixLowestIndex-1) - repIndex) >= 3 /* intentional underflow */)
; 147  :             && (MEM_read32(repMatch) == MEM_read32(ip+1)) ) {

	mov	r13, QWORD PTR dictHL$1$[rsp]
$LN507@ZSTD_compr:

; 153  :         }
; 154  : 
; 155  :         /* check noDict repcode */
; 156  :         if ( dictMode == ZSTD_noDict
; 157  :           && ((offset_1 > 0) & (MEM_read32(ip+1-offset_1) == MEM_read32(ip+1)))) {
; 158  :             mLength = ZSTD_count(ip+1+4, ip+1+4-offset_1, iend) + 4;
; 159  :             ip++;
; 160  :             ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, 0, mLength-MINMATCH);
; 161  :             goto _match_stored;
; 162  :         }
; 163  : 
; 164  :         if (matchIndexL > prefixLowestIndex) {

	cmp	r10d, edi
	jbe	$LN509@ZSTD_compr

; 165  :             /* check prefix long match */
; 166  :             if (MEM_read64(matchLong) == MEM_read64(ip)) {

	mov	rax, QWORD PTR [r12]
	cmp	QWORD PTR [rbp], rax
	jne	$LN2679@ZSTD_compr

; 167  :                 mLength = ZSTD_count(ip+8, matchLong+8, iend) + 8;

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rdx, QWORD PTR [rbp+8]
	lea	rcx, QWORD PTR [r12+8]
	call	ZSTD_count

; 168  :                 offset = (U32)(ip-matchLong);
; 169  :                 while (((ip>anchor) & (matchLong>prefixLowest)) && (ip[-1] == matchLong[-1])) { ip--; matchLong--; mLength++; } /* catch up */

	mov	r10, QWORD PTR prefixLowest$1$[rsp]
	mov	ecx, r15d
	mov	r13d, r12d
	sub	r13d, ebp
	cmp	rbp, r10
	lea	rdi, QWORD PTR [rax+8]
	mov	eax, r15d
	seta	cl
	cmp	r12, rbx
	seta	al
	test	ecx, eax
	je	$_match_found$2701
	npad	6
$LL486@ZSTD_compr:
	movzx	eax, BYTE PTR [rbp-1]
	lea	rdx, QWORD PTR [r12-1]
	dec	rbp
	cmp	BYTE PTR [rdx], al
	jne	$_match_found$2701
	inc	rdi
	mov	ecx, r15d
	cmp	rbp, r10
	mov	eax, r15d
	mov	r12, rdx
	seta	cl
	cmp	rdx, rbx
	seta	al
	test	ecx, eax
	jne	SHORT $LL486@ZSTD_compr

; 170  :                 goto _match_found;

	jmp	$_match_found$2701
$LN509@ZSTD_compr:

; 171  :             }
; 172  :         } else if (dictMode == ZSTD_dictMatchState) {
; 173  :             /* check dictMatchState long match */
; 174  :             U32 const dictMatchIndexL = dictHashLong[dictHL];

	mov	rax, QWORD PTR dictHashLong$1$[rsp]

; 175  :             const BYTE* dictMatchL = dictBase + dictMatchIndexL;

	mov	r9, QWORD PTR dictBase$1$[rsp]

; 176  :             assert(dictMatchL < dictEnd);
; 177  : 
; 178  :             if (dictMatchL > dictStart && MEM_read64(dictMatchL) == MEM_read64(ip)) {

	mov	rdx, QWORD PTR dictStart$1$[rsp]
	mov	eax, DWORD PTR [rax+r13*4]
	mov	DWORD PTR dictMatchIndexL$1$[rsp], eax
	lea	rbp, QWORD PTR [r9+rax]
	cmp	rbp, rdx
	jbe	$LN513@ZSTD_compr
	mov	rax, QWORD PTR [r12]
	cmp	QWORD PTR [rbp], rax
	jne	$LN513@ZSTD_compr

; 179  :                 mLength = ZSTD_count_2segments(ip+8, dictMatchL+8, iend, dictEnd, prefixLowest) + 8;

	mov	rax, QWORD PTR prefixLowest$1$[rsp]
	lea	rdx, QWORD PTR [rbp+8]
	mov	r9, QWORD PTR dictEnd$1$[rsp]
	lea	rcx, QWORD PTR [r12+8]
	mov	r8, QWORD PTR iend$1$[rsp]
	mov	QWORD PTR [rsp+32], rax
	call	ZSTD_count_2segments

; 180  :                 offset = (U32)(current - dictMatchIndexL - dictIndexDelta);

	mov	r13d, DWORD PTR current$1$[rsp]
	sub	r13d, DWORD PTR dictMatchIndexL$1$[rsp]
	sub	r13d, DWORD PTR dictIndexDelta$1$[rsp]
	lea	rdi, QWORD PTR [rax+8]

; 181  :                 while (((ip>anchor) & (dictMatchL>dictStart)) && (ip[-1] == dictMatchL[-1])) { ip--; dictMatchL--; mLength++; } /* catch up */

	cmp	r12, rbx
	jbe	$_match_found$2701
	mov	r8, QWORD PTR dictStart$1$[rsp]
	npad	1
$LL488@ZSTD_compr:
	movzx	eax, BYTE PTR [rbp-1]
	lea	rdx, QWORD PTR [r12-1]
	dec	rbp
	cmp	BYTE PTR [rdx], al
	jne	$_match_found$2701
	inc	rdi
	mov	ecx, r15d
	cmp	rdx, rbx
	mov	eax, r15d
	mov	r12, rdx
	seta	cl
	cmp	rbp, r8
	seta	al
	test	ecx, eax
	jne	SHORT $LL488@ZSTD_compr

; 182  :                 goto _match_found;

	jmp	$_match_found$2701
$LN2679@ZSTD_compr:

; 165  :             /* check prefix long match */
; 166  :             if (MEM_read64(matchLong) == MEM_read64(ip)) {

	mov	rdx, QWORD PTR dictStart$1$[rsp]
	mov	r9, QWORD PTR dictBase$1$[rsp]
$LN513@ZSTD_compr:

; 183  :         }   }
; 184  : 
; 185  :         if (matchIndexS > prefixLowestIndex) {

	cmp	r8d, edi
	jbe	SHORT $LN514@ZSTD_compr

; 186  :             /* check prefix short match */
; 187  :             if (MEM_read32(match) == MEM_read32(ip)) {

	mov	eax, DWORD PTR [r12]
	cmp	DWORD PTR [rsi], eax
	je	$_search_next_long$2702
$LN518@ZSTD_compr:

; 197  :                 goto _search_next_long;
; 198  :         }   }
; 199  : 
; 200  :         ip += ((ip-anchor) >> kSearchStrength) + 1;

	mov	rax, r12
	inc	r12
	sub	rax, rbx
	sar	rax, 8
	add	r12, rax
$LN2675@ZSTD_compr:

; 110  :     if (dictMode == ZSTD_noDict) {
; 111  :         U32 const current = (U32)(ip - base);
; 112  :         U32 const windowLow = ZSTD_getLowestPrefixIndex(ms, current, cParams->windowLog);
; 113  :         U32 const maxRep = current - windowLow;
; 114  :         if (offset_2 > maxRep) offsetSaved = offset_2, offset_2 = 0;
; 115  :         if (offset_1 > maxRep) offsetSaved = offset_1, offset_1 = 0;
; 116  :     }
; 117  :     if (dictMode == ZSTD_dictMatchState) {
; 118  :         /* dictMatchState repCode checks don't currently handle repCode == 0
; 119  :          * disabling. */
; 120  :         assert(offset_1 <= dictAndPrefixLength);
; 121  :         assert(offset_2 <= dictAndPrefixLength);
; 122  :     }
; 123  : 
; 124  :     /* Main Search Loop */
; 125  :     while (ip < ilimit) {   /* < instead of <=, because repcode check at (ip+1) */

	mov	r13d, DWORD PTR offset_2$1$[rsp]
$LN2689@ZSTD_compr:
	mov	rbp, QWORD PTR base$1$[rsp]
$LN2561@ZSTD_compr:
	mov	rax, QWORD PTR iend$1$[rsp]
	mov	edi, DWORD PTR hBitsL$1$[rsp]
	add	rax, -8
	cmp	r12, rax
	jb	$LL484@ZSTD_compr
	mov	rsi, QWORD PTR rep$[rsp]
$LN485@ZSTD_compr:

; 309  : 
; 310  :     /* save reps for next block */
; 311  :     rep[0] = offset_1 ? offset_1 : offsetSaved;

	mov	eax, DWORD PTR offset_1$1$[rsp]
$LN2684@ZSTD_compr:

; 355  :     }
; 356  : }

	mov	DWORD PTR [rsi+4], r13d
$LN2686@ZSTD_compr:
	mov	DWORD PTR [rsi], eax
	mov	rax, QWORD PTR iend$1$[rsp]
	sub	rax, rbx
	mov	rbx, QWORD PTR [rsp+280]
	add	rsp, 208				; 000000d0H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
$LN514@ZSTD_compr:

; 192  :             U32 const dictMatchIndexS = dictHashSmall[dictHS];

	mov	rax, QWORD PTR dictHashSmall$1$[rsp]
	mov	ecx, DWORD PTR [rax+r11*4]

; 193  :             match = dictBase + dictMatchIndexS;
; 194  :             matchIndexS = dictMatchIndexS + dictIndexDelta;

	mov	eax, DWORD PTR dictIndexDelta$1$[rsp]
	add	eax, ecx
	mov	DWORD PTR matchIndexS$1$[rsp], eax
	lea	rsi, QWORD PTR [r9+rcx]

; 195  : 
; 196  :             if (match > dictStart && MEM_read32(match) == MEM_read32(ip)) {

	cmp	rsi, rdx
	jbe	$LN518@ZSTD_compr
	mov	eax, DWORD PTR [r12]
	cmp	DWORD PTR [rsi], eax
	jne	$LN518@ZSTD_compr
$_search_next_long$2702:

; 201  : #if defined(__aarch64__)
; 202  :         PREFETCH_L1(ip+256);
; 203  : #endif
; 204  :         continue;
; 205  : 
; 206  : _search_next_long:
; 207  : 
; 208  :         {   size_t const hl3 = ZSTD_hashPtr(ip+1, hBitsL, 8);

	mov	edx, DWORD PTR hBitsL$1$[rsp]
	lea	r13, QWORD PTR [r12+1]
	mov	rcx, r13
	mov	QWORD PTR tv11980[rsp], r13
	mov	r8d, 8
	call	ZSTD_hashPtr

; 209  :             size_t const dictHLNext = ZSTD_hashPtr(ip+1, dictHBitsL, 8);

	mov	edx, DWORD PTR dictHBitsL$1$[rsp]
	mov	r8d, 8
	mov	rcx, r13
	mov	rdi, rax
	call	ZSTD_hashPtr

; 210  :             U32 const matchIndexL3 = hashLong[hl3];

	mov	r9, QWORD PTR hashLong$1$[rsp]

; 211  :             const BYTE* matchL3 = base + matchIndexL3;
; 212  :             hashLong[hl3] = current + 1;

	mov	ecx, DWORD PTR current$1$[rsp]
	mov	edx, DWORD PTR [r9+rdi*4]
	mov	ebp, edx
	add	rbp, QWORD PTR base$1$[rsp]
	inc	ecx
	mov	DWORD PTR [r9+rdi*4], ecx

; 213  : 
; 214  :             /* check prefix long +1 match */
; 215  :             if (matchIndexL3 > prefixLowestIndex) {

	mov	ecx, DWORD PTR prefixLowestIndex$1$[rsp]
	cmp	edx, ecx
	jbe	$LN519@ZSTD_compr

; 216  :                 if (MEM_read64(matchL3) == MEM_read64(ip+1)) {

	mov	rax, QWORD PTR [r13]
	cmp	QWORD PTR [rbp], rax
	jne	$LN523@ZSTD_compr

; 217  :                     mLength = ZSTD_count(ip+9, matchL3+8, iend) + 8;

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rdx, QWORD PTR [rbp+8]
	lea	rcx, QWORD PTR [r12+9]
	call	ZSTD_count

; 218  :                     ip++;
; 219  :                     offset = (U32)(ip-matchL3);
; 220  :                     while (((ip>anchor) & (matchL3>prefixLowest)) && (ip[-1] == matchL3[-1])) { ip--; matchL3--; mLength++; } /* catch up */

	mov	r10, QWORD PTR prefixLowest$1$[rsp]
	mov	r12, r13
	sub	r13d, ebp
	mov	ecx, r15d
	cmp	rbp, r10
	lea	rdi, QWORD PTR [rax+8]
	mov	eax, r15d
	seta	cl
	cmp	r12, rbx
	seta	al
	test	ecx, eax
	je	$_match_found$2701
	npad	9
$LL490@ZSTD_compr:
	movzx	eax, BYTE PTR [rbp-1]
	lea	rdx, QWORD PTR [r12-1]
	dec	rbp
	cmp	BYTE PTR [rdx], al
	jne	$_match_found$2701
	inc	rdi
	mov	ecx, r15d
	cmp	rbp, r10
	mov	eax, r15d
	mov	r12, rdx
	seta	cl
	cmp	rdx, rbx
	seta	al
	test	ecx, eax
	jne	SHORT $LL490@ZSTD_compr

; 221  :                     goto _match_found;

	jmp	$_match_found$2701
$LN519@ZSTD_compr:

; 222  :                 }
; 223  :             } else if (dictMode == ZSTD_dictMatchState) {
; 224  :                 /* check dict long +1 match */
; 225  :                 U32 const dictMatchIndexL3 = dictHashLong[dictHLNext];

	mov	rdx, QWORD PTR dictHashLong$1$[rsp]
	mov	eax, DWORD PTR [rdx+rax*4]

; 226  :                 const BYTE* dictMatchL3 = dictBase + dictMatchIndexL3;

	mov	ebp, eax
	mov	DWORD PTR dictMatchIndexL3$1$[rsp], eax
	add	rbp, QWORD PTR dictBase$1$[rsp]

; 227  :                 assert(dictMatchL3 < dictEnd);
; 228  :                 if (dictMatchL3 > dictStart && MEM_read64(dictMatchL3) == MEM_read64(ip+1)) {

	cmp	rbp, QWORD PTR dictStart$1$[rsp]
	jbe	$LN523@ZSTD_compr
	mov	rax, QWORD PTR [r13]
	cmp	QWORD PTR [rbp], rax
	jne	$LN523@ZSTD_compr

; 229  :                     mLength = ZSTD_count_2segments(ip+1+8, dictMatchL3+8, iend, dictEnd, prefixLowest) + 8;

	mov	rax, QWORD PTR prefixLowest$1$[rsp]
	lea	rdx, QWORD PTR [rbp+8]
	mov	r9, QWORD PTR dictEnd$1$[rsp]
	lea	rcx, QWORD PTR [r12+9]
	mov	r8, QWORD PTR iend$1$[rsp]
	mov	QWORD PTR [rsp+32], rax
	call	ZSTD_count_2segments

; 230  :                     ip++;

	mov	r12, r13

; 231  :                     offset = (U32)(current + 1 - dictMatchIndexL3 - dictIndexDelta);

	mov	r13d, DWORD PTR current$1$[rsp]
	sub	r13d, DWORD PTR dictMatchIndexL3$1$[rsp]
	sub	r13d, DWORD PTR dictIndexDelta$1$[rsp]
	inc	r13d
	lea	rdi, QWORD PTR [rax+8]

; 232  :                     while (((ip>anchor) & (dictMatchL3>dictStart)) && (ip[-1] == dictMatchL3[-1])) { ip--; dictMatchL3--; mLength++; } /* catch up */

	cmp	QWORD PTR tv11980[rsp], rbx
	jbe	$_match_found$2701
	mov	r8, QWORD PTR dictStart$1$[rsp]
	npad	12
$LL492@ZSTD_compr:
	movzx	eax, BYTE PTR [rbp-1]
	lea	rdx, QWORD PTR [r12-1]
	dec	rbp
	cmp	BYTE PTR [rdx], al
	jne	$_match_found$2701
	inc	rdi
	mov	ecx, r15d
	cmp	rdx, rbx
	mov	eax, r15d
	mov	r12, rdx
	seta	cl
	cmp	rbp, r8
	seta	al
	test	ecx, eax
	jne	SHORT $LL492@ZSTD_compr

; 233  :                     goto _match_found;

	jmp	$_match_found$2701
$LN523@ZSTD_compr:

; 234  :         }   }   }
; 235  : 
; 236  :         /* if no long +1 match, explore the short match we found */
; 237  :         if (dictMode == ZSTD_dictMatchState && matchIndexS < prefixLowestIndex) {

	cmp	DWORD PTR matchIndexS$1$[rsp], ecx
	lea	rdx, QWORD PTR [rsi+4]
	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rcx, QWORD PTR [r12+4]
	jae	SHORT $LN524@ZSTD_compr

; 238  :             mLength = ZSTD_count_2segments(ip+4, match+4, iend, dictEnd, prefixLowest) + 4;

	mov	rax, QWORD PTR prefixLowest$1$[rsp]
	mov	r9, QWORD PTR dictEnd$1$[rsp]
	mov	QWORD PTR [rsp+32], rax
	call	ZSTD_count_2segments

; 239  :             offset = (U32)(current - matchIndexS);

	mov	r13d, DWORD PTR current$1$[rsp]

; 240  :             while (((ip>anchor) & (match>dictStart)) && (ip[-1] == match[-1])) { ip--; match--; mLength++; } /* catch up */

	mov	ecx, r15d
	sub	r13d, DWORD PTR matchIndexS$1$[rsp]
	mov	r8, QWORD PTR dictStart$1$[rsp]
	cmp	rsi, r8
	lea	rdi, QWORD PTR [rax+4]
	mov	eax, r15d
	seta	cl
	cmp	r12, rbx
	seta	al
	test	ecx, eax
	je	$_match_found$2701
$LL494@ZSTD_compr:
	movzx	eax, BYTE PTR [rsi-1]
	lea	rdx, QWORD PTR [r12-1]
	dec	rsi
	cmp	BYTE PTR [rdx], al
	jne	$_match_found$2701
	inc	rdi
	mov	ecx, r15d
	cmp	rsi, r8
	mov	eax, r15d
	mov	r12, rdx
	seta	cl
	cmp	rdx, rbx
	seta	al
	test	ecx, eax
	jne	SHORT $LL494@ZSTD_compr

; 241  :         } else {

	jmp	SHORT $_match_found$2701
$LN524@ZSTD_compr:

; 242  :             mLength = ZSTD_count(ip+4, match+4, iend) + 4;

	call	ZSTD_count

; 243  :             offset = (U32)(ip - match);
; 244  :             while (((ip>anchor) & (match>prefixLowest)) && (ip[-1] == match[-1])) { ip--; match--; mLength++; } /* catch up */

	mov	r10, QWORD PTR prefixLowest$1$[rsp]
	mov	ecx, r15d
	mov	r13d, r12d
	sub	r13d, esi
	cmp	rsi, r10
	lea	rdi, QWORD PTR [rax+4]
	mov	eax, r15d
	seta	cl
	cmp	r12, rbx
	seta	al
	test	ecx, eax
	je	SHORT $_match_found$2701
	npad	4
$LL496@ZSTD_compr:
	movzx	eax, BYTE PTR [rsi-1]
	lea	rdx, QWORD PTR [r12-1]
	dec	rsi
	cmp	BYTE PTR [rdx], al
	jne	SHORT $_match_found$2701
	inc	rdi
	mov	ecx, r15d
	cmp	rsi, r10
	mov	eax, r15d
	mov	r12, rdx
	seta	cl
	cmp	rdx, rbx
	seta	al
	test	ecx, eax
	jne	SHORT $LL496@ZSTD_compr
$_match_found$2701:

; 250  :         offset_2 = offset_1;

	mov	eax, DWORD PTR offset_1$1$[rsp]

; 253  :         ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, offset + ZSTD_REP_MOVE, mLength-MINMATCH);

	lea	rbp, QWORD PTR [rdi-3]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	mov	r9, QWORD PTR iend$1$[rsp]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 253  :         ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, offset + ZSTD_REP_MOVE, mLength-MINMATCH);

	mov	rsi, r12
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rcx, QWORD PTR [r14+24]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 253  :         ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, offset + ZSTD_REP_MOVE, mLength-MINMATCH);

	sub	rsi, rbx
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	add	r9, -32					; ffffffffffffffe0H
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 250  :         offset_2 = offset_1;

	mov	DWORD PTR offset_2$1$[rsp], eax

; 251  :         offset_1 = offset;

	mov	DWORD PTR offset_1$1$[rsp], r13d
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	lea	r8, QWORD PTR [rbx+rsi]

; 456  :     if (litEnd <= litLimit_w) {

	cmp	r8, r9
	ja	SHORT $LN960@ZSTD_compr
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rbx]
	movups	XMMWORD PTR [rcx], xmm0
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 462  :         if (litLength > 16) {

	cmp	rsi, 16
	jbe	SHORT $LN961@ZSTD_compr

; 463  :             ZSTD_wildcopy(seqStorePtr->lit+16, literals+16, (ptrdiff_t)litLength-16, ZSTD_no_overlap);

	mov	rax, QWORD PTR [r14+24]
	add	rbx, 16
	add	rax, 16
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	lea	rcx, QWORD PTR [rax-16]
	add	rcx, rsi
	npad	8
$LL974@ZSTD_compr:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rbx]

; 289  :             COPY16(op, ip);

	lea	rbx, QWORD PTR [rbx+16]

; 243  :     memcpy(dst, src, 16);

	movups	XMMWORD PTR [rax], xmm0

; 289  :             COPY16(op, ip);

	add	rax, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rax, rcx
	jb	SHORT $LL974@ZSTD_compr
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	SHORT $LN961@ZSTD_compr
$LN960@ZSTD_compr:

; 466  :         ZSTD_safecopyLiterals(seqStorePtr->lit, literals, litEnd, litLimit_w);

	mov	rdx, rbx
	call	ZSTD_safecopyLiterals
$LN961@ZSTD_compr:

; 467  :     }
; 468  :     seqStorePtr->lit += litLength;

	add	QWORD PTR [r14+24], rsi
	mov	rcx, QWORD PTR [r14+8]

; 469  : 
; 470  :     /* literal Length */
; 471  :     if (litLength>0xFFFF) {

	cmp	rsi, 65535				; 0000ffffH
	jbe	SHORT $LN2619@ZSTD_compr

; 472  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 473  :         seqStorePtr->longLengthID = 1;
; 474  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [r14+72], 1
	sub	rax, QWORD PTR [r14]
	sar	rax, 3
	mov	DWORD PTR [r14+76], eax
$LN2619@ZSTD_compr:

; 475  :     }
; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	WORD PTR [rcx+4], si

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	lea	ecx, DWORD PTR [r13+3]
	mov	rax, QWORD PTR [r14+8]
	mov	DWORD PTR [rax], ecx
	mov	rcx, QWORD PTR [r14+8]

; 480  : 
; 481  :     /* match Length */
; 482  :     if (mlBase>0xFFFF) {

	cmp	rbp, 65535				; 0000ffffH
	jbe	SHORT $LN2620@ZSTD_compr

; 483  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 484  :         seqStorePtr->longLengthID = 2;
; 485  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [r14+72], 2
	sub	rax, QWORD PTR [r14]
	sar	rax, 3
	mov	DWORD PTR [r14+76], eax
$LN2620@ZSTD_compr:

; 487  :     seqStorePtr->sequences[0].matchLength = (U16)mlBase;

	mov	WORD PTR [rcx+6], bp
$LN2688@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 257  :         ip += mLength;

	add	QWORD PTR [r14+8], 8
$_match_stored$2703:

; 258  :         anchor = ip;

	mov	rbp, QWORD PTR iend$1$[rsp]
	lea	rbx, QWORD PTR [rdi+r12]
	add	rbp, -8
	mov	r12, rbx
	cmp	rbx, rbp

; 259  : 
; 260  :         if (ip <= ilimit) {

	ja	$LN2675@ZSTD_compr

; 261  :             /* Complementary insertion */
; 262  :             /* done after iLimit test, as candidates could be > iend-8 */
; 263  :             {   U32 const indexToInsert = current+2;

	mov	ebp, DWORD PTR current$1$[rsp]

; 264  :                 hashLong[ZSTD_hashPtr(base+indexToInsert, hBitsL, 8)] = indexToInsert;

	mov	r8d, 8
	mov	r13, QWORD PTR base$1$[rsp]
	add	ebp, 2
	mov	edx, DWORD PTR hBitsL$1$[rsp]
	mov	esi, ebp
	add	rsi, r13
	mov	rcx, rsi
	call	ZSTD_hashPtr
	mov	rcx, QWORD PTR hashLong$1$[rsp]

; 265  :                 hashLong[ZSTD_hashPtr(ip-2, hBitsL, 8)] = (U32)(ip-2-base);

	mov	edi, ebx
	mov	edx, DWORD PTR hBitsL$1$[rsp]
	sub	edi, r13d
	mov	r8d, 8
	sub	edi, 2
	mov	DWORD PTR [rcx+rax*4], ebp
	lea	rcx, QWORD PTR [rbx-2]
	call	ZSTD_hashPtr
	mov	rcx, QWORD PTR hashLong$1$[rsp]

; 266  :                 hashSmall[ZSTD_hashPtr(base+indexToInsert, hBitsS, mls)] = indexToInsert;

	mov	r8d, 5
	mov	edx, DWORD PTR hBitsS$1$[rsp]
	mov	DWORD PTR [rcx+rax*4], edi
	mov	rcx, rsi
	call	ZSTD_hashPtr
	mov	rsi, QWORD PTR hashSmall$1$[rsp]

; 267  :                 hashSmall[ZSTD_hashPtr(ip-1, hBitsS, mls)] = (U32)(ip-1-base);

	lea	rcx, QWORD PTR [rbx-1]
	mov	edx, DWORD PTR hBitsS$1$[rsp]
	mov	edi, ebx
	mov	r8d, 5
	mov	DWORD PTR [rsi+rax*4], ebp
	mov	rbp, r13
	sub	edi, ebp
	dec	edi
	call	ZSTD_hashPtr
	mov	r13d, DWORD PTR offset_2$1$[rsp]
	mov	DWORD PTR [rsi+rax*4], edi
	npad	1
$LL498@ZSTD_compr:

; 275  :                     const BYTE* repMatch2 = dictMode == ZSTD_dictMatchState

	mov	r10d, DWORD PTR prefixLowestIndex$1$[rsp]
	mov	edi, r12d
	sub	edi, ebp
	mov	ecx, edi
	sub	ecx, r13d
	mov	r8d, ecx
	cmp	ecx, r10d
	jae	SHORT $LN553@ZSTD_compr
	mov	eax, DWORD PTR dictIndexDelta$1$[rsp]
	mov	rdx, QWORD PTR dictBase$1$[rsp]
	sub	rdx, rax
	add	rdx, r8
	jmp	SHORT $LN554@ZSTD_compr
$LN553@ZSTD_compr:
	lea	rdx, QWORD PTR [rcx+rbp]
$LN554@ZSTD_compr:

; 276  :                         && repIndex2 < prefixLowestIndex ?
; 277  :                             dictBase + repIndex2 - dictIndexDelta :
; 278  :                             base + repIndex2;
; 279  :                     if ( ((U32)((prefixLowestIndex-1) - (U32)repIndex2) >= 3 /* intentional overflow */)
; 280  :                        && (MEM_read32(repMatch2) == MEM_read32(ip)) ) {

	mov	eax, r10d
	sub	eax, ecx
	dec	eax
	cmp	eax, 3
	jb	$LN2561@ZSTD_compr
	mov	eax, DWORD PTR [r12]
	cmp	DWORD PTR [rdx], eax
	jne	$LN2561@ZSTD_compr

; 281  :                         const BYTE* const repEnd2 = repIndex2 < prefixLowestIndex ? dictEnd : iend;

	mov	r8, QWORD PTR iend$1$[rsp]
	cmp	ecx, r10d

; 282  :                         size_t const repLength2 = ZSTD_count_2segments(ip+4, repMatch2+4, iend, repEnd2, prefixLowest) + 4;

	mov	rax, QWORD PTR prefixLowest$1$[rsp]
	lea	rcx, QWORD PTR [r12+4]
	mov	r9, r8
	mov	QWORD PTR [rsp+32], rax
	cmovb	r9, QWORD PTR dictEnd$1$[rsp]
	add	rdx, 4
	call	ZSTD_count_2segments

; 283  :                         U32 tmpOffset = offset_2; offset_2 = offset_1; offset_1 = tmpOffset;   /* swap offset_2 <=> offset_1 */

	mov	ecx, r13d
	mov	r13d, DWORD PTR offset_1$1$[rsp]
	mov	DWORD PTR offset_1$1$[rsp], ecx
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rcx, QWORD PTR [r14+24]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 282  :                         size_t const repLength2 = ZSTD_count_2segments(ip+4, repMatch2+4, iend, repEnd2, prefixLowest) + 4;

	lea	rsi, QWORD PTR [rax+4]

; 283  :                         U32 tmpOffset = offset_2; offset_2 = offset_1; offset_1 = tmpOffset;   /* swap offset_2 <=> offset_1 */

	mov	DWORD PTR offset_2$1$[rsp], r13d
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 456  :     if (litEnd <= litLimit_w) {

	mov	rax, QWORD PTR iend$1$[rsp]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 284  :                         ZSTD_storeSeq(seqStore, 0, anchor, iend, 0, repLength2-MINMATCH);

	lea	rbp, QWORD PTR [rsi-3]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 456  :     if (litEnd <= litLimit_w) {

	add	rax, -32				; ffffffffffffffe0H
	cmp	rbx, rax
	ja	SHORT $LN987@ZSTD_compr
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rbx]
	movups	XMMWORD PTR [rcx], xmm0
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	SHORT $LN988@ZSTD_compr
$LN987@ZSTD_compr:

; 466  :         ZSTD_safecopyLiterals(seqStorePtr->lit, literals, litEnd, litLimit_w);

	mov	r9, rax
	mov	r8, rbx
	mov	rdx, rbx
	call	ZSTD_safecopyLiterals
$LN988@ZSTD_compr:

; 475  :     }
; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	rax, QWORD PTR [r14+8]
	mov	WORD PTR [rax+4], r15w

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	mov	rax, QWORD PTR [r14+8]
	mov	DWORD PTR [rax], 1

; 480  : 
; 481  :     /* match Length */
; 482  :     if (mlBase>0xFFFF) {

	cmp	rbp, 65535				; 0000ffffH
	jbe	SHORT $LN2665@ZSTD_compr

; 483  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 484  :         seqStorePtr->longLengthID = 2;
; 485  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, QWORD PTR [r14+8]
	sub	rax, QWORD PTR [r14]
	sar	rax, 3
	mov	DWORD PTR [r14+76], eax
	mov	DWORD PTR [r14+72], 2
$LN2665@ZSTD_compr:

; 487  :     seqStorePtr->sequences[0].matchLength = (U16)mlBase;

	mov	rax, QWORD PTR [r14+8]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 285  :                         hashSmall[ZSTD_hashPtr(ip, hBitsS, mls)] = current2;

	mov	r8d, 5
	mov	edx, DWORD PTR hBitsS$1$[rsp]
	mov	rcx, r12
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 487  :     seqStorePtr->sequences[0].matchLength = (U16)mlBase;

	mov	WORD PTR [rax+6], bp

; 488  : 
; 489  :     seqStorePtr->sequences++;

	add	QWORD PTR [r14+8], 8
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 285  :                         hashSmall[ZSTD_hashPtr(ip, hBitsS, mls)] = current2;

	call	ZSTD_hashPtr
	mov	rcx, QWORD PTR hashSmall$1$[rsp]

; 286  :                         hashLong[ZSTD_hashPtr(ip, hBitsL, 8)] = current2;

	mov	r8d, 8
	mov	edx, DWORD PTR hBitsL$1$[rsp]
	mov	DWORD PTR [rcx+rax*4], edi
	mov	rcx, r12
	call	ZSTD_hashPtr
	mov	rcx, QWORD PTR hashLong$1$[rsp]

; 287  :                         ip += repLength2;

	add	r12, rsi
	mov	rbp, QWORD PTR iend$1$[rsp]
	mov	rbx, r12
	add	rbp, -8
	cmp	r12, rbp
	mov	rbp, QWORD PTR base$1$[rsp]
	mov	DWORD PTR [rcx+rax*4], edi
	jbe	$LL498@ZSTD_compr

; 288  :                         anchor = ip;
; 289  :                         continue;
; 290  :                     }
; 291  :                     break;
; 292  :             }   }
; 293  : 
; 294  :             if (dictMode == ZSTD_noDict) {
; 295  :                 while ( (ip <= ilimit)
; 296  :                      && ( (offset_2>0)
; 297  :                         & (MEM_read32(ip) == MEM_read32(ip - offset_2)) )) {
; 298  :                     /* store sequence */
; 299  :                     size_t const rLength = ZSTD_count(ip+4, ip+4-offset_2, iend) + 4;
; 300  :                     U32 const tmpOff = offset_2; offset_2 = offset_1; offset_1 = tmpOff;  /* swap offset_2 <=> offset_1 */
; 301  :                     hashSmall[ZSTD_hashPtr(ip, hBitsS, mls)] = (U32)(ip-base);
; 302  :                     hashLong[ZSTD_hashPtr(ip, hBitsL, 8)] = (U32)(ip-base);
; 303  :                     ZSTD_storeSeq(seqStore, 0, anchor, iend, 0, rLength-MINMATCH);
; 304  :                     ip += rLength;
; 305  :                     anchor = ip;
; 306  :                     continue;   /* faster when present ... (?) */
; 307  :         }   }   }
; 308  :     }   /* while (ip < ilimit) */

	jmp	$LN2689@ZSTD_compr
ZSTD_compressBlock_doubleFast_dictMatchState ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
_TEXT	SEGMENT
base$1$ = 0
ip$1$ = 80
ms$ = 80
tv451 = 88
end$ = 88
dtlm$ = 96
iend$1$ = 104
ZSTD_fillDoubleHashTable PROC

; 17   : {

$LN87:
	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r14
	push	r15
	sub	rsp, 24

; 18   :     const ZSTD_compressionParameters* const cParams = &ms->cParams;
; 19   :     U32* const hashLarge = ms->hashTable;
; 20   :     U32  const hBitsL = cParams->hashLog;
; 21   :     U32  const mls = cParams->minMatch;
; 22   :     U32* const hashSmall = ms->chainTable;
; 23   :     U32  const hBitsS = cParams->chainLog;
; 24   :     const BYTE* const base = ms->window.base;
; 25   :     const BYTE* ip = base + ms->nextToUpdate;

	mov	edi, DWORD PTR [rcx+36]

; 26   :     const BYTE* const iend = ((const BYTE*)end) - HASH_READ_SIZE;

	lea	rax, QWORD PTR [rdx-8]
	mov	rbx, QWORD PTR [rcx+48]
	mov	esi, r8d
	mov	r8, QWORD PTR [rcx+8]
	mov	r14d, DWORD PTR [rcx+200]
	add	rdi, r8
	mov	r15, QWORD PTR [rcx+64]
	mov	r9d, DWORD PTR [rcx+188]
	mov	QWORD PTR base$1$[rsp], r8

; 27   :     const U32 fastHashFillStep = 3;
; 28   : 
; 29   :     /* Always insert every fastHashFillStep position into the hash tables.
; 30   :      * Insert the other positions into the large hash table if their entry
; 31   :      * is empty.
; 32   :      */
; 33   :     for (; ip + fastHashFillStep - 1 <= iend; ip += fastHashFillStep) {

	lea	rbp, QWORD PTR [rdi+2]
	mov	QWORD PTR ip$1$[rsp], rdi
	mov	QWORD PTR iend$1$[rsp], rax
	mov	QWORD PTR tv451[rsp], rbp
	cmp	rbp, rax
	ja	$LN3@ZSTD_fillD
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	mov	QWORD PTR [rsp+96], r12

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	r12d, 64				; 00000040H

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	mov	QWORD PTR [rsp+16], r13

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	r11d, r12d

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	mov	r13d, 32				; 00000020H

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	sub	r11d, r9d

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	sub	r13d, r9d

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	sub	r12d, DWORD PTR [rcx+192]

; 634  :     case 4: return ZSTD_hash4Ptr(p, hBits);

	mov	rcx, -3523014627193847808		; cf1bbcdcbf9b0000H
	npad	12
$LL4@ZSTD_fillD:
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 34   :         U32 const current = (U32)(ip - base);

	mov	r10d, edi
	mov	rbp, -3523014627327384477		; cf1bbcdcb7a56463H
	sub	r10d, r8d
	mov	r8, rdi

; 35   :         U32 i;
; 36   :         for (i = 0; i < fastHashFillStep; ++i) {

	xor	r9d, r9d
	mov	rdi, -3523014627193167104		; cf1bbcdcbfa56300H
$LL7@ZSTD_fillD:
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 631  :     switch(mls)

	mov	eax, r14d
	sub	eax, 5
	je	SHORT $LN17@ZSTD_fillD
	sub	eax, 1
	je	SHORT $LN18@ZSTD_fillD
	mov	rdx, QWORD PTR [r8]
	sub	eax, 1
	je	SHORT $LN19@ZSTD_fillD
	cmp	eax, 1
	je	SHORT $LN20@ZSTD_fillD

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	imul	eax, edx, -1640531535			; 9e3779b1H
	mov	rcx, r13

; 634  :     case 4: return ZSTD_hash4Ptr(p, hBits);

	jmp	SHORT $LN84@ZSTD_fillD
$LN20@ZSTD_fillD:

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rax, rdx
	imul	rax, rbp

; 638  :     case 8: return ZSTD_hash8Ptr(p, hBits);

	jmp	SHORT $LN85@ZSTD_fillD
$LN19@ZSTD_fillD:

; 622  : static size_t ZSTD_hash7(U64 u, U32 h) { return (size_t)(((u  << (64-56)) * prime7bytes) >> (64-h)) ; }

	mov	rax, rdx
	imul	rax, rdi

; 637  :     case 7: return ZSTD_hash7Ptr(p, hBits);

	jmp	SHORT $LN85@ZSTD_fillD
$LN17@ZSTD_fillD:

; 614  : static size_t ZSTD_hash5(U64 u, U32 h) { return (size_t)(((u  << (64-40)) * prime5bytes) >> (64-h)) ; }

	mov	rcx, -3523014627271114752		; cf1bbcdcbb000000H
$LN18@ZSTD_fillD:

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rdx, QWORD PTR [r8]
	mov	rax, rdx
	imul	rax, rcx
$LN85@ZSTD_fillD:
	mov	ecx, r11d
$LN84@ZSTD_fillD:
	imul	rdx, rbp
	shr	rax, cl
	mov	ecx, r12d
	shr	rdx, cl
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 39   :             if (i == 0)

	test	r9d, r9d
	jne	SHORT $LN82@ZSTD_fillD

; 40   :                 hashSmall[smHash] = current + i;

	mov	DWORD PTR [r15+rax*4], r10d

; 41   :             if (i == 0 || hashLarge[lgHash] == 0)

	jmp	SHORT $LN10@ZSTD_fillD
$LN82@ZSTD_fillD:
	cmp	DWORD PTR [rbx+rdx*4], 0
	jne	SHORT $LN83@ZSTD_fillD
$LN10@ZSTD_fillD:

; 42   :                 hashLarge[lgHash] = current + i;

	lea	eax, DWORD PTR [r9+r10]
	mov	DWORD PTR [rbx+rdx*4], eax
$LN83@ZSTD_fillD:

; 43   :             /* Only load extra positions for ZSTD_dtlm_full */
; 44   :             if (dtlm == ZSTD_dtlm_fast)

	test	esi, esi
	je	SHORT $LN2@ZSTD_fillD

; 35   :         U32 i;
; 36   :         for (i = 0; i < fastHashFillStep; ++i) {

	inc	r9d
	inc	r8
	mov	rcx, -3523014627193847808		; cf1bbcdcbf9b0000H
	cmp	r9d, 3
	jb	$LL7@ZSTD_fillD
$LN2@ZSTD_fillD:

; 27   :     const U32 fastHashFillStep = 3;
; 28   : 
; 29   :     /* Always insert every fastHashFillStep position into the hash tables.
; 30   :      * Insert the other positions into the large hash table if their entry
; 31   :      * is empty.
; 32   :      */
; 33   :     for (; ip + fastHashFillStep - 1 <= iend; ip += fastHashFillStep) {

	mov	rdi, QWORD PTR ip$1$[rsp]
	mov	rcx, -3523014627193847808		; cf1bbcdcbf9b0000H
	mov	rbp, QWORD PTR tv451[rsp]
	add	rdi, 3
	mov	r8, QWORD PTR base$1$[rsp]
	add	rbp, 3
	mov	QWORD PTR ip$1$[rsp], rdi
	mov	QWORD PTR tv451[rsp], rbp
	cmp	rbp, QWORD PTR iend$1$[rsp]
	jbe	$LL4@ZSTD_fillD
	mov	r13, QWORD PTR [rsp+16]
	mov	r12, QWORD PTR [rsp+96]
$LN3@ZSTD_fillD:

; 45   :                 break;
; 46   :     }   }
; 47   : }

	add	rsp, 24
	pop	r15
	pop	r14
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
ZSTD_fillDoubleHashTable ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
_TEXT	SEGMENT
ms$ = 64
seqStore$ = 72
rep$ = 80
src$ = 88
srcSize$ = 96
ZSTD_compressBlock_doubleFast_extDict PROC

; 507  : {

$LN12:
	sub	rsp, 56					; 00000038H

; 508  :     U32 const mls = ms->cParams.minMatch;
; 509  :     switch(mls)

	mov	r10d, DWORD PTR [rcx+200]
	sub	r10d, 5
	je	SHORT $LN5@ZSTD_compr
	sub	r10d, 1
	je	SHORT $LN6@ZSTD_compr
	mov	rax, QWORD PTR srcSize$[rsp]
	cmp	r10d, 1
	je	SHORT $LN7@ZSTD_compr

; 510  :     {
; 511  :     default: /* includes case 3 */
; 512  :     case 4 :
; 513  :         return ZSTD_compressBlock_doubleFast_extDict_generic(ms, seqStore, rep, src, srcSize, 4);

	mov	DWORD PTR [rsp+40], 4

; 520  :     }
; 521  : }

	mov	QWORD PTR [rsp+32], rax
	call	ZSTD_compressBlock_doubleFast_extDict_generic
	add	rsp, 56					; 00000038H
	ret	0
$LN7@ZSTD_compr:

; 514  :     case 5 :
; 515  :         return ZSTD_compressBlock_doubleFast_extDict_generic(ms, seqStore, rep, src, srcSize, 5);
; 516  :     case 6 :
; 517  :         return ZSTD_compressBlock_doubleFast_extDict_generic(ms, seqStore, rep, src, srcSize, 6);
; 518  :     case 7 :
; 519  :         return ZSTD_compressBlock_doubleFast_extDict_generic(ms, seqStore, rep, src, srcSize, 7);

	mov	DWORD PTR [rsp+40], 7

; 520  :     }
; 521  : }

	mov	QWORD PTR [rsp+32], rax
	call	ZSTD_compressBlock_doubleFast_extDict_generic
	add	rsp, 56					; 00000038H
	ret	0
$LN6@ZSTD_compr:
	mov	rax, QWORD PTR srcSize$[rsp]
	mov	DWORD PTR [rsp+40], 6
	mov	QWORD PTR [rsp+32], rax
	call	ZSTD_compressBlock_doubleFast_extDict_generic
	add	rsp, 56					; 00000038H
	ret	0
$LN5@ZSTD_compr:
	mov	rax, QWORD PTR srcSize$[rsp]
	mov	DWORD PTR [rsp+40], 5
	mov	QWORD PTR [rsp+32], rax
	call	ZSTD_compressBlock_doubleFast_extDict_generic
	add	rsp, 56					; 00000038H
	ret	0
ZSTD_compressBlock_doubleFast_extDict ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\common\mem.h
_TEXT	SEGMENT
MEM_64bits PROC

; 184  : MEM_STATIC unsigned MEM_64bits(void) { return sizeof(size_t)==8; }

	mov	eax, 1
	ret	0
MEM_64bits ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\common\mem.h
_TEXT	SEGMENT
MEM_isLittleEndian PROC

; 188  :     const union { U32 u; BYTE c[4]; } one = { 1 };   /* don't use static : performance detrimental  */
; 189  :     return one.c[0];

	mov	eax, 1

; 190  : }

	ret	0
MEM_isLittleEndian ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\common\mem.h
_TEXT	SEGMENT
memPtr$ = 8
MEM_read16 PROC

; 239  :     U16 val; memcpy(&val, memPtr, sizeof(val)); return val;

	movzx	eax, WORD PTR [rcx]

; 240  : }

	ret	0
MEM_read16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\common\mem.h
_TEXT	SEGMENT
memPtr$ = 8
MEM_read32 PROC

; 244  :     U32 val; memcpy(&val, memPtr, sizeof(val)); return val;

	mov	eax, DWORD PTR [rcx]

; 245  : }

	ret	0
MEM_read32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\common\mem.h
_TEXT	SEGMENT
memPtr$ = 8
MEM_read64 PROC

; 249  :     U64 val; memcpy(&val, memPtr, sizeof(val)); return val;

	mov	rax, QWORD PTR [rcx]

; 250  : }

	ret	0
MEM_read64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\common\mem.h
_TEXT	SEGMENT
memPtr$ = 8
MEM_readST PROC

; 254  :     size_t val; memcpy(&val, memPtr, sizeof(val)); return val;

	mov	rax, QWORD PTR [rcx]

; 255  : }

	ret	0
MEM_readST ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\common\mem.h
_TEXT	SEGMENT
in$ = 8
MEM_swap64 PROC

; 291  : #if defined(_MSC_VER)     /* Visual Studio */
; 292  :     return _byteswap_uint64(in);

	bswap	rcx
	mov	rax, rcx

; 293  : #elif (defined (__GNUC__) && (__GNUC__ * 100 + __GNUC_MINOR__ >= 403)) \
; 294  :   || (defined(__clang__) && __has_builtin(__builtin_bswap64))
; 295  :     return __builtin_bswap64(in);
; 296  : #else
; 297  :     return  ((in << 56) & 0xff00000000000000ULL) |
; 298  :             ((in << 40) & 0x00ff000000000000ULL) |
; 299  :             ((in << 24) & 0x0000ff0000000000ULL) |
; 300  :             ((in << 8)  & 0x000000ff00000000ULL) |
; 301  :             ((in >> 8)  & 0x00000000ff000000ULL) |
; 302  :             ((in >> 24) & 0x0000000000ff0000ULL) |
; 303  :             ((in >> 40) & 0x000000000000ff00ULL) |
; 304  :             ((in >> 56) & 0x00000000000000ffULL);
; 305  : #endif
; 306  : }

	ret	0
MEM_swap64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\common\mem.h
_TEXT	SEGMENT
memPtr$ = 8
MEM_readLE64 PROC

; 368  :     if (MEM_isLittleEndian())
; 369  :         return MEM_read64(memPtr);

	mov	rax, QWORD PTR [rcx]

; 370  :     else
; 371  :         return MEM_swap64(MEM_read64(memPtr));
; 372  : }

	ret	0
MEM_readLE64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\common\zstd_internal.h
_TEXT	SEGMENT
dst$ = 8
src$ = 16
ZSTD_copy8 PROC

; 231  : #ifdef __aarch64__
; 232  :     vst1_u8((uint8_t*)dst, vld1_u8((const uint8_t*)src));
; 233  : #else
; 234  :     memcpy(dst, src, 8);

	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [rcx], rax

; 235  : #endif
; 236  : }

	ret	0
ZSTD_copy8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\common\zstd_internal.h
_TEXT	SEGMENT
dst$ = 8
src$ = 16
ZSTD_copy16 PROC

; 240  : #ifdef __aarch64__
; 241  :     vst1q_u8((uint8_t*)dst, vld1q_u8((const uint8_t*)src));
; 242  : #else
; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rdx]
	movups	XMMWORD PTR [rcx], xmm0

; 244  : #endif
; 245  : }

	ret	0
ZSTD_copy16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\common\zstd_internal.h
_TEXT	SEGMENT
dst$ = 8
src$ = 16
length$ = 24
ovtype$dead$ = 32
ZSTD_wildcopy PROC

; 267  :     ptrdiff_t diff = (BYTE*)dst - (const BYTE*)src;
; 268  :     const BYTE* ip = (const BYTE*)src;
; 269  :     BYTE* op = (BYTE*)dst;
; 270  :     BYTE* const oend = op + length;

	lea	rax, QWORD PTR [rcx+r8]
	sub	rdx, rcx
	npad	9
$LL7@ZSTD_wildc:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rdx+rcx]
	movups	XMMWORD PTR [rcx], xmm0

; 271  : 
; 272  :     assert(diff >= 8 || (ovtype == ZSTD_no_overlap && diff <= -WILDCOPY_VECLEN));
; 273  : 
; 274  :     if (ovtype == ZSTD_overlap_src_before_dst && diff < WILDCOPY_VECLEN) {
; 275  :         /* Handle short offset copies. */
; 276  :         do {
; 277  :             COPY8(op, ip)
; 278  :         } while (op < oend);
; 279  :     } else {
; 280  :         assert(diff >= WILDCOPY_VECLEN || diff <= -WILDCOPY_VECLEN);
; 281  :         /* Separate out the first COPY16() call because the copy length is
; 282  :          * almost certain to be short, so the branches have different
; 283  :          * probabilities. Since it is almost certain to be short, only do
; 284  :          * one COPY16() in the first call. Then, do two calls per loop since
; 285  :          * at that point it is more likely to have a high trip count.
; 286  :          */
; 287  : #ifndef __aarch64__
; 288  :         do {
; 289  :             COPY16(op, ip);

	add	rcx, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rcx, rax
	jb	SHORT $LL7@ZSTD_wildc

; 292  : #else
; 293  :         COPY16(op, ip);
; 294  :         if (op >= oend) return;
; 295  :         do {
; 296  :             COPY16(op, ip);
; 297  :             COPY16(op, ip);
; 298  :         }
; 299  :         while (op < oend);
; 300  : #endif
; 301  :     }
; 302  : }

	ret	0
ZSTD_wildcopy ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
_TEXT	SEGMENT
op$ = 8
ip$ = 16
iend$ = 24
ilimit_w$ = 32
ZSTD_safecopyLiterals PROC

; 423  :     assert(iend > ilimit_w);
; 424  :     if (ip <= ilimit_w) {

	cmp	rdx, r9
	ja	SHORT $LN19@ZSTD_safec
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	mov	r10, rcx
	sub	r10, rdx
	add	r10, r9
	sub	rdx, rcx
	npad	15
$LL12@ZSTD_safec:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rdx+rcx]
	movups	XMMWORD PTR [rcx], xmm0

; 289  :             COPY16(op, ip);

	add	rcx, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rcx, r10
	jb	SHORT $LL12@ZSTD_safec
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 427  :         ip = ilimit_w;

	mov	rcx, r10
	mov	rdx, r9
$LN19@ZSTD_safec:

; 428  :     }
; 429  :     while (ip < iend) *op++ = *ip++;

	cmp	rdx, r8
	jae	SHORT $LN3@ZSTD_safec
	npad	5
$LL21@ZSTD_safec:
	movzx	eax, BYTE PTR [rdx]
	inc	rdx
	mov	BYTE PTR [rcx], al
	lea	rcx, QWORD PTR [rcx+1]
	cmp	rdx, r8
	jb	SHORT $LL21@ZSTD_safec
$LN3@ZSTD_safec:

; 430  : }

	ret	0
ZSTD_safecopyLiterals ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
_TEXT	SEGMENT
seqStorePtr$ = 8
litLength$ = 16
literals$ = 24
litLimit$ = 32
offCode$ = 40
mlBase$ = 48
ZSTD_storeSeq PROC

; 440  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	r10, rcx

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	lea	rbx, QWORD PTR [r9-32]

; 442  :     BYTE const* const litEnd = literals + litLength;

	lea	rcx, QWORD PTR [rdx+r8]
	mov	r11, rdx
	mov	r9, QWORD PTR [r10+24]

; 443  : #if defined(DEBUGLEVEL) && (DEBUGLEVEL >= 6)
; 444  :     static const BYTE* g_start = NULL;
; 445  :     if (g_start==NULL) g_start = (const BYTE*)literals;  /* note : index only works for compression within a single segment */
; 446  :     {   U32 const pos = (U32)((const BYTE*)literals - g_start);
; 447  :         DEBUGLOG(6, "Cpos%7u :%3u literals, match%4u bytes at offCode%7u",
; 448  :                pos, (U32)litLength, (U32)mlBase+MINMATCH, (U32)offCode);
; 449  :     }
; 450  : #endif
; 451  :     assert((size_t)(seqStorePtr->sequences - seqStorePtr->sequencesStart) < seqStorePtr->maxNbSeq);
; 452  :     /* copy Literals */
; 453  :     assert(seqStorePtr->maxNbLit <= 128 KB);
; 454  :     assert(seqStorePtr->lit + litLength <= seqStorePtr->litStart + seqStorePtr->maxNbLit);
; 455  :     assert(literals + litLength <= litLimit);
; 456  :     if (litEnd <= litLimit_w) {

	cmp	rcx, rbx
	ja	SHORT $LN2@ZSTD_store
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [r8]
	movups	XMMWORD PTR [r9], xmm0
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 462  :         if (litLength > 16) {

	cmp	rdx, 16
	jbe	SHORT $LN24@ZSTD_store

; 463  :             ZSTD_wildcopy(seqStorePtr->lit+16, literals+16, (ptrdiff_t)litLength-16, ZSTD_no_overlap);

	mov	rax, QWORD PTR [r10+24]
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	lea	rcx, QWORD PTR [rdx-16]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 463  :             ZSTD_wildcopy(seqStorePtr->lit+16, literals+16, (ptrdiff_t)litLength-16, ZSTD_no_overlap);

	add	rax, 16
	add	r8, 16
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	add	rcx, rax
	npad	3
$LL16@ZSTD_store:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [r8]

; 289  :             COPY16(op, ip);

	lea	r8, QWORD PTR [r8+16]

; 243  :     memcpy(dst, src, 16);

	movups	XMMWORD PTR [rax], xmm0

; 289  :             COPY16(op, ip);

	add	rax, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rax, rcx
	jb	SHORT $LL16@ZSTD_store
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	SHORT $LN24@ZSTD_store
$LN2@ZSTD_store:

; 424  :     if (ip <= ilimit_w) {

	cmp	r8, rbx
	ja	SHORT $LN41@ZSTD_store
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	mov	rdx, r9
	sub	rdx, r8
	add	rdx, rbx
	sub	r8, r9
	npad	9
$LL33@ZSTD_store:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [r8+r9]
	movups	XMMWORD PTR [r9], xmm0

; 289  :             COPY16(op, ip);

	add	r9, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	r9, rdx
	jb	SHORT $LL33@ZSTD_store
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 427  :         ip = ilimit_w;

	mov	r9, rdx
	mov	r8, rbx
$LN41@ZSTD_store:

; 428  :     }
; 429  :     while (ip < iend) *op++ = *ip++;

	cmp	r8, rcx
	jae	SHORT $LN24@ZSTD_store
	sub	r9, r8
$LL43@ZSTD_store:
	movzx	eax, BYTE PTR [r8]
	mov	BYTE PTR [r9+r8], al
	inc	r8
	cmp	r8, rcx
	jb	SHORT $LL43@ZSTD_store
$LN24@ZSTD_store:

; 466  :         ZSTD_safecopyLiterals(seqStorePtr->lit, literals, litEnd, litLimit_w);
; 467  :     }
; 468  :     seqStorePtr->lit += litLength;

	add	QWORD PTR [r10+24], r11
	mov	rcx, QWORD PTR [r10+8]

; 469  : 
; 470  :     /* literal Length */
; 471  :     if (litLength>0xFFFF) {

	cmp	r11, 65535				; 0000ffffH
	jbe	SHORT $LN48@ZSTD_store

; 472  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 473  :         seqStorePtr->longLengthID = 1;
; 474  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [r10+72], 1
	sub	rax, QWORD PTR [r10]
	sar	rax, 3
	mov	DWORD PTR [r10+76], eax
$LN48@ZSTD_store:

; 475  :     }
; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;
; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;
; 480  : 
; 481  :     /* match Length */
; 482  :     if (mlBase>0xFFFF) {

	mov	rdx, QWORD PTR mlBase$[rsp]
	mov	WORD PTR [rcx+4], r11w
	mov	ecx, DWORD PTR offCode$[rsp]
	mov	rax, QWORD PTR [r10+8]
	inc	ecx
	mov	DWORD PTR [rax], ecx
	mov	rcx, QWORD PTR [r10+8]
	cmp	rdx, 65535				; 0000ffffH
	jbe	SHORT $LN53@ZSTD_store

; 483  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 484  :         seqStorePtr->longLengthID = 2;
; 485  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [r10+72], 2
	sub	rax, QWORD PTR [r10]
	sar	rax, 3
	mov	DWORD PTR [r10+76], eax
$LN53@ZSTD_store:

; 486  :     }
; 487  :     seqStorePtr->sequences[0].matchLength = (U16)mlBase;
; 488  : 
; 489  :     seqStorePtr->sequences++;
; 490  : }

	mov	rbx, QWORD PTR [rsp+8]
	mov	WORD PTR [rcx+6], dx
	add	QWORD PTR [r10+8], 8
	ret	0
ZSTD_storeSeq ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
_TEXT	SEGMENT
val$ = 8
r$1 = 16
ZSTD_NbCommonBytes PROC

; 498  :     if (MEM_isLittleEndian()) {
; 499  :         if (MEM_64bits()) {
; 500  : #       if defined(_MSC_VER) && defined(_WIN64)
; 501  :             unsigned long r = 0;
; 502  :             return _BitScanForward64( &r, (U64)val ) ? (unsigned)(r >> 3) : 0;

	bsf	rax, rcx
	mov	DWORD PTR r$1[rsp], 0
	je	SHORT $LN9@ZSTD_NbCom
	shr	eax, 3

; 503  : #       elif defined(__GNUC__) && (__GNUC__ >= 4)
; 504  :             return (__builtin_ctzll((U64)val) >> 3);
; 505  : #       else
; 506  :             static const int DeBruijnBytePos[64] = { 0, 0, 0, 0, 0, 1, 1, 2,
; 507  :                                                      0, 3, 1, 3, 1, 4, 2, 7,
; 508  :                                                      0, 2, 3, 6, 1, 5, 3, 5,
; 509  :                                                      1, 3, 4, 4, 2, 5, 6, 7,
; 510  :                                                      7, 0, 1, 2, 3, 3, 4, 6,
; 511  :                                                      2, 6, 5, 5, 3, 4, 5, 6,
; 512  :                                                      7, 1, 2, 4, 6, 4, 4, 5,
; 513  :                                                      7, 2, 6, 5, 7, 6, 7, 7 };
; 514  :             return DeBruijnBytePos[((U64)((val & -(long long)val) * 0x0218A392CDABBD3FULL)) >> 58];
; 515  : #       endif
; 516  :         } else { /* 32 bits */
; 517  : #       if defined(_MSC_VER)
; 518  :             unsigned long r=0;
; 519  :             return _BitScanForward( &r, (U32)val ) ? (unsigned)(r >> 3) : 0;
; 520  : #       elif defined(__GNUC__) && (__GNUC__ >= 3)
; 521  :             return (__builtin_ctz((U32)val) >> 3);
; 522  : #       else
; 523  :             static const int DeBruijnBytePos[32] = { 0, 0, 3, 0, 3, 1, 3, 0,
; 524  :                                                      3, 2, 2, 1, 3, 2, 0, 1,
; 525  :                                                      3, 3, 1, 2, 2, 2, 2, 0,
; 526  :                                                      3, 1, 2, 0, 1, 0, 1, 1 };
; 527  :             return DeBruijnBytePos[((U32)((val & -(S32)val) * 0x077CB531U)) >> 27];
; 528  : #       endif
; 529  :         }
; 530  :     } else {  /* Big Endian CPU */
; 531  :         if (MEM_64bits()) {
; 532  : #       if defined(_MSC_VER) && defined(_WIN64)
; 533  :             unsigned long r = 0;
; 534  :             return _BitScanReverse64( &r, val ) ? (unsigned)(r >> 3) : 0;
; 535  : #       elif defined(__GNUC__) && (__GNUC__ >= 4)
; 536  :             return (__builtin_clzll(val) >> 3);
; 537  : #       else
; 538  :             unsigned r;
; 539  :             const unsigned n32 = sizeof(size_t)*4;   /* calculate this way due to compiler complaining in 32-bits mode */
; 540  :             if (!(val>>n32)) { r=4; } else { r=0; val>>=n32; }
; 541  :             if (!(val>>16)) { r+=2; val>>=8; } else { val>>=24; }
; 542  :             r += (!val);
; 543  :             return r;
; 544  : #       endif
; 545  :         } else { /* 32 bits */
; 546  : #       if defined(_MSC_VER)
; 547  :             unsigned long r = 0;
; 548  :             return _BitScanReverse( &r, (unsigned long)val ) ? (unsigned)(r >> 3) : 0;
; 549  : #       elif defined(__GNUC__) && (__GNUC__ >= 3)
; 550  :             return (__builtin_clz((U32)val) >> 3);
; 551  : #       else
; 552  :             unsigned r;
; 553  :             if (!(val>>16)) { r=2; val>>=8; } else { r=0; val>>=24; }
; 554  :             r += (!val);
; 555  :             return r;
; 556  : #       endif
; 557  :     }   }
; 558  : }

	ret	0
$LN9@ZSTD_NbCom:

; 498  :     if (MEM_isLittleEndian()) {
; 499  :         if (MEM_64bits()) {
; 500  : #       if defined(_MSC_VER) && defined(_WIN64)
; 501  :             unsigned long r = 0;
; 502  :             return _BitScanForward64( &r, (U64)val ) ? (unsigned)(r >> 3) : 0;

	xor	eax, eax

; 503  : #       elif defined(__GNUC__) && (__GNUC__ >= 4)
; 504  :             return (__builtin_ctzll((U64)val) >> 3);
; 505  : #       else
; 506  :             static const int DeBruijnBytePos[64] = { 0, 0, 0, 0, 0, 1, 1, 2,
; 507  :                                                      0, 3, 1, 3, 1, 4, 2, 7,
; 508  :                                                      0, 2, 3, 6, 1, 5, 3, 5,
; 509  :                                                      1, 3, 4, 4, 2, 5, 6, 7,
; 510  :                                                      7, 0, 1, 2, 3, 3, 4, 6,
; 511  :                                                      2, 6, 5, 5, 3, 4, 5, 6,
; 512  :                                                      7, 1, 2, 4, 6, 4, 4, 5,
; 513  :                                                      7, 2, 6, 5, 7, 6, 7, 7 };
; 514  :             return DeBruijnBytePos[((U64)((val & -(long long)val) * 0x0218A392CDABBD3FULL)) >> 58];
; 515  : #       endif
; 516  :         } else { /* 32 bits */
; 517  : #       if defined(_MSC_VER)
; 518  :             unsigned long r=0;
; 519  :             return _BitScanForward( &r, (U32)val ) ? (unsigned)(r >> 3) : 0;
; 520  : #       elif defined(__GNUC__) && (__GNUC__ >= 3)
; 521  :             return (__builtin_ctz((U32)val) >> 3);
; 522  : #       else
; 523  :             static const int DeBruijnBytePos[32] = { 0, 0, 3, 0, 3, 1, 3, 0,
; 524  :                                                      3, 2, 2, 1, 3, 2, 0, 1,
; 525  :                                                      3, 3, 1, 2, 2, 2, 2, 0,
; 526  :                                                      3, 1, 2, 0, 1, 0, 1, 1 };
; 527  :             return DeBruijnBytePos[((U32)((val & -(S32)val) * 0x077CB531U)) >> 27];
; 528  : #       endif
; 529  :         }
; 530  :     } else {  /* Big Endian CPU */
; 531  :         if (MEM_64bits()) {
; 532  : #       if defined(_MSC_VER) && defined(_WIN64)
; 533  :             unsigned long r = 0;
; 534  :             return _BitScanReverse64( &r, val ) ? (unsigned)(r >> 3) : 0;
; 535  : #       elif defined(__GNUC__) && (__GNUC__ >= 4)
; 536  :             return (__builtin_clzll(val) >> 3);
; 537  : #       else
; 538  :             unsigned r;
; 539  :             const unsigned n32 = sizeof(size_t)*4;   /* calculate this way due to compiler complaining in 32-bits mode */
; 540  :             if (!(val>>n32)) { r=4; } else { r=0; val>>=n32; }
; 541  :             if (!(val>>16)) { r+=2; val>>=8; } else { val>>=24; }
; 542  :             r += (!val);
; 543  :             return r;
; 544  : #       endif
; 545  :         } else { /* 32 bits */
; 546  : #       if defined(_MSC_VER)
; 547  :             unsigned long r = 0;
; 548  :             return _BitScanReverse( &r, (unsigned long)val ) ? (unsigned)(r >> 3) : 0;
; 549  : #       elif defined(__GNUC__) && (__GNUC__ >= 3)
; 550  :             return (__builtin_clz((U32)val) >> 3);
; 551  : #       else
; 552  :             unsigned r;
; 553  :             if (!(val>>16)) { r=2; val>>=8; } else { r=0; val>>=24; }
; 554  :             r += (!val);
; 555  :             return r;
; 556  : #       endif
; 557  :     }   }
; 558  : }

	ret	0
ZSTD_NbCommonBytes ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
_TEXT	SEGMENT
r$1 = 8
r$2 = 8
pIn$ = 8
pMatch$ = 16
pInLimit$ = 24
ZSTD_count PROC

; 563  :     const BYTE* const pStart = pIn;
; 564  :     const BYTE* const pInLoopLimit = pInLimit - (sizeof(size_t)-1);

	lea	r9, QWORD PTR [r8-7]
	mov	r10, rcx

; 565  : 
; 566  :     if (pIn < pInLoopLimit) {

	cmp	rcx, r9
	jae	SHORT $LN3@ZSTD_count

; 567  :         { size_t const diff = MEM_readST(pMatch) ^ MEM_readST(pIn);

	mov	rax, QWORD PTR [rcx]
	xor	rax, QWORD PTR [rdx]

; 568  :           if (diff) return ZSTD_NbCommonBytes(diff); }

	je	SHORT $LN5@ZSTD_count

; 502  :             return _BitScanForward64( &r, (U64)val ) ? (unsigned)(r >> 3) : 0;

	bsf	rax, rax
	mov	DWORD PTR r$2[rsp], 0
	je	SHORT $LN20@ZSTD_count
	shr	eax, 3

; 580  : }

	ret	0
$LN20@ZSTD_count:

; 502  :             return _BitScanForward64( &r, (U64)val ) ? (unsigned)(r >> 3) : 0;

	xor	eax, eax

; 580  : }

	ret	0
$LN5@ZSTD_count:

; 569  :         pIn+=sizeof(size_t); pMatch+=sizeof(size_t);

	add	rcx, 8
	add	rdx, 8

; 570  :         while (pIn < pInLoopLimit) {

	cmp	rcx, r9
	jae	SHORT $LN3@ZSTD_count
$LL2@ZSTD_count:

; 571  :             size_t const diff = MEM_readST(pMatch) ^ MEM_readST(pIn);

	mov	rax, QWORD PTR [rcx]
	xor	rax, QWORD PTR [rdx]

; 572  :             if (!diff) { pIn+=sizeof(size_t); pMatch+=sizeof(size_t); continue; }

	jne	SHORT $LN6@ZSTD_count
	add	rcx, 8
	add	rdx, 8
	cmp	rcx, r9
	jb	SHORT $LL2@ZSTD_count
$LN3@ZSTD_count:

; 575  :     }   }
; 576  :     if (MEM_64bits() && (pIn<(pInLimit-3)) && (MEM_read32(pMatch) == MEM_read32(pIn))) { pIn+=4; pMatch+=4; }

	lea	rax, QWORD PTR [r8-3]
	cmp	rcx, rax
	jae	SHORT $LN7@ZSTD_count
	mov	eax, DWORD PTR [rcx]
	cmp	DWORD PTR [rdx], eax
	jne	SHORT $LN7@ZSTD_count
	add	rcx, 4
	add	rdx, 4
$LN7@ZSTD_count:

; 577  :     if ((pIn<(pInLimit-1)) && (MEM_read16(pMatch) == MEM_read16(pIn))) { pIn+=2; pMatch+=2; }

	lea	rax, QWORD PTR [r8-1]
	cmp	rcx, rax
	jae	SHORT $LN8@ZSTD_count
	movzx	eax, WORD PTR [rcx]
	cmp	WORD PTR [rdx], ax
	jne	SHORT $LN8@ZSTD_count
	add	rcx, 2
	add	rdx, 2
$LN8@ZSTD_count:

; 578  :     if ((pIn<pInLimit) && (*pMatch == *pIn)) pIn++;

	cmp	rcx, r8
	jae	SHORT $LN9@ZSTD_count
	movzx	eax, BYTE PTR [rcx]
	cmp	BYTE PTR [rdx], al
	jne	SHORT $LN9@ZSTD_count
	inc	rcx
$LN9@ZSTD_count:

; 579  :     return (size_t)(pIn - pStart);

	sub	rcx, r10
	mov	rax, rcx

; 580  : }

	ret	0
$LN6@ZSTD_count:

; 502  :             return _BitScanForward64( &r, (U64)val ) ? (unsigned)(r >> 3) : 0;

	bsf	rdx, rax
	mov	DWORD PTR r$1[rsp], 0
	je	SHORT $LN36@ZSTD_count
	shr	edx, 3

; 573  :             pIn += ZSTD_NbCommonBytes(diff);

	mov	eax, edx

; 574  :             return (size_t)(pIn - pStart);

	sub	rax, r10
	add	rax, rcx

; 580  : }

	ret	0
$LN36@ZSTD_count:

; 502  :             return _BitScanForward64( &r, (U64)val ) ? (unsigned)(r >> 3) : 0;

	xor	edx, edx

; 573  :             pIn += ZSTD_NbCommonBytes(diff);

	mov	eax, edx

; 574  :             return (size_t)(pIn - pStart);

	sub	rax, r10
	add	rax, rcx

; 580  : }

	ret	0
ZSTD_count ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
_TEXT	SEGMENT
ip$ = 48
match$ = 56
iEnd$ = 64
mEnd$ = 72
iStart$ = 80
ZSTD_count_2segments PROC

; 589  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	mov	r10, rcx
	mov	rsi, r8
	sub	r10, rdx
	mov	rbx, r9
	add	r10, r9
	mov	r11, rdx
	cmp	r10, r8
	mov	rbp, rcx
	cmovb	r8, r10

; 591  :     size_t const matchLength = ZSTD_count(ip, match, vEnd);

	call	ZSTD_count
	mov	rdi, rax

; 592  :     if (match + matchLength != mEnd) return matchLength;

	lea	rcx, QWORD PTR [rax+r11]
	cmp	rcx, rbx
	jne	SHORT $LN1@ZSTD_count

; 593  :     DEBUGLOG(7, "ZSTD_count_2segments: found a 2-parts match (current length==%zu)", matchLength);
; 594  :     DEBUGLOG(7, "distance from match beginning to end dictionary = %zi", mEnd - match);
; 595  :     DEBUGLOG(7, "distance from current pos to end buffer = %zi", iEnd - ip);
; 596  :     DEBUGLOG(7, "next byte : ip==%02X, istart==%02X", ip[matchLength], *iStart);
; 597  :     DEBUGLOG(7, "final match length = %zu", matchLength + ZSTD_count(ip+matchLength, iStart, iEnd));
; 598  :     return matchLength + ZSTD_count(ip+matchLength, iStart, iEnd);

	mov	rdx, QWORD PTR iStart$[rsp]
	lea	rcx, QWORD PTR [rax+rbp]
	mov	r8, rsi
	call	ZSTD_count
	add	rax, rdi
$LN1@ZSTD_count:

; 599  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
ZSTD_count_2segments ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
_TEXT	SEGMENT
u$ = 8
h$ = 16
ZSTD_hash4 PROC

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	imul	eax, ecx, -1640531535			; 9e3779b1H
	mov	ecx, 32					; 00000020H
	sub	ecx, edx
	shr	eax, cl
	ret	0
ZSTD_hash4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
_TEXT	SEGMENT
ptr$ = 8
h$ = 16
ZSTD_hash4Ptr PROC

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	imul	eax, DWORD PTR [rcx], -1640531535	; 9e3779b1H
	mov	ecx, 32					; 00000020H
	sub	ecx, edx
	shr	rax, cl

; 611  : static size_t ZSTD_hash4Ptr(const void* ptr, U32 h) { return ZSTD_hash4(MEM_read32(ptr), h); }

	ret	0
ZSTD_hash4Ptr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
_TEXT	SEGMENT
u$ = 8
h$ = 16
ZSTD_hash5 PROC

; 614  : static size_t ZSTD_hash5(U64 u, U32 h) { return (size_t)(((u  << (64-40)) * prime5bytes) >> (64-h)) ; }

	mov	rax, -3523014627271114752		; cf1bbcdcbb000000H
	imul	rax, rcx
	mov	ecx, 64					; 00000040H
	sub	ecx, edx
	shr	rax, cl
	ret	0
ZSTD_hash5 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
_TEXT	SEGMENT
p$ = 8
h$ = 16
ZSTD_hash5Ptr PROC

; 614  : static size_t ZSTD_hash5(U64 u, U32 h) { return (size_t)(((u  << (64-40)) * prime5bytes) >> (64-h)) ; }

	mov	rax, QWORD PTR [rcx]
	mov	r8, -3523014627271114752		; cf1bbcdcbb000000H
	imul	rax, r8
	mov	ecx, 64					; 00000040H
	sub	ecx, edx
	shr	rax, cl

; 615  : static size_t ZSTD_hash5Ptr(const void* p, U32 h) { return ZSTD_hash5(MEM_readLE64(p), h); }

	ret	0
ZSTD_hash5Ptr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
_TEXT	SEGMENT
u$ = 8
h$ = 16
ZSTD_hash6 PROC

; 618  : static size_t ZSTD_hash6(U64 u, U32 h) { return (size_t)(((u  << (64-48)) * prime6bytes) >> (64-h)) ; }

	mov	rax, -3523014627193847808		; cf1bbcdcbf9b0000H
	imul	rax, rcx
	mov	ecx, 64					; 00000040H
	sub	ecx, edx
	shr	rax, cl
	ret	0
ZSTD_hash6 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
_TEXT	SEGMENT
p$ = 8
h$ = 16
ZSTD_hash6Ptr PROC

; 618  : static size_t ZSTD_hash6(U64 u, U32 h) { return (size_t)(((u  << (64-48)) * prime6bytes) >> (64-h)) ; }

	mov	rax, QWORD PTR [rcx]
	mov	r8, -3523014627193847808		; cf1bbcdcbf9b0000H
	imul	rax, r8
	mov	ecx, 64					; 00000040H
	sub	ecx, edx
	shr	rax, cl

; 619  : static size_t ZSTD_hash6Ptr(const void* p, U32 h) { return ZSTD_hash6(MEM_readLE64(p), h); }

	ret	0
ZSTD_hash6Ptr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
_TEXT	SEGMENT
u$ = 8
h$ = 16
ZSTD_hash7 PROC

; 622  : static size_t ZSTD_hash7(U64 u, U32 h) { return (size_t)(((u  << (64-56)) * prime7bytes) >> (64-h)) ; }

	mov	rax, -3523014627193167104		; cf1bbcdcbfa56300H
	imul	rax, rcx
	mov	ecx, 64					; 00000040H
	sub	ecx, edx
	shr	rax, cl
	ret	0
ZSTD_hash7 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
_TEXT	SEGMENT
p$ = 8
h$ = 16
ZSTD_hash7Ptr PROC

; 622  : static size_t ZSTD_hash7(U64 u, U32 h) { return (size_t)(((u  << (64-56)) * prime7bytes) >> (64-h)) ; }

	mov	rax, QWORD PTR [rcx]
	mov	r8, -3523014627193167104		; cf1bbcdcbfa56300H
	imul	rax, r8
	mov	ecx, 64					; 00000040H
	sub	ecx, edx
	shr	rax, cl

; 623  : static size_t ZSTD_hash7Ptr(const void* p, U32 h) { return ZSTD_hash7(MEM_readLE64(p), h); }

	ret	0
ZSTD_hash7Ptr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
_TEXT	SEGMENT
u$ = 8
h$ = 16
ZSTD_hash8 PROC

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rax, -3523014627327384477		; cf1bbcdcb7a56463H
	imul	rax, rcx
	mov	ecx, 64					; 00000040H
	sub	ecx, edx
	shr	rax, cl
	ret	0
ZSTD_hash8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
_TEXT	SEGMENT
p$ = 8
h$ = 16
ZSTD_hash8Ptr PROC

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rax, QWORD PTR [rcx]
	mov	r8, -3523014627327384477		; cf1bbcdcb7a56463H
	imul	rax, r8
	mov	ecx, 64					; 00000040H
	sub	ecx, edx
	shr	rax, cl

; 627  : static size_t ZSTD_hash8Ptr(const void* p, U32 h) { return ZSTD_hash8(MEM_readLE64(p), h); }

	ret	0
ZSTD_hash8Ptr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
_TEXT	SEGMENT
p$ = 8
hBits$ = 16
mls$ = 24
ZSTD_hashPtr PROC

; 631  :     switch(mls)

	sub	r8d, 5
	je	SHORT $LN5@ZSTD_hashP
	sub	r8d, 1
	je	SHORT $LN6@ZSTD_hashP
	sub	r8d, 1
	je	SHORT $LN7@ZSTD_hashP
	cmp	r8d, 1
	je	SHORT $LN8@ZSTD_hashP

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	imul	eax, DWORD PTR [rcx], -1640531535	; 9e3779b1H
	mov	ecx, 32					; 00000020H

; 632  :     {
; 633  :     default:
; 634  :     case 4: return ZSTD_hash4Ptr(p, hBits);
; 635  :     case 5: return ZSTD_hash5Ptr(p, hBits);
; 636  :     case 6: return ZSTD_hash6Ptr(p, hBits);
; 637  :     case 7: return ZSTD_hash7Ptr(p, hBits);
; 638  :     case 8: return ZSTD_hash8Ptr(p, hBits);
; 639  :     }
; 640  : }

	sub	ecx, edx
	shr	rax, cl
	ret	0
$LN8@ZSTD_hashP:
	mov	rax, QWORD PTR [rcx]

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	r8, -3523014627327384477		; cf1bbcdcb7a56463H

; 632  :     {
; 633  :     default:
; 634  :     case 4: return ZSTD_hash4Ptr(p, hBits);
; 635  :     case 5: return ZSTD_hash5Ptr(p, hBits);
; 636  :     case 6: return ZSTD_hash6Ptr(p, hBits);
; 637  :     case 7: return ZSTD_hash7Ptr(p, hBits);
; 638  :     case 8: return ZSTD_hash8Ptr(p, hBits);
; 639  :     }
; 640  : }

	imul	rax, r8
	mov	ecx, 64					; 00000040H
	sub	ecx, edx
	shr	rax, cl
	ret	0
$LN7@ZSTD_hashP:
	mov	rax, QWORD PTR [rcx]

; 622  : static size_t ZSTD_hash7(U64 u, U32 h) { return (size_t)(((u  << (64-56)) * prime7bytes) >> (64-h)) ; }

	mov	r8, -3523014627193167104		; cf1bbcdcbfa56300H

; 632  :     {
; 633  :     default:
; 634  :     case 4: return ZSTD_hash4Ptr(p, hBits);
; 635  :     case 5: return ZSTD_hash5Ptr(p, hBits);
; 636  :     case 6: return ZSTD_hash6Ptr(p, hBits);
; 637  :     case 7: return ZSTD_hash7Ptr(p, hBits);
; 638  :     case 8: return ZSTD_hash8Ptr(p, hBits);
; 639  :     }
; 640  : }

	imul	rax, r8
	mov	ecx, 64					; 00000040H
	sub	ecx, edx
	shr	rax, cl
	ret	0
$LN6@ZSTD_hashP:
	mov	rax, QWORD PTR [rcx]

; 618  : static size_t ZSTD_hash6(U64 u, U32 h) { return (size_t)(((u  << (64-48)) * prime6bytes) >> (64-h)) ; }

	mov	r8, -3523014627193847808		; cf1bbcdcbf9b0000H

; 632  :     {
; 633  :     default:
; 634  :     case 4: return ZSTD_hash4Ptr(p, hBits);
; 635  :     case 5: return ZSTD_hash5Ptr(p, hBits);
; 636  :     case 6: return ZSTD_hash6Ptr(p, hBits);
; 637  :     case 7: return ZSTD_hash7Ptr(p, hBits);
; 638  :     case 8: return ZSTD_hash8Ptr(p, hBits);
; 639  :     }
; 640  : }

	imul	rax, r8
	mov	ecx, 64					; 00000040H
	sub	ecx, edx
	shr	rax, cl
	ret	0
$LN5@ZSTD_hashP:
	mov	rax, QWORD PTR [rcx]

; 614  : static size_t ZSTD_hash5(U64 u, U32 h) { return (size_t)(((u  << (64-40)) * prime5bytes) >> (64-h)) ; }

	mov	r8, -3523014627271114752		; cf1bbcdcbb000000H

; 632  :     {
; 633  :     default:
; 634  :     case 4: return ZSTD_hash4Ptr(p, hBits);
; 635  :     case 5: return ZSTD_hash5Ptr(p, hBits);
; 636  :     case 6: return ZSTD_hash6Ptr(p, hBits);
; 637  :     case 7: return ZSTD_hash7Ptr(p, hBits);
; 638  :     case 8: return ZSTD_hash8Ptr(p, hBits);
; 639  :     }
; 640  : }

	imul	rax, r8
	mov	ecx, 64					; 00000040H
	sub	ecx, edx
	shr	rax, cl
	ret	0
ZSTD_hashPtr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
_TEXT	SEGMENT
ms$ = 8
current$ = 16
windowLog$ = 24
ZSTD_getLowestMatchIndex PROC

; 977  : {

	mov	rax, rcx

; 978  :     U32    const maxDistance = 1U << windowLog;

	mov	ecx, r8d
	mov	r8d, 1
	shl	r8d, cl

; 979  :     U32    const lowestValid = ms->window.lowLimit;

	mov	r9d, DWORD PTR [rax+28]

; 980  :     U32    const withinWindow = (current - lowestValid > maxDistance) ? current - maxDistance : lowestValid;
; 981  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	mov	ecx, DWORD PTR [rax+32]
	mov	eax, edx
	sub	edx, r8d
	sub	eax, r9d
	cmp	eax, r8d
	cmovbe	edx, r9d
	test	ecx, ecx

; 982  :     U32    const matchLowest = isDictionary ? lowestValid : withinWindow;

	cmovne	edx, r9d

; 983  :     return matchLowest;

	mov	eax, edx

; 984  : }

	ret	0
ZSTD_getLowestMatchIndex ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
_TEXT	SEGMENT
ms$ = 8
current$ = 16
windowLog$ = 24
ZSTD_getLowestPrefixIndex PROC

; 990  : {

	mov	rax, rcx

; 991  :     U32    const maxDistance = 1U << windowLog;

	mov	ecx, r8d
	mov	r8d, 1
	shl	r8d, cl

; 992  :     U32    const lowestValid = ms->window.dictLimit;

	mov	r9d, DWORD PTR [rax+24]

; 993  :     U32    const withinWindow = (current - lowestValid > maxDistance) ? current - maxDistance : lowestValid;
; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	mov	ecx, DWORD PTR [rax+32]
	mov	eax, edx
	sub	edx, r8d
	sub	eax, r9d
	cmp	eax, r8d
	cmovbe	edx, r9d
	test	ecx, ecx

; 995  :     U32    const matchLowest = isDictionary ? lowestValid : withinWindow;

	cmovne	edx, r9d

; 996  :     return matchLowest;

	mov	eax, edx

; 997  : }

	ret	0
ZSTD_getLowestPrefixIndex ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
_TEXT	SEGMENT
iend$1$ = 32
offset_2$1$ = 40
offset$1$ = 44
dictIndexDelta$1$ = 48
prefixLowestIndex$1$ = 52
tv4785 = 56
prefixLowest$1$ = 64
hashSmall$1$ = 72
dictEnd$1$ = 80
offsetSaved$1$ = 88
dictStart$1$ = 96
dictBase$1$ = 104
hashLong$1$ = 112
base$1$ = 120
tv4787 = 128
tv4769 = 136
tv4764 = 144
dictHashLong$1$ = 152
dictHashSmall$1$ = 160
ilimit$1$ = 168
tv4765 = 176
tv4803 = 272
ms$ = 272
seqStore$ = 280
rep$ = 288
offset_1$1$ = 296
src$ = 296
current$1$ = 304
r$1 = 304
r$2 = 304
r$3 = 304
r$4 = 304
r$5 = 304
r$6 = 304
srcSize$ = 304
mls$ = 312
dictMode$ = 320
ZSTD_compressBlock_doubleFast_generic PROC

; 55   : {

	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 200				; 000000c8H

; 61   :     const BYTE* const base = ms->window.base;

	mov	r15, QWORD PTR [rcx+8]
	mov	r10, rcx
	mov	rax, QWORD PTR [rcx+48]

; 65   :     const U32 endIndex = (U32)((size_t)(istart - base) + srcSize);

	mov	ebx, r9d
	mov	ebp, DWORD PTR [rcx+192]
	sub	ebx, r15d
	mov	r11d, DWORD PTR [rcx+188]
	mov	rsi, r9
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 992  :     U32    const lowestValid = ms->window.dictLimit;

	mov	r9d, DWORD PTR [r10+24]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 55   : {

	mov	r12, rdx

; 65   :     const U32 endIndex = (U32)((size_t)(istart - base) + srcSize);

	mov	rdx, QWORD PTR srcSize$[rsp]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 991  :     U32    const maxDistance = 1U << windowLog;

	mov	r8d, 1

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	mov	r14d, DWORD PTR [r10+32]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 65   :     const U32 endIndex = (U32)((size_t)(istart - base) + srcSize);

	add	ebx, edx
	mov	QWORD PTR hashLong$1$[rsp], rax
	mov	rax, QWORD PTR [rcx+64]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 991  :     U32    const maxDistance = 1U << windowLog;

	mov	ecx, DWORD PTR [rcx+184]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 69   :     const BYTE* const iend = istart + srcSize;

	lea	r13, QWORD PTR [rsi+rdx]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 991  :     U32    const maxDistance = 1U << windowLog;

	shl	r8d, cl
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 71   :     U32 offset_1=rep[0], offset_2=rep[1];

	mov	rcx, QWORD PTR rep$[rsp]
	mov	QWORD PTR hashSmall$1$[rsp], rax
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 993  :     U32    const withinWindow = (current - lowestValid > maxDistance) ? current - maxDistance : lowestValid;

	mov	eax, ebx
	sub	eax, r9d
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 61   :     const BYTE* const base = ms->window.base;

	mov	QWORD PTR base$1$[rsp], r15
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	sub	ebx, r8d
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 69   :     const BYTE* const iend = istart + srcSize;

	mov	QWORD PTR iend$1$[rsp], r13
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	cmp	eax, r8d
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 70   :     const BYTE* const ilimit = iend - HASH_READ_SIZE;

	lea	rax, QWORD PTR [r13-8]
	mov	QWORD PTR ilimit$1$[rsp], rax

; 71   :     U32 offset_1=rep[0], offset_2=rep[1];

	mov	eax, DWORD PTR [rcx]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	cmovbe	ebx, r9d
	test	r14d, r14d
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 71   :     U32 offset_1=rep[0], offset_2=rep[1];

	mov	DWORD PTR offset_1$1$[rsp], eax

; 73   : 
; 74   :     const ZSTD_matchState_t* const dms = ms->dictMatchState;

	mov	rax, QWORD PTR [r10+176]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 995  :     U32    const matchLowest = isDictionary ? lowestValid : withinWindow;

	cmovne	ebx, r9d
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 68   :     const BYTE* const prefixLowest = base + prefixLowestIndex;

	mov	edi, ebx
	add	rdi, r15
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 995  :     U32    const matchLowest = isDictionary ? lowestValid : withinWindow;

	mov	DWORD PTR prefixLowestIndex$1$[rsp], ebx
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 71   :     U32 offset_1=rep[0], offset_2=rep[1];

	mov	r15d, DWORD PTR [rcx+4]

; 72   :     U32 offsetSaved = 0;

	xor	ecx, ecx

; 75   :     const ZSTD_compressionParameters* const dictCParams =
; 76   :                                      dictMode == ZSTD_dictMatchState ?
; 77   :                                      &dms->cParams : NULL;
; 78   :     const U32* const dictHashLong  = dictMode == ZSTD_dictMatchState ?

	cmp	DWORD PTR dictMode$[rsp], 2
	mov	QWORD PTR prefixLowest$1$[rsp], rdi
	mov	DWORD PTR offset_2$1$[rsp], r15d
	mov	DWORD PTR offsetSaved$1$[rsp], ecx
	jne	SHORT $LN51@ZSTD_compr

; 87   :                                      dictBase + dictStartIndex : NULL;
; 88   :     const BYTE* const dictEnd      = dictMode == ZSTD_dictMatchState ?

	mov	r10, QWORD PTR [rax]
	mov	rcx, QWORD PTR [rax+48]
	mov	edx, DWORD PTR [rax+24]
	mov	QWORD PTR dictHashLong$1$[rsp], rcx
	mov	rcx, QWORD PTR [rax+64]
	mov	QWORD PTR dictHashSmall$1$[rsp], rcx
	mov	rcx, QWORD PTR [rax+8]
	add	rdx, rcx
	mov	QWORD PTR dictBase$1$[rsp], rcx

; 89   :                                      dms->window.nextSrc : NULL;
; 90   :     const U32 dictIndexDelta       = dictMode == ZSTD_dictMatchState ?

	sub	ecx, r10d
	mov	QWORD PTR dictEnd$1$[rsp], r10
	add	ecx, ebx
	mov	QWORD PTR dictStart$1$[rsp], rdx

; 91   :                                      prefixLowestIndex - (U32)(dictEnd - dictBase) :
; 92   :                                      0;
; 93   :     const U32 dictHBitsL           = dictMode == ZSTD_dictMatchState ?

	mov	ebx, DWORD PTR [rax+192]
	mov	DWORD PTR dictIndexDelta$1$[rsp], ecx
	mov	ecx, r10d

; 94   :                                      dictCParams->hashLog : hBitsL;
; 95   :     const U32 dictHBitsS           = dictMode == ZSTD_dictMatchState ?

	mov	r10d, DWORD PTR [rax+188]
	jmp	SHORT $LN68@ZSTD_compr
$LN51@ZSTD_compr:

; 75   :     const ZSTD_compressionParameters* const dictCParams =
; 76   :                                      dictMode == ZSTD_dictMatchState ?
; 77   :                                      &dms->cParams : NULL;
; 78   :     const U32* const dictHashLong  = dictMode == ZSTD_dictMatchState ?

	mov	QWORD PTR dictHashLong$1$[rsp], rcx

; 79   :                                      dms->hashTable : NULL;
; 80   :     const U32* const dictHashSmall = dictMode == ZSTD_dictMatchState ?
; 81   :                                      dms->chainTable : NULL;
; 82   :     const U32 dictStartIndex       = dictMode == ZSTD_dictMatchState ?
; 83   :                                      dms->window.dictLimit : 0;
; 84   :     const BYTE* const dictBase     = dictMode == ZSTD_dictMatchState ?
; 85   :                                      dms->window.base : NULL;
; 86   :     const BYTE* const dictStart    = dictMode == ZSTD_dictMatchState ?

	mov	rdx, rcx
	mov	QWORD PTR dictHashSmall$1$[rsp], rcx

; 91   :                                      prefixLowestIndex - (U32)(dictEnd - dictBase) :
; 92   :                                      0;
; 93   :     const U32 dictHBitsL           = dictMode == ZSTD_dictMatchState ?

	mov	ebx, ebp
	mov	QWORD PTR dictBase$1$[rsp], rcx

; 94   :                                      dictCParams->hashLog : hBitsL;
; 95   :     const U32 dictHBitsS           = dictMode == ZSTD_dictMatchState ?

	mov	r10d, r11d
	mov	QWORD PTR dictStart$1$[rsp], rcx
	mov	QWORD PTR dictEnd$1$[rsp], rcx
	mov	DWORD PTR dictIndexDelta$1$[rsp], ecx
$LN68@ZSTD_compr:

; 96   :                                      dictCParams->chainLog : hBitsS;
; 97   :     const U32 dictAndPrefixLength  = (U32)((ip - prefixLowest) + (dictEnd - dictStart));
; 98   : 
; 99   :     DEBUGLOG(5, "ZSTD_compressBlock_doubleFast_generic");
; 100  : 
; 101  :     assert(dictMode == ZSTD_noDict || dictMode == ZSTD_dictMatchState);
; 102  : 
; 103  :     /* if a dictionary is attached, it must be within window range */
; 104  :     if (dictMode == ZSTD_dictMatchState) {
; 105  :         assert(ms->window.dictLimit + (1U << cParams->windowLog) >= endIndex);
; 106  :     }
; 107  : 
; 108  :     /* init */
; 109  :     ip += (dictAndPrefixLength == 0);

	mov	eax, esi
	sub	eax, edi
	sub	eax, edx
	add	eax, ecx
	mov	eax, 0
	sete	al

; 110  :     if (dictMode == ZSTD_noDict) {

	cmp	DWORD PTR dictMode$[rsp], 0
	lea	rdi, QWORD PTR [rax+rsi]
	jne	SHORT $LN23@ZSTD_compr

; 111  :         U32 const current = (U32)(ip - base);

	mov	edx, edi
	sub	edx, DWORD PTR base$1$[rsp]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 993  :     U32    const withinWindow = (current - lowestValid > maxDistance) ? current - maxDistance : lowestValid;

	mov	eax, edx

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	mov	ecx, edx
	sub	ecx, r8d
	sub	eax, r9d
	cmp	eax, r8d
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 115  :         if (offset_1 > maxRep) offsetSaved = offset_1, offset_1 = 0;

	mov	r8d, 0
	mov	eax, r8d
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	cmovbe	ecx, r9d
	test	r14d, r14d

; 995  :     U32    const matchLowest = isDictionary ? lowestValid : withinWindow;

	cmovne	ecx, r9d
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 113  :         U32 const maxRep = current - windowLow;

	sub	edx, ecx

; 115  :         if (offset_1 > maxRep) offsetSaved = offset_1, offset_1 = 0;

	mov	ecx, r15d
	cmp	r15d, edx
	cmovbe	eax, r15d
	cmovbe	ecx, r8d
	mov	r15d, eax
	mov	DWORD PTR offset_2$1$[rsp], eax
	mov	eax, DWORD PTR offset_1$1$[rsp]
	mov	DWORD PTR offsetSaved$1$[rsp], ecx
	cmp	eax, edx
	jbe	SHORT $LN23@ZSTD_compr
	mov	DWORD PTR offsetSaved$1$[rsp], eax
	mov	DWORD PTR offset_1$1$[rsp], r8d
	mov	DWORD PTR offset_2$1$[rsp], r15d
$LN23@ZSTD_compr:

; 116  :     }
; 117  :     if (dictMode == ZSTD_dictMatchState) {
; 118  :         /* dictMatchState repCode checks don't currently handle repCode == 0
; 119  :          * disabling. */
; 120  :         assert(offset_1 <= dictAndPrefixLength);
; 121  :         assert(offset_2 <= dictAndPrefixLength);
; 122  :     }
; 123  : 
; 124  :     /* Main Search Loop */
; 125  :     while (ip < ilimit) {   /* < instead of <=, because repcode check at (ip+1) */

	lea	rax, QWORD PTR [r13-8]
	cmp	rdi, rax
	jae	$LN3@ZSTD_compr
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	edx, 64					; 00000040H

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	mov	ecx, 32					; 00000020H
	mov	r13d, ecx

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	eax, edx
	sub	eax, ebp

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	sub	ecx, r10d
	sub	r13d, r11d

; 634  :     case 4: return ZSTD_hash4Ptr(p, hBits);

	mov	QWORD PTR tv4765[rsp], rcx

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	ebp, edx

; 634  :     case 4: return ZSTD_hash4Ptr(p, hBits);

	mov	QWORD PTR tv4769[rsp], r13

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	sub	ebp, ebx
	mov	DWORD PTR tv4785[rsp], eax
	mov	r15d, edx
	mov	DWORD PTR tv4787[rsp], ebp
	sub	r15d, r11d
	mov	ebx, edx
	mov	r11d, DWORD PTR mls$[rsp]
	sub	ebx, r10d
	mov	DWORD PTR tv4764[rsp], ebx
	mov	rcx, -3523014627327384477		; cf1bbcdcb7a56463H
	mov	DWORD PTR tv4803[rsp], r15d
	mov	r10, -3523014627193167104		; cf1bbcdcbfa56300H
	npad	2
$LL2@ZSTD_compr:
	mov	r9, QWORD PTR [rdi]
	mov	rdx, r9
	imul	rdx, rcx
	mov	ecx, eax

; 631  :     switch(mls)

	mov	eax, r11d

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	r14, rdx
	shr	r14, cl

; 631  :     switch(mls)

	sub	eax, 5
	je	$LN116@ZSTD_compr
	sub	eax, 1
	je	$LN117@ZSTD_compr
	sub	eax, 1
	je	SHORT $LN118@ZSTD_compr
	mov	r10, rdx
	cmp	eax, 1
	je	SHORT $LN119@ZSTD_compr

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	imul	r8d, r9d, -1640531535			; 9e3779b1H
	mov	rcx, r13

; 631  :     switch(mls)

	mov	eax, r11d

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	shr	r8, cl

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	ecx, ebp
	shr	r10, cl

; 631  :     switch(mls)

	sub	eax, 5
	je	$LN984@ZSTD_compr
	sub	eax, 1
	je	SHORT $LN983@ZSTD_compr
	sub	eax, 1
	je	SHORT $LN176@ZSTD_compr
	cmp	eax, 1
	je	$LN177@ZSTD_compr

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	mov	rcx, QWORD PTR tv4765[rsp]
	imul	edx, r9d, -1640531535			; 9e3779b1H

; 634  :     case 4: return ZSTD_hash4Ptr(p, hBits);

	jmp	SHORT $LN985@ZSTD_compr
$LN119@ZSTD_compr:

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	ecx, r15d
	mov	r8, rdx
	shr	r8, cl

; 638  :     case 8: return ZSTD_hash8Ptr(p, hBits);

	mov	ecx, ebp
	shr	r10, cl
	jmp	SHORT $LN177@ZSTD_compr
$LN118@ZSTD_compr:

; 622  : static size_t ZSTD_hash7(U64 u, U32 h) { return (size_t)(((u  << (64-56)) * prime7bytes) >> (64-h)) ; }

	mov	ecx, r15d
	mov	r8, r9
	imul	r8, r10

; 637  :     case 7: return ZSTD_hash7Ptr(p, hBits);

	mov	r10, rdx

; 622  : static size_t ZSTD_hash7(U64 u, U32 h) { return (size_t)(((u  << (64-56)) * prime7bytes) >> (64-h)) ; }

	shr	r8, cl

; 637  :     case 7: return ZSTD_hash7Ptr(p, hBits);

	mov	ecx, ebp
	shr	r10, cl
$LN176@ZSTD_compr:

; 622  : static size_t ZSTD_hash7(U64 u, U32 h) { return (size_t)(((u  << (64-56)) * prime7bytes) >> (64-h)) ; }

	mov	rax, -3523014627193167104		; cf1bbcdcbfa56300H

; 637  :     case 7: return ZSTD_hash7Ptr(p, hBits);

	jmp	SHORT $LN174@ZSTD_compr
$LN117@ZSTD_compr:

; 618  : static size_t ZSTD_hash6(U64 u, U32 h) { return (size_t)(((u  << (64-48)) * prime6bytes) >> (64-h)) ; }

	mov	rax, -3523014627193847808		; cf1bbcdcbf9b0000H

; 631  :     switch(mls)

	jmp	SHORT $LN996@ZSTD_compr
$LN983@ZSTD_compr:
	mov	rax, -3523014627193847808		; cf1bbcdcbf9b0000H

; 636  :     case 6: return ZSTD_hash6Ptr(p, hBits);

	jmp	SHORT $LN174@ZSTD_compr
$LN116@ZSTD_compr:

; 614  : static size_t ZSTD_hash5(U64 u, U32 h) { return (size_t)(((u  << (64-40)) * prime5bytes) >> (64-h)) ; }

	mov	rax, -3523014627271114752		; cf1bbcdcbb000000H
$LN996@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 132  :         U32 const current = (U32)(ip-base);

	mov	ecx, r15d
	mov	r8, r9
	imul	r8, rax
	mov	r10, rdx
	shr	r8, cl
	mov	ecx, ebp
	shr	r10, cl
	jmp	SHORT $LN174@ZSTD_compr
$LN984@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 631  :     switch(mls)

	mov	rax, -3523014627271114752		; cf1bbcdcbb000000H
$LN174@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 132  :         U32 const current = (U32)(ip-base);

	mov	rdx, r9
	imul	rdx, rax
$LN177@ZSTD_compr:
	mov	ecx, ebx
$LN985@ZSTD_compr:

; 133  :         U32 const matchIndexL = hashLong[h2];

	mov	rax, QWORD PTR hashLong$1$[rsp]
	mov	r15d, edi

; 134  :         U32 matchIndexS = hashSmall[h];

	mov	r11, QWORD PTR hashSmall$1$[rsp]
	shr	rdx, cl
	mov	rcx, QWORD PTR base$1$[rsp]
	mov	ebp, DWORD PTR [rax+r14*4]
	sub	r15d, ecx
	mov	r13d, DWORD PTR [r11+r8*4]

; 135  :         const BYTE* matchLong = base + matchIndexL;
; 136  :         const BYTE* match = base + matchIndexS;
; 137  :         const U32 repIndex = current + 1 - offset_1;

	mov	eax, DWORD PTR offset_1$1$[rsp]
	mov	DWORD PTR current$1$[rsp], r15d
	lea	r9, QWORD PTR [rcx+rbp]
	lea	rbx, QWORD PTR [rcx+r13]
	mov	ecx, r15d
	sub	ecx, eax
	inc	ecx

; 138  :         const BYTE* repMatch = (dictMode == ZSTD_dictMatchState

	cmp	DWORD PTR dictMode$[rsp], 2
	jne	SHORT $LN69@ZSTD_compr
	cmp	ecx, DWORD PTR prefixLowestIndex$1$[rsp]
	jae	SHORT $LN69@ZSTD_compr
	mov	rax, QWORD PTR hashSmall$1$[rsp]
	mov	r11d, ecx
	sub	r11d, DWORD PTR dictIndexDelta$1$[rsp]
	add	r11, QWORD PTR dictBase$1$[rsp]
	mov	DWORD PTR [rax+r8*4], r15d
	mov	rax, QWORD PTR hashLong$1$[rsp]
	mov	DWORD PTR [rax+r14*4], r15d
	jmp	SHORT $LN952@ZSTD_compr
$LN69@ZSTD_compr:

; 139  :                             && repIndex < prefixLowestIndex) ?
; 140  :                                dictBase + (repIndex - dictIndexDelta) :
; 141  :                                base + repIndex;
; 142  :         hashLong[h2] = hashSmall[h] = current;   /* update hash tables */

	mov	DWORD PTR [r11+r8*4], r15d
	mov	r8, QWORD PTR hashLong$1$[rsp]
	mov	r11d, ecx
	add	r11, QWORD PTR base$1$[rsp]
	mov	DWORD PTR [r8+r14*4], r15d

; 143  : 
; 144  :         /* check dictMatchState repcode */
; 145  :         if (dictMode == ZSTD_dictMatchState
; 146  :             && ((U32)((prefixLowestIndex-1) - repIndex) >= 3 /* intentional underflow */)
; 147  :             && (MEM_read32(repMatch) == MEM_read32(ip+1)) ) {

	mov	r8d, DWORD PTR dictMode$[rsp]
	cmp	r8d, 2
	jne	$LN25@ZSTD_compr
$LN952@ZSTD_compr:
	mov	r8d, DWORD PTR prefixLowestIndex$1$[rsp]
	mov	eax, r8d
	sub	eax, ecx
	dec	eax
	cmp	eax, 3
	jb	$LN982@ZSTD_compr
	mov	eax, DWORD PTR [rdi+1]
	lea	r14, QWORD PTR [rdi+1]
	cmp	DWORD PTR [r11], eax
	jne	$LN982@ZSTD_compr

; 148  :             const BYTE* repMatchEnd = repIndex < prefixLowestIndex ? dictEnd : iend;

	mov	r13, QWORD PTR iend$1$[rsp]

; 149  :             mLength = ZSTD_count_2segments(ip+1+4, repMatch+4, iend, repMatchEnd, prefixLowest) + 4;

	lea	rbp, QWORD PTR [rdi+5]
	cmp	ecx, r8d
	mov	rbx, r13
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	mov	rcx, rbp
	mov	r8, r13
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 148  :             const BYTE* repMatchEnd = repIndex < prefixLowestIndex ? dictEnd : iend;

	cmovb	rbx, QWORD PTR dictEnd$1$[rsp]

; 149  :             mLength = ZSTD_count_2segments(ip+1+4, repMatch+4, iend, repMatchEnd, prefixLowest) + 4;

	add	r11, 4
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	sub	rcx, r11

; 591  :     size_t const matchLength = ZSTD_count(ip, match, vEnd);

	mov	rdx, r11
	add	rcx, rbx
	cmp	rcx, r13
	cmovb	r8, rcx
	mov	rcx, rbp
	call	ZSTD_count
	mov	rdi, rax

; 592  :     if (match + matchLength != mEnd) return matchLength;

	add	rax, r11
	cmp	rax, rbx
	jne	SHORT $LN199@ZSTD_compr

; 593  :     DEBUGLOG(7, "ZSTD_count_2segments: found a 2-parts match (current length==%zu)", matchLength);
; 594  :     DEBUGLOG(7, "distance from match beginning to end dictionary = %zi", mEnd - match);
; 595  :     DEBUGLOG(7, "distance from current pos to end buffer = %zi", iEnd - ip);
; 596  :     DEBUGLOG(7, "next byte : ip==%02X, istart==%02X", ip[matchLength], *iStart);
; 597  :     DEBUGLOG(7, "final match length = %zu", matchLength + ZSTD_count(ip+matchLength, iStart, iEnd));
; 598  :     return matchLength + ZSTD_count(ip+matchLength, iStart, iEnd);

	mov	rdx, QWORD PTR prefixLowest$1$[rsp]
	lea	rcx, QWORD PTR [rdi+rbp]
	mov	r8, r13
	call	ZSTD_count
	add	rdi, rax
$LN199@ZSTD_compr:

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rcx, QWORD PTR [r12+24]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 149  :             mLength = ZSTD_count_2segments(ip+1+4, repMatch+4, iend, repMatchEnd, prefixLowest) + 4;

	lea	rdx, QWORD PTR [rdi+4]

; 150  :             ip++;

	mov	rdi, r14

; 151  :             ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, 0, mLength-MINMATCH);

	lea	r10, QWORD PTR [rdx-3]
	sub	r14, rsi
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	add	r13, -32				; ffffffffffffffe0H

; 442  :     BYTE const* const litEnd = literals + litLength;

	lea	r9, QWORD PTR [r14+rsi]

; 456  :     if (litEnd <= litLimit_w) {

	cmp	r9, r13
	ja	SHORT $LN205@ZSTD_compr
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rsi]
	movups	XMMWORD PTR [rcx], xmm0
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 462  :         if (litLength > 16) {

	cmp	r14, 16
	jbe	SHORT $LN227@ZSTD_compr

; 463  :             ZSTD_wildcopy(seqStorePtr->lit+16, literals+16, (ptrdiff_t)litLength-16, ZSTD_no_overlap);

	mov	rax, QWORD PTR [r12+24]
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	lea	rcx, QWORD PTR [r14-16]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 463  :             ZSTD_wildcopy(seqStorePtr->lit+16, literals+16, (ptrdiff_t)litLength-16, ZSTD_no_overlap);

	add	rax, 16
	add	rsi, 16
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	add	rcx, rax
	npad	12
$LL219@ZSTD_compr:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rsi]

; 289  :             COPY16(op, ip);

	lea	rsi, QWORD PTR [rsi+16]

; 243  :     memcpy(dst, src, 16);

	movups	XMMWORD PTR [rax], xmm0

; 289  :             COPY16(op, ip);

	add	rax, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rax, rcx
	jb	SHORT $LL219@ZSTD_compr
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	SHORT $LN227@ZSTD_compr
$LN205@ZSTD_compr:

; 424  :     if (ip <= ilimit_w) {

	cmp	rsi, r13
	ja	SHORT $LN837@ZSTD_compr
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	mov	r8, rcx
	sub	r8, rsi
	add	r8, r13
	sub	rsi, rcx
	npad	10
$LL236@ZSTD_compr:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rcx+rsi]
	movups	XMMWORD PTR [rcx], xmm0

; 289  :             COPY16(op, ip);

	add	rcx, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rcx, r8
	jb	SHORT $LL236@ZSTD_compr
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 427  :         ip = ilimit_w;

	mov	rcx, r8
	mov	rsi, r13
$LN837@ZSTD_compr:

; 428  :     }
; 429  :     while (ip < iend) *op++ = *ip++;

	cmp	rsi, r9
	jae	SHORT $LN227@ZSTD_compr
	sub	rcx, rsi
	npad	2
$LL876@ZSTD_compr:
	movzx	eax, BYTE PTR [rsi]
	mov	BYTE PTR [rsi+rcx], al
	inc	rsi
	cmp	rsi, r9
	jb	SHORT $LL876@ZSTD_compr
$LN227@ZSTD_compr:

; 468  :     seqStorePtr->lit += litLength;

	add	QWORD PTR [r12+24], r14
	mov	rcx, QWORD PTR [r12+8]

; 469  : 
; 470  :     /* literal Length */
; 471  :     if (litLength>0xFFFF) {

	cmp	r14, 65535				; 0000ffffH
	jbe	SHORT $LN911@ZSTD_compr

; 472  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 473  :         seqStorePtr->longLengthID = 1;
; 474  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [r12+72], 1
	sub	rax, QWORD PTR [r12]
	sar	rax, 3
	mov	DWORD PTR [r12+76], eax
$LN911@ZSTD_compr:

; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	WORD PTR [rcx+4], r14w

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	mov	rax, QWORD PTR [r12+8]
	mov	DWORD PTR [rax], 1
	mov	rcx, QWORD PTR [r12+8]

; 480  : 
; 481  :     /* match Length */
; 482  :     if (mlBase>0xFFFF) {

	cmp	r10, 65535				; 0000ffffH
	jbe	SHORT $LN912@ZSTD_compr

; 483  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 484  :         seqStorePtr->longLengthID = 2;
; 485  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [r12+72], 2
	sub	rax, QWORD PTR [r12]
	sar	rax, 3
	mov	DWORD PTR [r12+76], eax
$LN912@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 152  :             goto _match_stored;

	mov	ebx, DWORD PTR offset_2$1$[rsp]
	mov	r14, QWORD PTR iend$1$[rsp]
	mov	ebp, DWORD PTR offset_1$1$[rsp]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 487  :     seqStorePtr->sequences[0].matchLength = (U16)mlBase;

	mov	WORD PTR [rcx+6], r10w
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 152  :             goto _match_stored;

	jmp	$LN987@ZSTD_compr
$LN25@ZSTD_compr:

; 153  :         }
; 154  : 
; 155  :         /* check noDict repcode */
; 156  :         if ( dictMode == ZSTD_noDict
; 157  :           && ((offset_1 > 0) & (MEM_read32(ip+1-offset_1) == MEM_read32(ip+1)))) {

	test	r8d, r8d
	jne	$LN26@ZSTD_compr
	xor	r14d, r14d
	lea	r11, QWORD PTR [rdi+1]
	mov	ecx, r14d
	mov	r8, rdi
	sub	r8, rax
	mov	eax, DWORD PTR [r11]
	cmp	DWORD PTR [r8+1], eax
	mov	eax, r14d
	sete	cl
	cmp	DWORD PTR offset_1$1$[rsp], eax
	seta	al
	test	ecx, eax
	je	$LN982@ZSTD_compr
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 564  :     const BYTE* const pInLoopLimit = pInLimit - (sizeof(size_t)-1);

	mov	r14, QWORD PTR iend$1$[rsp]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 158  :             mLength = ZSTD_count(ip+1+4, ip+1+4-offset_1, iend) + 4;

	lea	rcx, QWORD PTR [r8+5]
	add	rdi, 5
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 563  :     const BYTE* const pStart = pIn;

	mov	r8, rdi

; 564  :     const BYTE* const pInLoopLimit = pInLimit - (sizeof(size_t)-1);

	lea	rdx, QWORD PTR [r14-7]

; 565  : 
; 566  :     if (pIn < pInLoopLimit) {

	cmp	rdi, rdx
	jae	SHORT $LN244@ZSTD_compr

; 567  :         { size_t const diff = MEM_readST(pMatch) ^ MEM_readST(pIn);

	mov	rax, QWORD PTR [rdi]
	xor	rax, QWORD PTR [rcx]

; 568  :           if (diff) return ZSTD_NbCommonBytes(diff); }

	je	SHORT $LN246@ZSTD_compr

; 501  :             unsigned long r = 0;

	xor	ebx, ebx

; 502  :             return _BitScanForward64( &r, (U64)val ) ? (unsigned)(r >> 3) : 0;

	bsf	rax, rax
	mov	DWORD PTR r$6[rsp], ebx
	je	SHORT $LN261@ZSTD_compr
	shr	eax, 3

; 568  :           if (diff) return ZSTD_NbCommonBytes(diff); }

	mov	edx, eax
	jmp	SHORT $LN242@ZSTD_compr
$LN261@ZSTD_compr:

; 502  :             return _BitScanForward64( &r, (U64)val ) ? (unsigned)(r >> 3) : 0;

	mov	eax, ebx

; 568  :           if (diff) return ZSTD_NbCommonBytes(diff); }

	mov	edx, ebx
	jmp	SHORT $LN242@ZSTD_compr
$LN246@ZSTD_compr:

; 569  :         pIn+=sizeof(size_t); pMatch+=sizeof(size_t);

	add	rdi, 8
	add	rcx, 8

; 570  :         while (pIn < pInLoopLimit) {

	cmp	rdi, rdx
	jae	SHORT $LN244@ZSTD_compr
	npad	3
$LL243@ZSTD_compr:

; 571  :             size_t const diff = MEM_readST(pMatch) ^ MEM_readST(pIn);

	mov	rax, QWORD PTR [rdi]
	xor	rax, QWORD PTR [rcx]

; 572  :             if (!diff) { pIn+=sizeof(size_t); pMatch+=sizeof(size_t); continue; }

	jne	$LN247@ZSTD_compr
	add	rdi, 8
	add	rcx, 8
	cmp	rdi, rdx
	jb	SHORT $LL243@ZSTD_compr
$LN244@ZSTD_compr:

; 575  :     }   }
; 576  :     if (MEM_64bits() && (pIn<(pInLimit-3)) && (MEM_read32(pMatch) == MEM_read32(pIn))) { pIn+=4; pMatch+=4; }

	lea	rax, QWORD PTR [r14-3]
	cmp	rdi, rax
	jae	SHORT $LN248@ZSTD_compr
	mov	eax, DWORD PTR [rdi]
	cmp	DWORD PTR [rcx], eax
	jne	SHORT $LN248@ZSTD_compr
	add	rdi, 4
	add	rcx, 4
$LN248@ZSTD_compr:

; 577  :     if ((pIn<(pInLimit-1)) && (MEM_read16(pMatch) == MEM_read16(pIn))) { pIn+=2; pMatch+=2; }

	lea	rax, QWORD PTR [r14-1]
	cmp	rdi, rax
	jae	SHORT $LN249@ZSTD_compr
	movzx	eax, WORD PTR [rdi]
	cmp	WORD PTR [rcx], ax
	jne	SHORT $LN249@ZSTD_compr
	add	rdi, 2
	add	rcx, 2
$LN249@ZSTD_compr:

; 578  :     if ((pIn<pInLimit) && (*pMatch == *pIn)) pIn++;

	cmp	rdi, r14
	jae	SHORT $LN250@ZSTD_compr
	movzx	eax, BYTE PTR [rdi]
	cmp	BYTE PTR [rcx], al
	jne	SHORT $LN250@ZSTD_compr
	inc	rdi
$LN250@ZSTD_compr:

; 579  :     return (size_t)(pIn - pStart);

	mov	rdx, rdi
	sub	rdx, r8
$LN242@ZSTD_compr:

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rcx, QWORD PTR [r12+24]
	lea	r13, QWORD PTR [r14-32]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 158  :             mLength = ZSTD_count(ip+1+4, ip+1+4-offset_1, iend) + 4;

	add	rdx, 4

; 159  :             ip++;

	mov	rdi, r11

; 160  :             ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, 0, mLength-MINMATCH);

	sub	r11, rsi
	lea	r10, QWORD PTR [rdx-3]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	lea	r9, QWORD PTR [r11+rsi]

; 456  :     if (litEnd <= litLimit_w) {

	cmp	r9, r13
	ja	SHORT $LN286@ZSTD_compr
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rsi]
	movups	XMMWORD PTR [rcx], xmm0
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 462  :         if (litLength > 16) {

	cmp	r11, 16
	jbe	$LN308@ZSTD_compr

; 463  :             ZSTD_wildcopy(seqStorePtr->lit+16, literals+16, (ptrdiff_t)litLength-16, ZSTD_no_overlap);

	mov	rax, QWORD PTR [r12+24]
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	lea	rcx, QWORD PTR [r11-16]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 463  :             ZSTD_wildcopy(seqStorePtr->lit+16, literals+16, (ptrdiff_t)litLength-16, ZSTD_no_overlap);

	add	rax, 16
	add	rsi, 16
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	add	rcx, rax
$LL300@ZSTD_compr:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rsi]

; 289  :             COPY16(op, ip);

	lea	rsi, QWORD PTR [rsi+16]

; 243  :     memcpy(dst, src, 16);

	movups	XMMWORD PTR [rax], xmm0

; 289  :             COPY16(op, ip);

	add	rax, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rax, rcx
	jb	SHORT $LL300@ZSTD_compr
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	SHORT $LN308@ZSTD_compr
$LN247@ZSTD_compr:

; 501  :             unsigned long r = 0;

	xor	ebx, ebx

; 502  :             return _BitScanForward64( &r, (U64)val ) ? (unsigned)(r >> 3) : 0;

	bsf	rcx, rax
	mov	DWORD PTR r$5[rsp], ebx
	je	SHORT $LN277@ZSTD_compr
	shr	ecx, 3

; 574  :             return (size_t)(pIn - pStart);

	mov	edx, ecx
	sub	rdx, r8
	add	rdx, rdi
	jmp	SHORT $LN242@ZSTD_compr
$LN277@ZSTD_compr:
	mov	edx, ebx

; 502  :             return _BitScanForward64( &r, (U64)val ) ? (unsigned)(r >> 3) : 0;

	mov	ecx, ebx

; 574  :             return (size_t)(pIn - pStart);

	sub	rdx, r8
	add	rdx, rdi
	jmp	$LN242@ZSTD_compr
$LN286@ZSTD_compr:

; 424  :     if (ip <= ilimit_w) {

	cmp	rsi, r13
	ja	SHORT $LN841@ZSTD_compr
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	mov	r8, rcx
	sub	r8, rsi
	add	r8, r13
	sub	rsi, rcx
	npad	13
$LL317@ZSTD_compr:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rcx+rsi]
	movups	XMMWORD PTR [rcx], xmm0

; 289  :             COPY16(op, ip);

	add	rcx, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rcx, r8
	jb	SHORT $LL317@ZSTD_compr
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 427  :         ip = ilimit_w;

	mov	rcx, r8
	mov	rsi, r13
$LN841@ZSTD_compr:

; 428  :     }
; 429  :     while (ip < iend) *op++ = *ip++;

	cmp	rsi, r9
	jae	SHORT $LN308@ZSTD_compr
	sub	rcx, rsi
	npad	2
$LL878@ZSTD_compr:
	movzx	eax, BYTE PTR [rsi]
	mov	BYTE PTR [rsi+rcx], al
	inc	rsi
	cmp	rsi, r9
	jb	SHORT $LL878@ZSTD_compr
$LN308@ZSTD_compr:

; 468  :     seqStorePtr->lit += litLength;

	add	QWORD PTR [r12+24], r11
	mov	rcx, QWORD PTR [r12+8]

; 469  : 
; 470  :     /* literal Length */
; 471  :     if (litLength>0xFFFF) {

	cmp	r11, 65535				; 0000ffffH
	jbe	SHORT $LN913@ZSTD_compr

; 472  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 473  :         seqStorePtr->longLengthID = 1;
; 474  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [r12+72], 1
	sub	rax, QWORD PTR [r12]
	sar	rax, 3
	mov	DWORD PTR [r12+76], eax
$LN913@ZSTD_compr:

; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	WORD PTR [rcx+4], r11w

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	mov	rax, QWORD PTR [r12+8]
	mov	DWORD PTR [rax], 1
	mov	rcx, QWORD PTR [r12+8]

; 480  : 
; 481  :     /* match Length */
; 482  :     if (mlBase>0xFFFF) {

	cmp	r10, 65535				; 0000ffffH
	jbe	SHORT $LN914@ZSTD_compr

; 483  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 484  :         seqStorePtr->longLengthID = 2;
; 485  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [r12+72], 2
	sub	rax, QWORD PTR [r12]
	sar	rax, 3
	mov	DWORD PTR [r12+76], eax
$LN914@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 161  :             goto _match_stored;

	mov	ebx, DWORD PTR offset_2$1$[rsp]
	mov	ebp, DWORD PTR offset_1$1$[rsp]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 487  :     seqStorePtr->sequences[0].matchLength = (U16)mlBase;

	mov	WORD PTR [rcx+6], r10w
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 161  :             goto _match_stored;

	jmp	$LN987@ZSTD_compr
$LN982@ZSTD_compr:

; 162  :         }
; 163  : 
; 164  :         if (matchIndexL > prefixLowestIndex) {

	mov	r8d, DWORD PTR dictMode$[rsp]
$LN26@ZSTD_compr:
	cmp	ebp, DWORD PTR prefixLowestIndex$1$[rsp]
	jbe	$LN27@ZSTD_compr

; 165  :             /* check prefix long match */
; 166  :             if (MEM_read64(matchLong) == MEM_read64(ip)) {

	mov	rax, QWORD PTR [rdi]
	cmp	QWORD PTR [r9], rax
	jne	$LN970@ZSTD_compr
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 564  :     const BYTE* const pInLoopLimit = pInLimit - (sizeof(size_t)-1);

	mov	r14, QWORD PTR iend$1$[rsp]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 167  :                 mLength = ZSTD_count(ip+8, matchLong+8, iend) + 8;

	lea	rcx, QWORD PTR [rdi+8]
	lea	rdx, QWORD PTR [r9+8]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 563  :     const BYTE* const pStart = pIn;

	mov	r10, rcx

; 564  :     const BYTE* const pInLoopLimit = pInLimit - (sizeof(size_t)-1);

	lea	r8, QWORD PTR [r14-7]

; 565  : 
; 566  :     if (pIn < pInLoopLimit) {

	cmp	rcx, r8
	jae	SHORT $LN325@ZSTD_compr

; 567  :         { size_t const diff = MEM_readST(pMatch) ^ MEM_readST(pIn);

	mov	rax, QWORD PTR [rdx]
	xor	rax, QWORD PTR [rcx]

; 568  :           if (diff) return ZSTD_NbCommonBytes(diff); }

	je	SHORT $LN327@ZSTD_compr

; 501  :             unsigned long r = 0;

	xor	r11d, r11d

; 502  :             return _BitScanForward64( &r, (U64)val ) ? (unsigned)(r >> 3) : 0;

	bsf	rax, rax
	mov	DWORD PTR r$4[rsp], r11d
	je	SHORT $LN342@ZSTD_compr
	shr	eax, 3

; 568  :           if (diff) return ZSTD_NbCommonBytes(diff); }

	mov	edx, eax
	jmp	SHORT $LN323@ZSTD_compr
$LN342@ZSTD_compr:

; 502  :             return _BitScanForward64( &r, (U64)val ) ? (unsigned)(r >> 3) : 0;

	mov	eax, r11d

; 568  :           if (diff) return ZSTD_NbCommonBytes(diff); }

	mov	edx, eax
	jmp	SHORT $LN323@ZSTD_compr
$LN327@ZSTD_compr:

; 569  :         pIn+=sizeof(size_t); pMatch+=sizeof(size_t);

	add	rcx, 8
	add	rdx, 8

; 570  :         while (pIn < pInLoopLimit) {

	cmp	rcx, r8
	jae	SHORT $LN325@ZSTD_compr
$LL324@ZSTD_compr:

; 571  :             size_t const diff = MEM_readST(pMatch) ^ MEM_readST(pIn);

	mov	rax, QWORD PTR [rdx]
	xor	rax, QWORD PTR [rcx]

; 572  :             if (!diff) { pIn+=sizeof(size_t); pMatch+=sizeof(size_t); continue; }

	jne	$LN328@ZSTD_compr
	add	rcx, 8
	add	rdx, 8
	cmp	rcx, r8
	jb	SHORT $LL324@ZSTD_compr
$LN325@ZSTD_compr:

; 575  :     }   }
; 576  :     if (MEM_64bits() && (pIn<(pInLimit-3)) && (MEM_read32(pMatch) == MEM_read32(pIn))) { pIn+=4; pMatch+=4; }

	lea	rax, QWORD PTR [r14-3]
	cmp	rcx, rax
	jae	SHORT $LN329@ZSTD_compr
	mov	eax, DWORD PTR [rcx]
	cmp	DWORD PTR [rdx], eax
	jne	SHORT $LN329@ZSTD_compr
	add	rcx, 4
	add	rdx, 4
$LN329@ZSTD_compr:

; 577  :     if ((pIn<(pInLimit-1)) && (MEM_read16(pMatch) == MEM_read16(pIn))) { pIn+=2; pMatch+=2; }

	lea	rax, QWORD PTR [r14-1]
	cmp	rcx, rax
	jae	SHORT $LN330@ZSTD_compr
	movzx	eax, WORD PTR [rcx]
	cmp	WORD PTR [rdx], ax
	jne	SHORT $LN330@ZSTD_compr
	add	rcx, 2
	add	rdx, 2
$LN330@ZSTD_compr:

; 578  :     if ((pIn<pInLimit) && (*pMatch == *pIn)) pIn++;

	cmp	rcx, r14
	jae	SHORT $LN331@ZSTD_compr
	movzx	eax, BYTE PTR [rcx]
	cmp	BYTE PTR [rdx], al
	jne	SHORT $LN331@ZSTD_compr
	inc	rcx
$LN331@ZSTD_compr:

; 579  :     return (size_t)(pIn - pStart);

	mov	rdx, rcx
	sub	rdx, r10
	xor	r11d, r11d
$LN323@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 169  :                 while (((ip>anchor) & (matchLong>prefixLowest)) && (ip[-1] == matchLong[-1])) { ip--; matchLong--; mLength++; } /* catch up */

	mov	rbp, QWORD PTR prefixLowest$1$[rsp]
	add	rdx, 8
	mov	ecx, r11d
	mov	eax, r11d
	mov	r10d, edi
	sub	r10d, r9d
	cmp	r9, rbp
	mov	DWORD PTR offset$1$[rsp], r10d
	seta	cl
	cmp	rdi, rsi
	seta	al
	test	ecx, eax
	je	$_match_found$998
$LL4@ZSTD_compr:
	movzx	eax, BYTE PTR [r9-1]
	lea	r8, QWORD PTR [rdi-1]
	dec	r9
	cmp	BYTE PTR [r8], al
	jne	$_match_found$998
	inc	rdx
	mov	ecx, r11d
	cmp	r9, rbp
	mov	eax, r11d
	mov	rdi, r8
	seta	cl
	cmp	r8, rsi
	seta	al
	test	ecx, eax
	jne	SHORT $LL4@ZSTD_compr

; 170  :                 goto _match_found;

	jmp	$_match_found$998
$LN328@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 501  :             unsigned long r = 0;

	xor	r11d, r11d

; 502  :             return _BitScanForward64( &r, (U64)val ) ? (unsigned)(r >> 3) : 0;

	bsf	rdx, rax
	mov	DWORD PTR r$3[rsp], r11d
	je	SHORT $LN358@ZSTD_compr
	shr	edx, 3

; 574  :             return (size_t)(pIn - pStart);

	sub	rdx, r10
	add	rdx, rcx
	jmp	SHORT $LN323@ZSTD_compr
$LN358@ZSTD_compr:

; 502  :             return _BitScanForward64( &r, (U64)val ) ? (unsigned)(r >> 3) : 0;

	mov	edx, r11d

; 574  :             return (size_t)(pIn - pStart);

	sub	rdx, r10
	add	rdx, rcx
	jmp	$LN323@ZSTD_compr
$LN27@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 172  :         } else if (dictMode == ZSTD_dictMatchState) {

	mov	r11, QWORD PTR dictBase$1$[rsp]
	cmp	r8d, 2
	jne	$LN971@ZSTD_compr

; 173  :             /* check dictMatchState long match */
; 174  :             U32 const dictMatchIndexL = dictHashLong[dictHL];

	mov	rax, QWORD PTR dictHashLong$1$[rsp]
	mov	r15d, DWORD PTR [rax+r10*4]

; 175  :             const BYTE* dictMatchL = dictBase + dictMatchIndexL;
; 176  :             assert(dictMatchL < dictEnd);
; 177  : 
; 178  :             if (dictMatchL > dictStart && MEM_read64(dictMatchL) == MEM_read64(ip)) {

	mov	r10, QWORD PTR dictStart$1$[rsp]
	lea	r14, QWORD PTR [r11+r15]
	cmp	r14, r10
	jbe	$LN31@ZSTD_compr
	mov	rax, QWORD PTR [rdi]
	cmp	QWORD PTR [r14], rax
	jne	$LN31@ZSTD_compr
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	mov	r13, QWORD PTR iend$1$[rsp]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 179  :                 mLength = ZSTD_count_2segments(ip+8, dictMatchL+8, iend, dictEnd, prefixLowest) + 8;

	lea	rbp, QWORD PTR [rdi+8]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	mov	rcx, QWORD PTR dictEnd$1$[rsp]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 179  :                 mLength = ZSTD_count_2segments(ip+8, dictMatchL+8, iend, dictEnd, prefixLowest) + 8;

	lea	r11, QWORD PTR [r14+8]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	mov	rax, rbp
	mov	r8, r13
	sub	rax, r11

; 591  :     size_t const matchLength = ZSTD_count(ip, match, vEnd);

	mov	rdx, r11
	add	rcx, rax
	cmp	rcx, r13
	cmovb	r8, rcx
	mov	rcx, rbp
	call	ZSTD_count
	mov	rbx, rax

; 592  :     if (match + matchLength != mEnd) return matchLength;

	add	rax, r11
	cmp	rax, QWORD PTR dictEnd$1$[rsp]
	jne	SHORT $LN366@ZSTD_compr

; 593  :     DEBUGLOG(7, "ZSTD_count_2segments: found a 2-parts match (current length==%zu)", matchLength);
; 594  :     DEBUGLOG(7, "distance from match beginning to end dictionary = %zi", mEnd - match);
; 595  :     DEBUGLOG(7, "distance from current pos to end buffer = %zi", iEnd - ip);
; 596  :     DEBUGLOG(7, "next byte : ip==%02X, istart==%02X", ip[matchLength], *iStart);
; 597  :     DEBUGLOG(7, "final match length = %zu", matchLength + ZSTD_count(ip+matchLength, iStart, iEnd));
; 598  :     return matchLength + ZSTD_count(ip+matchLength, iStart, iEnd);

	mov	rdx, QWORD PTR prefixLowest$1$[rsp]
	lea	rcx, QWORD PTR [rbx+rbp]
	mov	r8, r13
	call	ZSTD_count
	add	rbx, rax
$LN366@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 180  :                 offset = (U32)(current - dictMatchIndexL - dictIndexDelta);

	mov	r10d, DWORD PTR current$1$[rsp]
	lea	rdx, QWORD PTR [rbx+8]
	sub	r10d, r15d
	sub	r10d, DWORD PTR dictIndexDelta$1$[rsp]
	mov	DWORD PTR offset$1$[rsp], r10d

; 181  :                 while (((ip>anchor) & (dictMatchL>dictStart)) && (ip[-1] == dictMatchL[-1])) { ip--; dictMatchL--; mLength++; } /* catch up */

	cmp	rdi, rsi
	jbe	SHORT $LN960@ZSTD_compr
	mov	r9, QWORD PTR dictStart$1$[rsp]
	npad	3
$LL6@ZSTD_compr:
	movzx	eax, BYTE PTR [r14-1]
	lea	r8, QWORD PTR [rdi-1]
	dec	r14
	cmp	BYTE PTR [r8], al
	jne	SHORT $LN960@ZSTD_compr
	xor	eax, eax
	inc	rdx
	cmp	r8, rsi
	mov	ecx, eax
	mov	rdi, r8
	seta	cl
	cmp	r14, r9
	seta	al
	test	ecx, eax
	jne	SHORT $LL6@ZSTD_compr
$LN960@ZSTD_compr:

; 245  :         }
; 246  : 
; 247  :         /* fall-through */
; 248  : 
; 249  : _match_found:
; 250  :         offset_2 = offset_1;

	mov	r15d, DWORD PTR current$1$[rsp]
	mov	r14, r13
	jmp	$_match_found$998
$LN970@ZSTD_compr:

; 165  :             /* check prefix long match */
; 166  :             if (MEM_read64(matchLong) == MEM_read64(ip)) {

	mov	r11, QWORD PTR dictBase$1$[rsp]
$LN971@ZSTD_compr:

; 182  :                 goto _match_found;
; 183  :         }   }
; 184  : 
; 185  :         if (matchIndexS > prefixLowestIndex) {

	mov	r10, QWORD PTR dictStart$1$[rsp]
$LN31@ZSTD_compr:
	mov	r9d, DWORD PTR prefixLowestIndex$1$[rsp]
	cmp	r13d, r9d
	jbe	$LN32@ZSTD_compr

; 186  :             /* check prefix short match */
; 187  :             if (MEM_read32(match) == MEM_read32(ip)) {

	mov	eax, DWORD PTR [rdi]
	mov	rbp, rbx
	cmp	DWORD PTR [rbx], eax
	je	$_search_next_long$999
$LN36@ZSTD_compr:

; 197  :                 goto _search_next_long;
; 198  :         }   }
; 199  : 
; 200  :         ip += ((ip-anchor) >> kSearchStrength) + 1;

	mov	rax, rdi
	inc	rdi
	sub	rax, rsi
	sar	rax, 8
	add	rdi, rax
$LN978@ZSTD_compr:

; 116  :     }
; 117  :     if (dictMode == ZSTD_dictMatchState) {
; 118  :         /* dictMatchState repCode checks don't currently handle repCode == 0
; 119  :          * disabling. */
; 120  :         assert(offset_1 <= dictAndPrefixLength);
; 121  :         assert(offset_2 <= dictAndPrefixLength);
; 122  :     }
; 123  : 
; 124  :     /* Main Search Loop */
; 125  :     while (ip < ilimit) {   /* < instead of <=, because repcode check at (ip+1) */

	mov	r11d, DWORD PTR mls$[rsp]
$LN875@ZSTD_compr:
	mov	rcx, -3523014627327384477		; cf1bbcdcb7a56463H
	mov	r15d, DWORD PTR tv4803[rsp]
	mov	r10, -3523014627193167104		; cf1bbcdcbfa56300H
	mov	r13, QWORD PTR tv4769[rsp]
	mov	eax, DWORD PTR tv4785[rsp]
	mov	ebp, DWORD PTR tv4787[rsp]
	mov	ebx, DWORD PTR tv4764[rsp]
	cmp	rdi, QWORD PTR ilimit$1$[rsp]
	jb	$LL2@ZSTD_compr
	mov	r15d, DWORD PTR offset_2$1$[rsp]
	mov	r13, QWORD PTR iend$1$[rsp]
$LN3@ZSTD_compr:

; 309  : 
; 310  :     /* save reps for next block */
; 311  :     rep[0] = offset_1 ? offset_1 : offsetSaved;

	mov	eax, DWORD PTR offset_1$1$[rsp]
	test	eax, eax
	mov	edx, DWORD PTR offsetSaved$1$[rsp]
	mov	ecx, edx
	cmovne	ecx, eax
	mov	rax, QWORD PTR rep$[rsp]

; 312  :     rep[1] = offset_2 ? offset_2 : offsetSaved;

	test	r15d, r15d
	cmovne	edx, r15d

; 313  : 
; 314  :     /* Return the last literals size */
; 315  :     return (size_t)(iend - anchor);

	sub	r13, rsi
	mov	DWORD PTR [rax], ecx
	mov	DWORD PTR [rax+4], edx
	mov	rax, r13

; 316  : }

	add	rsp, 200				; 000000c8H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
$LN32@ZSTD_compr:

; 188  :                 goto _search_next_long;
; 189  :             }
; 190  :         } else if (dictMode == ZSTD_dictMatchState) {

	cmp	r8d, 2
	jne	$LN36@ZSTD_compr

; 191  :             /* check dictMatchState short match */
; 192  :             U32 const dictMatchIndexS = dictHashSmall[dictHS];

	mov	rax, QWORD PTR dictHashSmall$1$[rsp]

; 193  :             match = dictBase + dictMatchIndexS;
; 194  :             matchIndexS = dictMatchIndexS + dictIndexDelta;

	mov	r13d, DWORD PTR dictIndexDelta$1$[rsp]
	mov	ecx, DWORD PTR [rax+rdx*4]
	add	r13d, ecx
	lea	rbx, QWORD PTR [r11+rcx]

; 195  : 
; 196  :             if (match > dictStart && MEM_read32(match) == MEM_read32(ip)) {

	cmp	rbx, r10
	jbe	$LN36@ZSTD_compr
	mov	eax, DWORD PTR [rdi]
	mov	rbp, rbx
	cmp	DWORD PTR [rbx], eax
	jne	$LN36@ZSTD_compr
$_search_next_long$999:
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	ecx, DWORD PTR tv4785[rsp]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 208  :         {   size_t const hl3 = ZSTD_hashPtr(ip+1, hBitsL, 8);

	lea	r15, QWORD PTR [rdi+1]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	r8, QWORD PTR [r15]
	mov	rax, -3523014627327384477		; cf1bbcdcb7a56463H
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 210  :             U32 const matchIndexL3 = hashLong[hl3];

	mov	r14, QWORD PTR hashLong$1$[rsp]

; 211  :             const BYTE* matchL3 = base + matchIndexL3;

	mov	r11, QWORD PTR base$1$[rsp]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	imul	r8, rax
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 212  :             hashLong[hl3] = current + 1;

	mov	eax, DWORD PTR current$1$[rsp]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rdx, r8
	shr	rdx, cl
	mov	ecx, DWORD PTR tv4787[rsp]
	shr	r8, cl
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 210  :             U32 const matchIndexL3 = hashLong[hl3];

	mov	ecx, DWORD PTR [r14+rdx*4]

; 211  :             const BYTE* matchL3 = base + matchIndexL3;

	add	r11, rcx

; 212  :             hashLong[hl3] = current + 1;

	inc	eax
	mov	DWORD PTR [r14+rdx*4], eax

; 213  : 
; 214  :             /* check prefix long +1 match */
; 215  :             if (matchIndexL3 > prefixLowestIndex) {

	cmp	ecx, r9d
	jbe	$LN37@ZSTD_compr

; 216  :                 if (MEM_read64(matchL3) == MEM_read64(ip+1)) {

	mov	rax, QWORD PTR [r15]
	cmp	QWORD PTR [r11], rax
	jne	$LN979@ZSTD_compr

; 217  :                     mLength = ZSTD_count(ip+9, matchL3+8, iend) + 8;

	mov	r14, QWORD PTR iend$1$[rsp]
	lea	rdx, QWORD PTR [r11+8]
	mov	r8, r14
	lea	rcx, QWORD PTR [rdi+9]
	call	ZSTD_count

; 218  :                     ip++;
; 219  :                     offset = (U32)(ip-matchL3);
; 220  :                     while (((ip>anchor) & (matchL3>prefixLowest)) && (ip[-1] == matchL3[-1])) { ip--; matchL3--; mLength++; } /* catch up */

	mov	rbp, QWORD PTR prefixLowest$1$[rsp]
	xor	r9d, r9d
	mov	ecx, r9d
	mov	r10d, r15d
	sub	r10d, r11d
	mov	rdi, r15
	cmp	r11, rbp
	mov	DWORD PTR offset$1$[rsp], r10d
	lea	rdx, QWORD PTR [rax+8]
	mov	eax, r9d
	seta	cl
	cmp	r15, rsi
	seta	al
	test	ecx, eax
	je	SHORT $LN958@ZSTD_compr
	npad	2
$LL8@ZSTD_compr:
	movzx	eax, BYTE PTR [r11-1]
	lea	r8, QWORD PTR [rdi-1]
	dec	r11
	cmp	BYTE PTR [r8], al
	jne	SHORT $LN958@ZSTD_compr
	inc	rdx
	mov	ecx, r9d
	cmp	r11, rbp
	mov	eax, r9d
	mov	rdi, r8
	seta	cl
	cmp	r8, rsi
	seta	al
	test	ecx, eax
	jne	SHORT $LL8@ZSTD_compr
$LN958@ZSTD_compr:

; 245  :         }
; 246  : 
; 247  :         /* fall-through */
; 248  : 
; 249  : _match_found:
; 250  :         offset_2 = offset_1;

	mov	r15d, DWORD PTR current$1$[rsp]
	jmp	$_match_found$998
$LN37@ZSTD_compr:

; 221  :                     goto _match_found;
; 222  :                 }
; 223  :             } else if (dictMode == ZSTD_dictMatchState) {

	mov	ecx, DWORD PTR dictMode$[rsp]
	cmp	ecx, 2
	jne	$LN42@ZSTD_compr

; 224  :                 /* check dict long +1 match */
; 225  :                 U32 const dictMatchIndexL3 = dictHashLong[dictHLNext];

	mov	rax, QWORD PTR dictHashLong$1$[rsp]
	mov	r12d, DWORD PTR [rax+r8*4]

; 226  :                 const BYTE* dictMatchL3 = dictBase + dictMatchIndexL3;

	mov	r14d, r12d
	add	r14, QWORD PTR dictBase$1$[rsp]

; 227  :                 assert(dictMatchL3 < dictEnd);
; 228  :                 if (dictMatchL3 > dictStart && MEM_read64(dictMatchL3) == MEM_read64(ip+1)) {

	cmp	r14, r10
	jbe	$LN956@ZSTD_compr
	mov	rax, QWORD PTR [r15]
	cmp	QWORD PTR [r14], rax
	jne	$LN956@ZSTD_compr
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	mov	rbp, QWORD PTR iend$1$[rsp]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 229  :                     mLength = ZSTD_count_2segments(ip+1+8, dictMatchL3+8, iend, dictEnd, prefixLowest) + 8;

	lea	r11, QWORD PTR [r14+8]
	add	rdi, 9
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	mov	r8, rbp
	mov	rcx, rdi

; 591  :     size_t const matchLength = ZSTD_count(ip, match, vEnd);

	mov	rdx, r11
	sub	rcx, r11
	add	rcx, QWORD PTR dictEnd$1$[rsp]
	cmp	rcx, rbp
	cmovb	r8, rcx
	mov	rcx, rdi
	call	ZSTD_count
	mov	rbx, rax

; 592  :     if (match + matchLength != mEnd) return matchLength;

	add	rax, r11
	cmp	rax, QWORD PTR dictEnd$1$[rsp]
	jne	SHORT $LN429@ZSTD_compr

; 593  :     DEBUGLOG(7, "ZSTD_count_2segments: found a 2-parts match (current length==%zu)", matchLength);
; 594  :     DEBUGLOG(7, "distance from match beginning to end dictionary = %zi", mEnd - match);
; 595  :     DEBUGLOG(7, "distance from current pos to end buffer = %zi", iEnd - ip);
; 596  :     DEBUGLOG(7, "next byte : ip==%02X, istart==%02X", ip[matchLength], *iStart);
; 597  :     DEBUGLOG(7, "final match length = %zu", matchLength + ZSTD_count(ip+matchLength, iStart, iEnd));
; 598  :     return matchLength + ZSTD_count(ip+matchLength, iStart, iEnd);

	mov	rdx, QWORD PTR prefixLowest$1$[rsp]
	lea	rcx, QWORD PTR [rbx+rdi]
	mov	r8, rbp
	call	ZSTD_count
	add	rbx, rax
$LN429@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 231  :                     offset = (U32)(current + 1 - dictMatchIndexL3 - dictIndexDelta);

	mov	r10d, DWORD PTR current$1$[rsp]
	lea	rdx, QWORD PTR [rbx+8]
	sub	r10d, r12d
	mov	rdi, r15
	sub	r10d, DWORD PTR dictIndexDelta$1$[rsp]
	inc	r10d
	mov	DWORD PTR offset$1$[rsp], r10d

; 232  :                     while (((ip>anchor) & (dictMatchL3>dictStart)) && (ip[-1] == dictMatchL3[-1])) { ip--; dictMatchL3--; mLength++; } /* catch up */

	cmp	r15, rsi
	jbe	SHORT $LN954@ZSTD_compr
	mov	r9, QWORD PTR dictStart$1$[rsp]
	npad	6
$LL10@ZSTD_compr:
	movzx	eax, BYTE PTR [r14-1]
	lea	r8, QWORD PTR [rdi-1]
	dec	r14
	cmp	BYTE PTR [r8], al
	jne	SHORT $LN954@ZSTD_compr
	xor	eax, eax
	inc	rdx
	cmp	r8, rsi
	mov	ecx, eax
	mov	rdi, r8
	seta	cl
	cmp	r14, r9
	seta	al
	test	ecx, eax
	jne	SHORT $LL10@ZSTD_compr
$LN954@ZSTD_compr:

; 245  :         }
; 246  : 
; 247  :         /* fall-through */
; 248  : 
; 249  : _match_found:
; 250  :         offset_2 = offset_1;

	mov	r12, QWORD PTR seqStore$[rsp]
	mov	r14, rbp
	mov	r15d, DWORD PTR current$1$[rsp]
	jmp	$_match_found$998
$LN956@ZSTD_compr:

; 233  :                     goto _match_found;
; 234  :         }   }   }
; 235  : 
; 236  :         /* if no long +1 match, explore the short match we found */
; 237  :         if (dictMode == ZSTD_dictMatchState && matchIndexS < prefixLowestIndex) {

	mov	r12, QWORD PTR seqStore$[rsp]
	jmp	SHORT $LN41@ZSTD_compr
$LN979@ZSTD_compr:

; 216  :                 if (MEM_read64(matchL3) == MEM_read64(ip+1)) {

	mov	ecx, DWORD PTR dictMode$[rsp]
$LN41@ZSTD_compr:

; 233  :                     goto _match_found;
; 234  :         }   }   }
; 235  : 
; 236  :         /* if no long +1 match, explore the short match we found */
; 237  :         if (dictMode == ZSTD_dictMatchState && matchIndexS < prefixLowestIndex) {

	cmp	ecx, 2
	jne	$LN42@ZSTD_compr
	cmp	r13d, r9d
	jae	$LN42@ZSTD_compr
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	mov	r15, QWORD PTR iend$1$[rsp]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 238  :             mLength = ZSTD_count_2segments(ip+4, match+4, iend, dictEnd, prefixLowest) + 4;

	lea	rbp, QWORD PTR [rdi+4]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	mov	rcx, QWORD PTR dictEnd$1$[rsp]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 238  :             mLength = ZSTD_count_2segments(ip+4, match+4, iend, dictEnd, prefixLowest) + 4;

	lea	r11, QWORD PTR [rbx+4]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	mov	rax, rbp
	mov	r8, r15
	sub	rax, r11

; 591  :     size_t const matchLength = ZSTD_count(ip, match, vEnd);

	mov	rdx, r11
	add	rcx, rax
	cmp	rcx, r15
	cmovb	r8, rcx
	mov	rcx, rbp
	call	ZSTD_count
	mov	r14, rax

; 592  :     if (match + matchLength != mEnd) return matchLength;

	add	rax, r11
	cmp	rax, QWORD PTR dictEnd$1$[rsp]
	jne	SHORT $LN434@ZSTD_compr

; 593  :     DEBUGLOG(7, "ZSTD_count_2segments: found a 2-parts match (current length==%zu)", matchLength);
; 594  :     DEBUGLOG(7, "distance from match beginning to end dictionary = %zi", mEnd - match);
; 595  :     DEBUGLOG(7, "distance from current pos to end buffer = %zi", iEnd - ip);
; 596  :     DEBUGLOG(7, "next byte : ip==%02X, istart==%02X", ip[matchLength], *iStart);
; 597  :     DEBUGLOG(7, "final match length = %zu", matchLength + ZSTD_count(ip+matchLength, iStart, iEnd));
; 598  :     return matchLength + ZSTD_count(ip+matchLength, iStart, iEnd);

	mov	rdx, QWORD PTR prefixLowest$1$[rsp]
	lea	rcx, QWORD PTR [r14+rbp]
	mov	r8, r15
	call	ZSTD_count
	add	r14, rax
$LN434@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 239  :             offset = (U32)(current - matchIndexS);

	mov	r15d, DWORD PTR current$1$[rsp]
	lea	rdx, QWORD PTR [r14+4]

; 240  :             while (((ip>anchor) & (match>dictStart)) && (ip[-1] == match[-1])) { ip--; match--; mLength++; } /* catch up */

	mov	r9, QWORD PTR dictStart$1$[rsp]
	xor	r11d, r11d
	mov	ecx, r11d
	mov	eax, r11d
	mov	r10d, r15d
	sub	r10d, r13d
	cmp	rbx, r9
	mov	DWORD PTR offset$1$[rsp], r10d
	seta	cl
	cmp	rdi, rsi
	seta	al
	test	ecx, eax
	je	SHORT $LN965@ZSTD_compr
	npad	4
$LL12@ZSTD_compr:
	movzx	eax, BYTE PTR [rbx-1]
	lea	r8, QWORD PTR [rdi-1]
	dec	rbx
	cmp	BYTE PTR [r8], al
	jne	SHORT $LN965@ZSTD_compr
	inc	rdx
	mov	ecx, r11d
	cmp	rbx, r9
	mov	eax, r11d
	mov	rdi, r8
	seta	cl
	cmp	r8, rsi
	seta	al
	test	ecx, eax
	jne	SHORT $LL12@ZSTD_compr
$LN965@ZSTD_compr:

; 245  :         }
; 246  : 
; 247  :         /* fall-through */
; 248  : 
; 249  : _match_found:
; 250  :         offset_2 = offset_1;

	mov	r14, QWORD PTR iend$1$[rsp]
$_match_found$998:
	mov	ebx, DWORD PTR offset_1$1$[rsp]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	lea	r13, QWORD PTR [r14-32]

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rcx, QWORD PTR [r12+24]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 253  :         ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, offset + ZSTD_REP_MOVE, mLength-MINMATCH);

	lea	r11, QWORD PTR [rdx-3]
	mov	DWORD PTR offset_1$1$[rsp], r10d
	mov	ebp, r10d
	mov	r10, rdi
	mov	DWORD PTR offset_2$1$[rsp], ebx
	sub	r10, rsi
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	lea	r9, QWORD PTR [r10+rsi]

; 456  :     if (litEnd <= litLimit_w) {

	cmp	r9, r13
	ja	$LN440@ZSTD_compr
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rsi]
	movups	XMMWORD PTR [rcx], xmm0
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 462  :         if (litLength > 16) {

	cmp	r10, 16
	jbe	$LN462@ZSTD_compr

; 463  :             ZSTD_wildcopy(seqStorePtr->lit+16, literals+16, (ptrdiff_t)litLength-16, ZSTD_no_overlap);

	mov	rax, QWORD PTR [r12+24]
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	lea	rcx, QWORD PTR [r10-16]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 463  :             ZSTD_wildcopy(seqStorePtr->lit+16, literals+16, (ptrdiff_t)litLength-16, ZSTD_no_overlap);

	add	rax, 16
	add	rsi, 16
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	add	rcx, rax
	npad	5
$LL454@ZSTD_compr:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rsi]

; 289  :             COPY16(op, ip);

	lea	rsi, QWORD PTR [rsi+16]

; 243  :     memcpy(dst, src, 16);

	movups	XMMWORD PTR [rax], xmm0

; 289  :             COPY16(op, ip);

	add	rax, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rax, rcx
	jb	SHORT $LL454@ZSTD_compr
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	$LN462@ZSTD_compr
$LN42@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 242  :             mLength = ZSTD_count(ip+4, match+4, iend) + 4;

	mov	r14, QWORD PTR iend$1$[rsp]
	lea	rdx, QWORD PTR [rbp+4]
	mov	r8, r14
	lea	rcx, QWORD PTR [rdi+4]
	call	ZSTD_count

; 243  :             offset = (U32)(ip - match);
; 244  :             while (((ip>anchor) & (match>prefixLowest)) && (ip[-1] == match[-1])) { ip--; match--; mLength++; } /* catch up */

	xor	r9d, r9d
	mov	r10d, edi
	sub	r10d, ebp
	mov	ecx, r9d
	cmp	rbp, QWORD PTR prefixLowest$1$[rsp]
	lea	rdx, QWORD PTR [rax+4]
	mov	DWORD PTR offset$1$[rsp], r10d
	seta	cl
	mov	eax, r9d
	cmp	rdi, rsi
	seta	al
	test	ecx, eax
	je	$LN958@ZSTD_compr
	mov	rbp, QWORD PTR prefixLowest$1$[rsp]
$LL14@ZSTD_compr:
	movzx	eax, BYTE PTR [rbx-1]
	lea	r8, QWORD PTR [rdi-1]
	dec	rbx
	cmp	BYTE PTR [r8], al
	jne	$LN958@ZSTD_compr
	inc	rdx
	mov	ecx, r9d
	cmp	rbx, rbp
	mov	eax, r9d
	mov	rdi, r8
	seta	cl
	cmp	r8, rsi
	seta	al
	test	ecx, eax
	jne	SHORT $LL14@ZSTD_compr

; 232  :                     while (((ip>anchor) & (dictMatchL3>dictStart)) && (ip[-1] == dictMatchL3[-1])) { ip--; dictMatchL3--; mLength++; } /* catch up */

	mov	r15d, DWORD PTR current$1$[rsp]
	jmp	$_match_found$998
$LN440@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 424  :     if (ip <= ilimit_w) {

	cmp	rsi, r13
	ja	SHORT $LN851@ZSTD_compr
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	mov	r8, rcx
	sub	r8, rsi
	add	r8, r13
	sub	rsi, rcx
	npad	2
$LL471@ZSTD_compr:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rcx+rsi]
	movups	XMMWORD PTR [rcx], xmm0

; 289  :             COPY16(op, ip);

	add	rcx, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rcx, r8
	jb	SHORT $LL471@ZSTD_compr
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 427  :         ip = ilimit_w;

	mov	rcx, r8
	mov	rsi, r13
$LN851@ZSTD_compr:

; 428  :     }
; 429  :     while (ip < iend) *op++ = *ip++;

	cmp	rsi, r9
	jae	SHORT $LN462@ZSTD_compr
	sub	rcx, rsi
	npad	2
$LL880@ZSTD_compr:
	movzx	eax, BYTE PTR [rsi]
	mov	BYTE PTR [rsi+rcx], al
	inc	rsi
	cmp	rsi, r9
	jb	SHORT $LL880@ZSTD_compr
$LN462@ZSTD_compr:

; 468  :     seqStorePtr->lit += litLength;

	add	QWORD PTR [r12+24], r10
	mov	rcx, QWORD PTR [r12+8]

; 469  : 
; 470  :     /* literal Length */
; 471  :     if (litLength>0xFFFF) {

	cmp	r10, 65535				; 0000ffffH
	jbe	SHORT $LN915@ZSTD_compr

; 472  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 473  :         seqStorePtr->longLengthID = 1;
; 474  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [r12+72], 1
	sub	rax, QWORD PTR [r12]
	sar	rax, 3
	mov	DWORD PTR [r12+76], eax
$LN915@ZSTD_compr:

; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	WORD PTR [rcx+4], r10w

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	mov	ecx, DWORD PTR offset$1$[rsp]
	mov	rax, QWORD PTR [r12+8]
	add	ecx, 3
	mov	DWORD PTR [rax], ecx
	mov	rcx, QWORD PTR [r12+8]

; 480  : 
; 481  :     /* match Length */
; 482  :     if (mlBase>0xFFFF) {

	cmp	r11, 65535				; 0000ffffH
	jbe	SHORT $LN916@ZSTD_compr

; 483  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 484  :         seqStorePtr->longLengthID = 2;
; 485  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [r12+72], 2
	sub	rax, QWORD PTR [r12]
	sar	rax, 3
	mov	DWORD PTR [r12+76], eax
$LN916@ZSTD_compr:

; 487  :     seqStorePtr->sequences[0].matchLength = (U16)mlBase;

	mov	WORD PTR [rcx+6], r11w
$LN987@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 257  :         ip += mLength;

	add	QWORD PTR [r12+8], 8
$_match_stored$1000:
	add	rdi, rdx

; 258  :         anchor = ip;

	lea	rax, QWORD PTR [r14-8]
	mov	rsi, rdi
	cmp	rdi, rax

; 259  : 
; 260  :         if (ip <= ilimit) {

	ja	$LN978@ZSTD_compr

; 264  :                 hashLong[ZSTD_hashPtr(base+indexToInsert, hBitsL, 8)] = indexToInsert;

	mov	r11, QWORD PTR hashLong$1$[rsp]
	lea	r8d, DWORD PTR [r15+2]
	mov	r15, QWORD PTR base$1$[rsp]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rsi, -3523014627327384477		; cf1bbcdcb7a56463H
	mov	ecx, DWORD PTR tv4785[rsp]
	mov	edx, edi
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 264  :                 hashLong[ZSTD_hashPtr(base+indexToInsert, hBitsL, 8)] = indexToInsert;

	mov	r9d, r8d
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	sub	edx, r15d
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 264  :                 hashLong[ZSTD_hashPtr(base+indexToInsert, hBitsL, 8)] = indexToInsert;

	add	r9, r15

; 265  :                 hashLong[ZSTD_hashPtr(ip-2, hBitsL, 8)] = (U32)(ip-2-base);

	sub	edx, 2
	mov	r10d, edi
	sub	r10d, r15d
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rax, QWORD PTR [r9]
	imul	rax, rsi
	shr	rax, cl
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 264  :                 hashLong[ZSTD_hashPtr(base+indexToInsert, hBitsL, 8)] = indexToInsert;

	mov	DWORD PTR [r11+rax*4], r8d
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rax, QWORD PTR [rdi-2]
	imul	rax, rsi
	shr	rax, cl
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 265  :                 hashLong[ZSTD_hashPtr(ip-2, hBitsL, 8)] = (U32)(ip-2-base);

	mov	DWORD PTR [r11+rax*4], edx
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 631  :     switch(mls)

	mov	r11d, DWORD PTR mls$[rsp]
	mov	eax, r11d
	sub	eax, 5
	je	$LN539@ZSTD_compr
	sub	eax, 1
	je	$LN540@ZSTD_compr
	sub	eax, 1
	je	SHORT $LN541@ZSTD_compr
	cmp	eax, 1
	je	SHORT $LN542@ZSTD_compr

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	imul	edx, DWORD PTR [r9], -1640531535	; 9e3779b1H

; 631  :     switch(mls)

	mov	eax, r11d

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	mov	rcx, QWORD PTR tv4769[rsp]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 266  :                 hashSmall[ZSTD_hashPtr(base+indexToInsert, hBitsS, mls)] = indexToInsert;

	mov	r9, QWORD PTR hashSmall$1$[rsp]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 631  :     switch(mls)

	mov	r11d, DWORD PTR tv4803[rsp]

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	shr	rdx, cl
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 266  :                 hashSmall[ZSTD_hashPtr(base+indexToInsert, hBitsS, mls)] = indexToInsert;

	mov	DWORD PTR [r9+rdx*4], r8d
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 631  :     switch(mls)

	sub	eax, 5
	je	$LN568@ZSTD_compr
	sub	eax, 1
	je	$LN569@ZSTD_compr
	sub	eax, 1
	je	SHORT $LN570@ZSTD_compr
	cmp	eax, 1
	je	SHORT $LN571@ZSTD_compr

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	imul	edx, DWORD PTR [rdi-1], -1640531535	; 9e3779b1H

; 634  :     case 4: return ZSTD_hash4Ptr(p, hBits);

	jmp	$LN989@ZSTD_compr
$LN542@ZSTD_compr:

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rax, QWORD PTR [r9]
	mov	r11d, DWORD PTR tv4803[rsp]
	mov	ecx, r11d

; 638  :     case 8: return ZSTD_hash8Ptr(p, hBits);

	mov	r9, QWORD PTR hashSmall$1$[rsp]

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	imul	rax, rsi
	shr	rax, cl

; 638  :     case 8: return ZSTD_hash8Ptr(p, hBits);

	mov	DWORD PTR [r9+rax*4], r8d
$LN571@ZSTD_compr:

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rdx, QWORD PTR [rdi-1]
	imul	rdx, rsi

; 638  :     case 8: return ZSTD_hash8Ptr(p, hBits);

	jmp	$LN990@ZSTD_compr
$LN541@ZSTD_compr:

; 622  : static size_t ZSTD_hash7(U64 u, U32 h) { return (size_t)(((u  << (64-56)) * prime7bytes) >> (64-h)) ; }

	mov	rax, QWORD PTR [r9]
	mov	rcx, -3523014627193167104		; cf1bbcdcbfa56300H
	mov	r11d, DWORD PTR tv4803[rsp]

; 637  :     case 7: return ZSTD_hash7Ptr(p, hBits);

	mov	r9, QWORD PTR hashSmall$1$[rsp]

; 622  : static size_t ZSTD_hash7(U64 u, U32 h) { return (size_t)(((u  << (64-56)) * prime7bytes) >> (64-h)) ; }

	imul	rax, rcx
	mov	ecx, r11d
	shr	rax, cl

; 637  :     case 7: return ZSTD_hash7Ptr(p, hBits);

	mov	DWORD PTR [r9+rax*4], r8d
$LN570@ZSTD_compr:

; 622  : static size_t ZSTD_hash7(U64 u, U32 h) { return (size_t)(((u  << (64-56)) * prime7bytes) >> (64-h)) ; }

	mov	rax, -3523014627193167104		; cf1bbcdcbfa56300H

; 637  :     case 7: return ZSTD_hash7Ptr(p, hBits);

	jmp	SHORT $LN991@ZSTD_compr
$LN540@ZSTD_compr:

; 618  : static size_t ZSTD_hash6(U64 u, U32 h) { return (size_t)(((u  << (64-48)) * prime6bytes) >> (64-h)) ; }

	mov	rax, QWORD PTR [r9]
	mov	rcx, -3523014627193847808		; cf1bbcdcbf9b0000H
	mov	r11d, DWORD PTR tv4803[rsp]

; 636  :     case 6: return ZSTD_hash6Ptr(p, hBits);

	mov	r9, QWORD PTR hashSmall$1$[rsp]

; 618  : static size_t ZSTD_hash6(U64 u, U32 h) { return (size_t)(((u  << (64-48)) * prime6bytes) >> (64-h)) ; }

	imul	rax, rcx
	mov	ecx, r11d
	shr	rax, cl

; 636  :     case 6: return ZSTD_hash6Ptr(p, hBits);

	mov	DWORD PTR [r9+rax*4], r8d
$LN569@ZSTD_compr:

; 618  : static size_t ZSTD_hash6(U64 u, U32 h) { return (size_t)(((u  << (64-48)) * prime6bytes) >> (64-h)) ; }

	mov	rax, -3523014627193847808		; cf1bbcdcbf9b0000H

; 636  :     case 6: return ZSTD_hash6Ptr(p, hBits);

	jmp	SHORT $LN991@ZSTD_compr
$LN539@ZSTD_compr:

; 614  : static size_t ZSTD_hash5(U64 u, U32 h) { return (size_t)(((u  << (64-40)) * prime5bytes) >> (64-h)) ; }

	mov	rax, QWORD PTR [r9]
	mov	rcx, -3523014627271114752		; cf1bbcdcbb000000H
	mov	r11d, DWORD PTR tv4803[rsp]

; 635  :     case 5: return ZSTD_hash5Ptr(p, hBits);

	mov	r9, QWORD PTR hashSmall$1$[rsp]

; 614  : static size_t ZSTD_hash5(U64 u, U32 h) { return (size_t)(((u  << (64-40)) * prime5bytes) >> (64-h)) ; }

	imul	rax, rcx
	mov	ecx, r11d
	shr	rax, cl

; 635  :     case 5: return ZSTD_hash5Ptr(p, hBits);

	mov	DWORD PTR [r9+rax*4], r8d
$LN568@ZSTD_compr:

; 614  : static size_t ZSTD_hash5(U64 u, U32 h) { return (size_t)(((u  << (64-40)) * prime5bytes) >> (64-h)) ; }

	mov	rax, -3523014627271114752		; cf1bbcdcbb000000H
$LN991@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 267  :                 hashSmall[ZSTD_hashPtr(ip-1, hBitsS, mls)] = (U32)(ip-1-base);

	mov	rdx, QWORD PTR [rdi-1]
	imul	rdx, rax
$LN990@ZSTD_compr:
	mov	ecx, r11d
$LN989@ZSTD_compr:
	shr	rdx, cl
	lea	eax, DWORD PTR [r10-1]
	mov	rsi, rdi
	mov	DWORD PTR [r9+rdx*4], eax

; 268  :             }
; 269  : 
; 270  :             /* check immediate repcode */
; 271  :             if (dictMode == ZSTD_dictMatchState) {

	mov	eax, DWORD PTR dictMode$[rsp]
	cmp	eax, 2
	jne	$LN46@ZSTD_compr

; 272  :                 while (ip <= ilimit) {

	lea	rax, QWORD PTR [r14-8]
	cmp	rdi, rax
	ja	$LN978@ZSTD_compr
	jmp	SHORT $LN16@ZSTD_compr
$LL963@ZSTD_compr:
	mov	r14, QWORD PTR iend$1$[rsp]
$LN16@ZSTD_compr:

; 273  :                     U32 const current2 = (U32)(ip-base);

	mov	rax, QWORD PTR base$1$[rsp]
	mov	r15d, edi

; 274  :                     U32 const repIndex2 = current2 - offset_2;
; 275  :                     const BYTE* repMatch2 = dictMode == ZSTD_dictMatchState

	mov	r9d, DWORD PTR prefixLowestIndex$1$[rsp]
	sub	r15d, eax
	mov	ecx, r15d
	sub	ecx, ebx
	mov	r11d, ecx
	cmp	ecx, r9d
	jae	SHORT $LN71@ZSTD_compr
	mov	eax, DWORD PTR dictIndexDelta$1$[rsp]
	sub	r11, rax
	add	r11, QWORD PTR dictBase$1$[rsp]
	jmp	SHORT $LN72@ZSTD_compr
$LN71@ZSTD_compr:
	add	r11, rax
$LN72@ZSTD_compr:

; 276  :                         && repIndex2 < prefixLowestIndex ?
; 277  :                             dictBase + repIndex2 - dictIndexDelta :
; 278  :                             base + repIndex2;
; 279  :                     if ( ((U32)((prefixLowestIndex-1) - (U32)repIndex2) >= 3 /* intentional overflow */)
; 280  :                        && (MEM_read32(repMatch2) == MEM_read32(ip)) ) {

	mov	eax, r9d
	sub	eax, ecx
	dec	eax
	cmp	eax, 3
	jb	$LN978@ZSTD_compr
	mov	eax, DWORD PTR [rdi]
	cmp	DWORD PTR [r11], eax
	jne	$LN978@ZSTD_compr

; 281  :                         const BYTE* const repEnd2 = repIndex2 < prefixLowestIndex ? dictEnd : iend;

	cmp	ecx, r9d

; 282  :                         size_t const repLength2 = ZSTD_count_2segments(ip+4, repMatch2+4, iend, repEnd2, prefixLowest) + 4;

	lea	rbp, QWORD PTR [rdi+4]
	mov	rbx, r14
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	mov	rcx, rbp
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 281  :                         const BYTE* const repEnd2 = repIndex2 < prefixLowestIndex ? dictEnd : iend;

	cmovb	rbx, QWORD PTR dictEnd$1$[rsp]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	mov	r8, r14
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 282  :                         size_t const repLength2 = ZSTD_count_2segments(ip+4, repMatch2+4, iend, repEnd2, prefixLowest) + 4;

	add	r11, 4
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	sub	rcx, r11

; 591  :     size_t const matchLength = ZSTD_count(ip, match, vEnd);

	mov	rdx, r11
	add	rcx, rbx
	cmp	rcx, r14
	cmovb	r8, rcx
	mov	rcx, rbp
	call	ZSTD_count
	mov	r14, rax

; 592  :     if (match + matchLength != mEnd) return matchLength;

	add	rax, r11
	cmp	rax, rbx
	jne	SHORT $LN593@ZSTD_compr

; 593  :     DEBUGLOG(7, "ZSTD_count_2segments: found a 2-parts match (current length==%zu)", matchLength);
; 594  :     DEBUGLOG(7, "distance from match beginning to end dictionary = %zi", mEnd - match);
; 595  :     DEBUGLOG(7, "distance from current pos to end buffer = %zi", iEnd - ip);
; 596  :     DEBUGLOG(7, "next byte : ip==%02X, istart==%02X", ip[matchLength], *iStart);
; 597  :     DEBUGLOG(7, "final match length = %zu", matchLength + ZSTD_count(ip+matchLength, iStart, iEnd));
; 598  :     return matchLength + ZSTD_count(ip+matchLength, iStart, iEnd);

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rcx, QWORD PTR [r14+rbp]
	mov	rdx, QWORD PTR prefixLowest$1$[rsp]
	call	ZSTD_count
	add	r14, rax
$LN593@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 283  :                         U32 tmpOffset = offset_2; offset_2 = offset_1; offset_1 = tmpOffset;   /* swap offset_2 <=> offset_1 */

	mov	eax, DWORD PTR offset_2$1$[rsp]
	add	r14, 4
	mov	ebx, DWORD PTR offset_1$1$[rsp]
	mov	DWORD PTR offset_1$1$[rsp], eax
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rax, QWORD PTR [r12+24]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 283  :                         U32 tmpOffset = offset_2; offset_2 = offset_1; offset_1 = tmpOffset;   /* swap offset_2 <=> offset_1 */

	mov	DWORD PTR offset_2$1$[rsp], ebx

; 284  :                         ZSTD_storeSeq(seqStore, 0, anchor, iend, 0, repLength2-MINMATCH);

	lea	rdx, QWORD PTR [r14-3]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 456  :     if (litEnd <= litLimit_w) {

	cmp	rsi, r13
	ja	SHORT $LL630@ZSTD_compr
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rsi]
	movups	XMMWORD PTR [rax], xmm0
$LL630@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	rax, QWORD PTR [r12+8]
	xor	ecx, ecx
	mov	WORD PTR [rax+4], cx

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	mov	rax, QWORD PTR [r12+8]
	mov	DWORD PTR [rax], 1
	mov	rcx, QWORD PTR [r12+8]

; 480  : 
; 481  :     /* match Length */
; 482  :     if (mlBase>0xFFFF) {

	cmp	rdx, 65535				; 0000ffffH
	jbe	SHORT $LN917@ZSTD_compr

; 483  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 484  :         seqStorePtr->longLengthID = 2;
; 485  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [r12+72], 2
	sub	rax, QWORD PTR [r12]
	sar	rax, 3
	mov	DWORD PTR [r12+76], eax
$LN917@ZSTD_compr:

; 631  :     switch(mls)

	mov	r11d, DWORD PTR mls$[rsp]
	mov	eax, r11d

; 487  :     seqStorePtr->sequences[0].matchLength = (U16)mlBase;

	mov	WORD PTR [rcx+6], dx

; 488  : 
; 489  :     seqStorePtr->sequences++;

	add	QWORD PTR [r12+8], 8

; 631  :     switch(mls)

	sub	eax, 5
	je	SHORT $LN640@ZSTD_compr
	sub	eax, 1
	je	SHORT $LN641@ZSTD_compr
	sub	eax, 1
	je	SHORT $LN642@ZSTD_compr
	cmp	eax, 1
	je	SHORT $LN643@ZSTD_compr

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	imul	edx, DWORD PTR [rdi], -1640531535	; 9e3779b1H
	mov	rcx, QWORD PTR tv4769[rsp]

; 634  :     case 4: return ZSTD_hash4Ptr(p, hBits);

	jmp	SHORT $LN992@ZSTD_compr
$LN643@ZSTD_compr:

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rax, -3523014627327384477		; cf1bbcdcb7a56463H

; 638  :     case 8: return ZSTD_hash8Ptr(p, hBits);

	jmp	SHORT $LN993@ZSTD_compr
$LN642@ZSTD_compr:

; 622  : static size_t ZSTD_hash7(U64 u, U32 h) { return (size_t)(((u  << (64-56)) * prime7bytes) >> (64-h)) ; }

	mov	rax, -3523014627193167104		; cf1bbcdcbfa56300H

; 637  :     case 7: return ZSTD_hash7Ptr(p, hBits);

	jmp	SHORT $LN993@ZSTD_compr
$LN641@ZSTD_compr:

; 618  : static size_t ZSTD_hash6(U64 u, U32 h) { return (size_t)(((u  << (64-48)) * prime6bytes) >> (64-h)) ; }

	mov	rax, -3523014627193847808		; cf1bbcdcbf9b0000H

; 636  :     case 6: return ZSTD_hash6Ptr(p, hBits);

	jmp	SHORT $LN993@ZSTD_compr
$LN640@ZSTD_compr:

; 614  : static size_t ZSTD_hash5(U64 u, U32 h) { return (size_t)(((u  << (64-40)) * prime5bytes) >> (64-h)) ; }

	mov	rax, -3523014627271114752		; cf1bbcdcbb000000H
$LN993@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 285  :                         hashSmall[ZSTD_hashPtr(ip, hBitsS, mls)] = current2;

	mov	rdx, QWORD PTR [rdi]
	mov	ecx, DWORD PTR tv4803[rsp]
	imul	rdx, rax
$LN992@ZSTD_compr:
	mov	r9, QWORD PTR hashSmall$1$[rsp]
	shr	rdx, cl
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rcx, -3523014627327384477		; cf1bbcdcb7a56463H
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 285  :                         hashSmall[ZSTD_hashPtr(ip, hBitsS, mls)] = current2;

	mov	DWORD PTR [r9+rdx*4], r15d
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rax, QWORD PTR [rdi]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 287  :                         ip += repLength2;

	add	rdi, r14
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	imul	rax, rcx
	mov	ecx, DWORD PTR tv4785[rsp]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 287  :                         ip += repLength2;

	mov	rsi, rdi
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	shr	rax, cl
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 286  :                         hashLong[ZSTD_hashPtr(ip, hBitsL, 8)] = current2;

	mov	rcx, QWORD PTR hashLong$1$[rsp]
	mov	DWORD PTR [rcx+rax*4], r15d
	cmp	rdi, QWORD PTR ilimit$1$[rsp]
	jbe	$LL963@ZSTD_compr

; 288  :                         anchor = ip;
; 289  :                         continue;
; 290  :                     }
; 291  :                     break;
; 292  :             }   }
; 293  : 
; 294  :             if (dictMode == ZSTD_noDict) {

	jmp	$LN875@ZSTD_compr
$LN46@ZSTD_compr:
	test	eax, eax
	jne	$LN978@ZSTD_compr

; 296  :                      && ( (offset_2>0)

	lea	rax, QWORD PTR [r14-8]
	cmp	rdi, rax
	ja	$LN978@ZSTD_compr
	xor	r8d, r8d
$LL18@ZSTD_compr:
	mov	r10d, DWORD PTR [rdi]
	mov	ecx, r8d
	mov	eax, ebx
	mov	rdx, rdi
	sub	rdx, rax
	mov	eax, r8d
	cmp	r10d, DWORD PTR [rdx]
	sete	cl
	test	ebx, ebx
	setne	al
	test	ecx, eax
	je	$LN978@ZSTD_compr

; 297  :                         & (MEM_read32(ip) == MEM_read32(ip - offset_2)) )) {
; 298  :                     /* store sequence */
; 299  :                     size_t const rLength = ZSTD_count(ip+4, ip+4-offset_2, iend) + 4;

	lea	rax, QWORD PTR [rdi+4]
	add	rdx, 4
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 564  :     const BYTE* const pInLoopLimit = pInLimit - (sizeof(size_t)-1);

	lea	r8, QWORD PTR [r14-7]
	mov	r9, rax

; 565  : 
; 566  :     if (pIn < pInLoopLimit) {

	cmp	rax, r8
	jae	SHORT $LN696@ZSTD_compr

; 567  :         { size_t const diff = MEM_readST(pMatch) ^ MEM_readST(pIn);

	mov	rcx, QWORD PTR [rdx]
	xor	rcx, QWORD PTR [rax]

; 568  :           if (diff) return ZSTD_NbCommonBytes(diff); }

	je	SHORT $LN698@ZSTD_compr

; 501  :             unsigned long r = 0;

	xor	r8d, r8d

; 502  :             return _BitScanForward64( &r, (U64)val ) ? (unsigned)(r >> 3) : 0;

	bsf	rax, rcx
	mov	DWORD PTR r$2[rsp], r8d
	je	SHORT $LN713@ZSTD_compr
	shr	eax, 3

; 568  :           if (diff) return ZSTD_NbCommonBytes(diff); }

	mov	ecx, eax
	jmp	SHORT $LN694@ZSTD_compr
$LN713@ZSTD_compr:

; 502  :             return _BitScanForward64( &r, (U64)val ) ? (unsigned)(r >> 3) : 0;

	mov	eax, r8d

; 568  :           if (diff) return ZSTD_NbCommonBytes(diff); }

	mov	ecx, eax
	jmp	SHORT $LN694@ZSTD_compr
$LN698@ZSTD_compr:

; 569  :         pIn+=sizeof(size_t); pMatch+=sizeof(size_t);

	add	rax, 8
	add	rdx, 8

; 570  :         while (pIn < pInLoopLimit) {

	cmp	rax, r8
	jae	SHORT $LN696@ZSTD_compr
	npad	4
$LL695@ZSTD_compr:

; 571  :             size_t const diff = MEM_readST(pMatch) ^ MEM_readST(pIn);

	mov	rcx, QWORD PTR [rdx]
	xor	rcx, QWORD PTR [rax]

; 572  :             if (!diff) { pIn+=sizeof(size_t); pMatch+=sizeof(size_t); continue; }

	jne	$LN699@ZSTD_compr
	add	rax, 8
	add	rdx, 8
	cmp	rax, r8
	jb	SHORT $LL695@ZSTD_compr
$LN696@ZSTD_compr:

; 575  :     }   }
; 576  :     if (MEM_64bits() && (pIn<(pInLimit-3)) && (MEM_read32(pMatch) == MEM_read32(pIn))) { pIn+=4; pMatch+=4; }

	lea	rcx, QWORD PTR [r14-3]
	cmp	rax, rcx
	jae	SHORT $LN700@ZSTD_compr
	mov	ecx, DWORD PTR [rax]
	cmp	DWORD PTR [rdx], ecx
	jne	SHORT $LN700@ZSTD_compr
	add	rax, 4
	add	rdx, 4
$LN700@ZSTD_compr:

; 577  :     if ((pIn<(pInLimit-1)) && (MEM_read16(pMatch) == MEM_read16(pIn))) { pIn+=2; pMatch+=2; }

	lea	rcx, QWORD PTR [r14-1]
	cmp	rax, rcx
	jae	SHORT $LN701@ZSTD_compr
	movzx	ecx, WORD PTR [rax]
	cmp	WORD PTR [rdx], cx
	jne	SHORT $LN701@ZSTD_compr
	add	rax, 2
	add	rdx, 2
$LN701@ZSTD_compr:

; 578  :     if ((pIn<pInLimit) && (*pMatch == *pIn)) pIn++;

	cmp	rax, r14
	jae	SHORT $LN702@ZSTD_compr
	movzx	ecx, BYTE PTR [rax]
	cmp	BYTE PTR [rdx], cl
	jne	SHORT $LN702@ZSTD_compr
	inc	rax
$LN702@ZSTD_compr:

; 579  :     return (size_t)(pIn - pStart);

	mov	rcx, rax
	sub	rcx, r9
$LN694@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 300  :                     U32 const tmpOff = offset_2; offset_2 = offset_1; offset_1 = tmpOff;  /* swap offset_2 <=> offset_1 */

	mov	eax, ebx
	lea	r9, QWORD PTR [rcx+4]
	mov	ebx, ebp
	mov	DWORD PTR offset_1$1$[rsp], eax
	mov	ebp, eax
	mov	DWORD PTR offset_2$1$[rsp], ebx
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 631  :     switch(mls)

	mov	eax, DWORD PTR mls$[rsp]
	sub	eax, 5
	je	SHORT $LN741@ZSTD_compr
	sub	eax, 1
	je	SHORT $LN742@ZSTD_compr
	sub	eax, 1
	je	SHORT $LN743@ZSTD_compr
	cmp	eax, 1
	je	SHORT $LN744@ZSTD_compr

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	mov	rcx, QWORD PTR tv4769[rsp]
	imul	r8d, r10d, -1640531535			; 9e3779b1H

; 634  :     case 4: return ZSTD_hash4Ptr(p, hBits);

	jmp	SHORT $LN994@ZSTD_compr
$LN699@ZSTD_compr:

; 501  :             unsigned long r = 0;

	xor	r8d, r8d

; 502  :             return _BitScanForward64( &r, (U64)val ) ? (unsigned)(r >> 3) : 0;

	bsf	rdx, rcx
	mov	DWORD PTR r$1[rsp], r8d
	je	SHORT $LN729@ZSTD_compr
	shr	edx, 3

; 574  :             return (size_t)(pIn - pStart);

	mov	ecx, edx
	sub	rcx, r9
	add	rcx, rax
	jmp	SHORT $LN694@ZSTD_compr
$LN729@ZSTD_compr:

; 502  :             return _BitScanForward64( &r, (U64)val ) ? (unsigned)(r >> 3) : 0;

	mov	edx, r8d

; 574  :             return (size_t)(pIn - pStart);

	mov	ecx, edx
	sub	rcx, r9
	add	rcx, rax
	jmp	SHORT $LN694@ZSTD_compr
$LN744@ZSTD_compr:

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rax, -3523014627327384477		; cf1bbcdcb7a56463H

; 638  :     case 8: return ZSTD_hash8Ptr(p, hBits);

	jmp	SHORT $LN995@ZSTD_compr
$LN743@ZSTD_compr:

; 622  : static size_t ZSTD_hash7(U64 u, U32 h) { return (size_t)(((u  << (64-56)) * prime7bytes) >> (64-h)) ; }

	mov	rax, -3523014627193167104		; cf1bbcdcbfa56300H

; 637  :     case 7: return ZSTD_hash7Ptr(p, hBits);

	jmp	SHORT $LN995@ZSTD_compr
$LN742@ZSTD_compr:

; 618  : static size_t ZSTD_hash6(U64 u, U32 h) { return (size_t)(((u  << (64-48)) * prime6bytes) >> (64-h)) ; }

	mov	rax, -3523014627193847808		; cf1bbcdcbf9b0000H

; 636  :     case 6: return ZSTD_hash6Ptr(p, hBits);

	jmp	SHORT $LN995@ZSTD_compr
$LN741@ZSTD_compr:

; 614  : static size_t ZSTD_hash5(U64 u, U32 h) { return (size_t)(((u  << (64-40)) * prime5bytes) >> (64-h)) ; }

	mov	rax, -3523014627271114752		; cf1bbcdcbb000000H
$LN995@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 301  :                     hashSmall[ZSTD_hashPtr(ip, hBitsS, mls)] = (U32)(ip-base);

	mov	r8, QWORD PTR [rdi]
	mov	ecx, r11d
	imul	r8, rax
$LN994@ZSTD_compr:
	mov	rax, QWORD PTR hashSmall$1$[rsp]
	mov	edx, edi
	shr	r8, cl
	sub	edx, r15d
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rcx, -3523014627327384477		; cf1bbcdcb7a56463H
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 301  :                     hashSmall[ZSTD_hashPtr(ip, hBitsS, mls)] = (U32)(ip-base);

	mov	DWORD PTR [rax+r8*4], edx
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rax, QWORD PTR [rdi]
	imul	rax, rcx
	mov	ecx, DWORD PTR tv4785[rsp]
	shr	rax, cl
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 302  :                     hashLong[ZSTD_hashPtr(ip, hBitsL, 8)] = (U32)(ip-base);

	mov	rcx, QWORD PTR hashLong$1$[rsp]
	mov	DWORD PTR [rcx+rax*4], edx

; 303  :                     ZSTD_storeSeq(seqStore, 0, anchor, iend, 0, rLength-MINMATCH);

	lea	rdx, QWORD PTR [r9-3]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rax, QWORD PTR [r12+24]

; 456  :     if (litEnd <= litLimit_w) {

	cmp	rsi, r13
	ja	SHORT $LL827@ZSTD_compr
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rsi]
	movups	XMMWORD PTR [rax], xmm0
	npad	9
$LL827@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	rax, QWORD PTR [r12+8]
	xor	r8d, r8d
	mov	WORD PTR [rax+4], r8w

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	mov	rax, QWORD PTR [r12+8]
	mov	DWORD PTR [rax], 1
	mov	rcx, QWORD PTR [r12+8]

; 480  : 
; 481  :     /* match Length */
; 482  :     if (mlBase>0xFFFF) {

	cmp	rdx, 65535				; 0000ffffH
	jbe	SHORT $LN918@ZSTD_compr

; 483  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 484  :         seqStorePtr->longLengthID = 2;
; 485  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [r12+72], 2
	sub	rax, QWORD PTR [r12]
	sar	rax, 3
	mov	DWORD PTR [r12+76], eax
$LN918@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 304  :                     ip += rLength;

	add	rdi, r9
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 487  :     seqStorePtr->sequences[0].matchLength = (U16)mlBase;

	mov	WORD PTR [rcx+6], dx

; 488  : 
; 489  :     seqStorePtr->sequences++;

	add	QWORD PTR [r12+8], 8
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 296  :                      && ( (offset_2>0)

	lea	rax, QWORD PTR [r14-8]

; 304  :                     ip += rLength;

	mov	rsi, rdi
	cmp	rdi, rax
	jbe	$LL18@ZSTD_compr

; 305  :                     anchor = ip;
; 306  :                     continue;   /* faster when present ... (?) */
; 307  :         }   }   }
; 308  :     }   /* while (ip < ilimit) */

	jmp	$LN978@ZSTD_compr
ZSTD_compressBlock_doubleFast_generic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\common\zstd_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c
_TEXT	SEGMENT
prefixLowestIndex$1$ = 32
current$1$ = 32
iend$1$ = 40
prefixStartIndex$1$ = 48
tv7134 = 48
hashSmall$1$ = 56
prefixStart$1$ = 64
tv6341 = 64
offset_2$1$ = 72
lowLimit$1$ = 76
tv6390 = 76
hashLong$1$ = 80
base$1$ = 88
prefixLowest$1$ = 96
dictBase$1$ = 96
ip$1$ = 104
matchIndex$1$ = 104
dictEnd$1$ = 112
ilimit$1$ = 120
matchLongIndex$1$ = 128
tv6303 = 128
dictStart$1$ = 136
tv6309 = 144
tv6361 = 224
ms$ = 224
seqStore$ = 232
rep$ = 240
offset_2$1$ = 248
offset_1$1$ = 248
r$1 = 248
r$2 = 248
r$3 = 248
r$4 = 248
src$ = 248
offset_1$1$ = 256
tv6392 = 256
srcSize$ = 256
mls$ = 264
ZSTD_compressBlock_doubleFast_extDict_generic PROC

; 363  : {

	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], r8
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 160				; 000000a0H

; 364  :     ZSTD_compressionParameters const* cParams = &ms->cParams;
; 365  :     U32* const hashLong = ms->hashTable;

	mov	rax, QWORD PTR [rcx+48]
	mov	rdi, r9

; 366  :     U32  const hBitsL = cParams->hashLog;

	mov	r12d, DWORD PTR [rcx+192]
	mov	r9, rcx

; 367  :     U32* const hashSmall = ms->chainTable;
; 368  :     U32  const hBitsS = cParams->chainLog;

	mov	r15d, DWORD PTR [rcx+188]
	mov	rbp, rdx
	mov	QWORD PTR hashLong$1$[rsp], rax

; 375  :     const U32   endIndex = (U32)((size_t)(istart - base) + srcSize);

	mov	r8d, edi
	mov	rax, QWORD PTR [rcx+64]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 978  :     U32    const maxDistance = 1U << windowLog;

	mov	edx, 1
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 372  :     const BYTE* const iend = istart + srcSize;

	mov	rcx, QWORD PTR srcSize$[rsp]
	mov	rsi, rdi

; 374  :     const BYTE* const base = ms->window.base;

	mov	r14, QWORD PTR [r9+8]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 978  :     U32    const maxDistance = 1U << windowLog;

	mov	r10d, DWORD PTR [r9+184]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 375  :     const U32   endIndex = (U32)((size_t)(istart - base) + srcSize);

	sub	r8d, r14d
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 981  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	mov	r11d, DWORD PTR [r9+32]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 375  :     const U32   endIndex = (U32)((size_t)(istart - base) + srcSize);

	add	r8d, ecx
	mov	QWORD PTR hashSmall$1$[rsp], rax
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 981  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	mov	r13d, r8d
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 372  :     const BYTE* const iend = istart + srcSize;

	lea	rax, QWORD PTR [rdi+rcx]

; 374  :     const BYTE* const base = ms->window.base;

	mov	QWORD PTR base$1$[rsp], r14
	mov	QWORD PTR iend$1$[rsp], rax
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 978  :     U32    const maxDistance = 1U << windowLog;

	mov	ecx, r10d
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 373  :     const BYTE* const ilimit = iend - 8;

	add	rax, -8
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 978  :     U32    const maxDistance = 1U << windowLog;

	shl	edx, cl

; 979  :     U32    const lowestValid = ms->window.lowLimit;

	mov	ecx, DWORD PTR [r9+28]

; 981  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	sub	r13d, edx
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 373  :     const BYTE* const ilimit = iend - 8;

	mov	QWORD PTR ilimit$1$[rsp], rax
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 980  :     U32    const withinWindow = (current - lowestValid > maxDistance) ? current - maxDistance : lowestValid;

	mov	eax, r8d
	sub	eax, ecx

; 981  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	mov	DWORD PTR prefixLowestIndex$1$[rsp], r13d
	cmp	eax, edx
	cmovbe	r13d, ecx
	test	r11d, r11d

; 982  :     U32    const matchLowest = isDictionary ? lowestValid : withinWindow;

	cmovne	r13d, ecx
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 378  :     const U32   dictLimit = ms->window.dictLimit;

	mov	ecx, DWORD PTR [r9+24]

; 379  :     const U32   prefixStartIndex = (dictLimit > lowLimit) ? dictLimit : lowLimit;

	cmp	ecx, r13d
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 982  :     U32    const matchLowest = isDictionary ? lowestValid : withinWindow;

	mov	DWORD PTR lowLimit$1$[rsp], r13d
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 379  :     const U32   prefixStartIndex = (dictLimit > lowLimit) ? dictLimit : lowLimit;

	mov	ebx, r13d
	cmova	ebx, ecx

; 380  :     const BYTE* const prefixStart = base + prefixStartIndex;

	mov	eax, ebx
	add	r14, rax
	mov	DWORD PTR prefixStartIndex$1$[rsp], ebx
	mov	QWORD PTR prefixStart$1$[rsp], r14

; 381  :     const BYTE* const dictBase = ms->window.dictBase;

	mov	r14, QWORD PTR [r9+16]

; 382  :     const BYTE* const dictStart = dictBase + dictStartIndex;

	add	r13, r14
	mov	QWORD PTR dictBase$1$[rsp], r14

; 383  :     const BYTE* const dictEnd = dictBase + prefixStartIndex;

	add	rax, r14
	mov	QWORD PTR dictStart$1$[rsp], r13
	mov	r14, QWORD PTR rep$[rsp]
	mov	QWORD PTR dictEnd$1$[rsp], rax
	mov	eax, DWORD PTR [r14]

; 384  :     U32 offset_1=rep[0], offset_2=rep[1];

	mov	r13d, DWORD PTR [r14+4]
	mov	DWORD PTR offset_1$1$[rsp], eax
	mov	DWORD PTR offset_2$1$[rsp], r13d

; 385  : 
; 386  :     DEBUGLOG(5, "ZSTD_compressBlock_doubleFast_extDict_generic (srcSize=%zu)", srcSize);
; 387  : 
; 388  :     /* if extDict is invalidated due to maxDistance, switch to "regular" variant */
; 389  :     if (prefixStartIndex == dictStartIndex)

	cmp	ebx, DWORD PTR lowLimit$1$[rsp]
	jne	$LN1315@ZSTD_compr
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	mov	eax, DWORD PTR prefixLowestIndex$1$[rsp]
	sub	r8d, ecx
	cmp	r8d, edx
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 68   :     const BYTE* const prefixLowest = base + prefixLowestIndex;

	mov	rdx, QWORD PTR base$1$[rsp]

; 110  :     if (dictMode == ZSTD_noDict) {
; 111  :         U32 const current = (U32)(ip - base);
; 112  :         U32 const windowLow = ZSTD_getLowestPrefixIndex(ms, current, cParams->windowLog);

	mov	r8d, r10d
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 994  :     U32    const isDictionary = (ms->loadedDictEnd != 0);

	cmovbe	eax, ecx
	test	r11d, r11d

; 995  :     U32    const matchLowest = isDictionary ? lowestValid : withinWindow;

	cmovne	eax, ecx
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 109  :     ip += (dictAndPrefixLength == 0);

	xor	r14d, r14d
	mov	ecx, eax
	add	rcx, rdx
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 995  :     U32    const matchLowest = isDictionary ? lowestValid : withinWindow;

	mov	DWORD PTR prefixLowestIndex$1$[rsp], eax
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 109  :     ip += (dictAndPrefixLength == 0);

	cmp	edi, ecx
	mov	QWORD PTR prefixLowest$1$[rsp], rcx
	mov	eax, r14d

; 110  :     if (dictMode == ZSTD_noDict) {
; 111  :         U32 const current = (U32)(ip - base);
; 112  :         U32 const windowLow = ZSTD_getLowestPrefixIndex(ms, current, cParams->windowLog);

	mov	rcx, r9
	sete	al
	lea	rsi, QWORD PTR [rax+rdi]
	mov	ebx, esi
	sub	ebx, edx
	mov	edx, ebx
	call	ZSTD_getLowestPrefixIndex

; 113  :         U32 const maxRep = current - windowLow;

	sub	ebx, eax

; 114  :         if (offset_2 > maxRep) offsetSaved = offset_2, offset_2 = 0;
; 115  :         if (offset_1 > maxRep) offsetSaved = offset_1, offset_1 = 0;

	mov	edx, r14d

; 116  :     }
; 117  :     if (dictMode == ZSTD_dictMatchState) {
; 118  :         /* dictMatchState repCode checks don't currently handle repCode == 0
; 119  :          * disabling. */
; 120  :         assert(offset_1 <= dictAndPrefixLength);
; 121  :         assert(offset_2 <= dictAndPrefixLength);
; 122  :     }
; 123  : 
; 124  :     /* Main Search Loop */
; 125  :     while (ip < ilimit) {   /* < instead of <=, because repcode check at (ip+1) */

	mov	eax, DWORD PTR offset_1$1$[rsp]
	cmp	r13d, ebx
	mov	r8d, eax
	mov	r10d, r14d
	cmovbe	edx, r13d
	cmovbe	r13d, r14d
	cmp	eax, ebx
	cmovbe	r8d, r13d
	cmovbe	r10d, eax
	mov	DWORD PTR tv7134[rsp], r8d
	cmp	rsi, QWORD PTR ilimit$1$[rsp]
	jae	$LN33@ZSTD_compr
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	ecx, 64					; 00000040H
	mov	DWORD PTR offset_2$1$[rsp], edx
	mov	r13d, ecx
	mov	DWORD PTR offset_1$1$[rsp], r10d
	sub	r13d, r15d

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	mov	r9d, 32					; 00000020H
	sub	r9d, r15d

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	DWORD PTR tv6390[rsp], r13d
	sub	ecx, r12d

; 634  :     case 4: return ZSTD_hash4Ptr(p, hBits);

	mov	QWORD PTR tv6341[rsp], r9

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	DWORD PTR tv6361[rsp], ecx
	mov	rax, -3523014627327384477		; cf1bbcdcb7a56463H
	mov	rbx, -3523014627193847808		; cf1bbcdcbf9b0000H
	mov	r11, -3523014627193167104		; cf1bbcdcbfa56300H
	mov	r15, -3523014627271114752		; cf1bbcdcbb000000H
	npad	9
$LL32@ZSTD_compr:
	mov	r8, QWORD PTR [rsi]
	mov	rdx, r8
	imul	rdx, rax

; 631  :     switch(mls)

	mov	eax, DWORD PTR mls$[rsp]

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	r10, rdx
	shr	r10, cl

; 631  :     switch(mls)

	sub	eax, 5
	je	SHORT $LN142@ZSTD_compr
	sub	eax, 1
	je	SHORT $LN143@ZSTD_compr
	sub	eax, 1
	je	SHORT $LN144@ZSTD_compr
	cmp	eax, 1
	je	SHORT $LN145@ZSTD_compr

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	imul	edx, r8d, -1640531535			; 9e3779b1H
	mov	rcx, r9

; 634  :     case 4: return ZSTD_hash4Ptr(p, hBits);

	jmp	SHORT $LN1455@ZSTD_compr
$LN144@ZSTD_compr:

; 622  : static size_t ZSTD_hash7(U64 u, U32 h) { return (size_t)(((u  << (64-56)) * prime7bytes) >> (64-h)) ; }

	mov	rdx, r8
	imul	rdx, r11

; 637  :     case 7: return ZSTD_hash7Ptr(p, hBits);

	jmp	SHORT $LN145@ZSTD_compr
$LN143@ZSTD_compr:

; 618  : static size_t ZSTD_hash6(U64 u, U32 h) { return (size_t)(((u  << (64-48)) * prime6bytes) >> (64-h)) ; }

	mov	rdx, r8
	imul	rdx, rbx

; 636  :     case 6: return ZSTD_hash6Ptr(p, hBits);

	jmp	SHORT $LN145@ZSTD_compr
$LN142@ZSTD_compr:

; 614  : static size_t ZSTD_hash5(U64 u, U32 h) { return (size_t)(((u  << (64-40)) * prime5bytes) >> (64-h)) ; }

	mov	rdx, r8
	imul	rdx, r15
$LN145@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 132  :         U32 const current = (U32)(ip-base);

	mov	ecx, r13d
$LN1455@ZSTD_compr:

; 133  :         U32 const matchIndexL = hashLong[h2];

	mov	r15, QWORD PTR hashLong$1$[rsp]
	mov	r12d, esi
	mov	rbx, QWORD PTR base$1$[rsp]
	shr	rdx, cl
	sub	r12d, ebx

; 134  :         U32 matchIndexS = hashSmall[h];

	mov	rcx, QWORD PTR hashSmall$1$[rsp]
	mov	r8d, DWORD PTR [r15+r10*4]
	mov	r11d, DWORD PTR [rcx+rdx*4]

; 135  :         const BYTE* matchLong = base + matchIndexL;
; 136  :         const BYTE* match = base + matchIndexS;
; 137  :         const U32 repIndex = current + 1 - offset_1;
; 138  :         const BYTE* repMatch = (dictMode == ZSTD_dictMatchState
; 139  :                             && repIndex < prefixLowestIndex) ?
; 140  :                                dictBase + (repIndex - dictIndexDelta) :
; 141  :                                base + repIndex;
; 142  :         hashLong[h2] = hashSmall[h] = current;   /* update hash tables */

	mov	DWORD PTR [rcx+rdx*4], r12d
	lea	r9, QWORD PTR [rbx+r8]
	mov	DWORD PTR [r15+r10*4], r12d
	add	rbx, r11

; 143  : 
; 144  :         /* check dictMatchState repcode */
; 145  :         if (dictMode == ZSTD_dictMatchState
; 146  :             && ((U32)((prefixLowestIndex-1) - repIndex) >= 3 /* intentional underflow */)
; 147  :             && (MEM_read32(repMatch) == MEM_read32(ip+1)) ) {
; 148  :             const BYTE* repMatchEnd = repIndex < prefixLowestIndex ? dictEnd : iend;
; 149  :             mLength = ZSTD_count_2segments(ip+1+4, repMatch+4, iend, repMatchEnd, prefixLowest) + 4;
; 150  :             ip++;
; 151  :             ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, 0, mLength-MINMATCH);
; 152  :             goto _match_stored;
; 153  :         }
; 154  : 
; 155  :         /* check noDict repcode */
; 156  :         if ( dictMode == ZSTD_noDict
; 157  :           && ((offset_1 > 0) & (MEM_read32(ip+1-offset_1) == MEM_read32(ip+1)))) {

	mov	r10d, DWORD PTR offset_1$1$[rsp]
	lea	r15, QWORD PTR [rsi+1]
	mov	eax, DWORD PTR [r15]
	mov	ecx, r14d
	mov	rdx, rsi
	sub	rdx, r10
	cmp	DWORD PTR [rdx+1], eax
	mov	eax, r14d
	sete	cl
	test	r10d, r10d
	setne	al
	test	ecx, eax
	je	$LN56@ZSTD_compr
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 564  :     const BYTE* const pInLoopLimit = pInLimit - (sizeof(size_t)-1);

	mov	r11, QWORD PTR iend$1$[rsp]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 158  :             mLength = ZSTD_count(ip+1+4, ip+1+4-offset_1, iend) + 4;

	lea	rcx, QWORD PTR [rdx+5]
	add	rsi, 5
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 563  :     const BYTE* const pStart = pIn;

	mov	r9, rsi

; 564  :     const BYTE* const pInLoopLimit = pInLimit - (sizeof(size_t)-1);

	lea	rdx, QWORD PTR [r11-7]

; 565  : 
; 566  :     if (pIn < pInLoopLimit) {

	cmp	rsi, rdx
	jae	SHORT $LN270@ZSTD_compr

; 567  :         { size_t const diff = MEM_readST(pMatch) ^ MEM_readST(pIn);

	mov	rax, QWORD PTR [rsi]
	xor	rax, QWORD PTR [rcx]

; 568  :           if (diff) return ZSTD_NbCommonBytes(diff); }

	je	SHORT $LN272@ZSTD_compr

; 502  :             return _BitScanForward64( &r, (U64)val ) ? (unsigned)(r >> 3) : 0;

	bsf	rax, rax
	je	SHORT $LN287@ZSTD_compr
	shr	eax, 3

; 568  :           if (diff) return ZSTD_NbCommonBytes(diff); }

	mov	r8d, eax
	jmp	SHORT $LN268@ZSTD_compr
$LN287@ZSTD_compr:

; 502  :             return _BitScanForward64( &r, (U64)val ) ? (unsigned)(r >> 3) : 0;

	mov	eax, r14d

; 568  :           if (diff) return ZSTD_NbCommonBytes(diff); }

	mov	r8d, eax
	jmp	SHORT $LN268@ZSTD_compr
$LN272@ZSTD_compr:

; 569  :         pIn+=sizeof(size_t); pMatch+=sizeof(size_t);

	add	rsi, 8
	add	rcx, 8

; 570  :         while (pIn < pInLoopLimit) {

	cmp	rsi, rdx
	jae	SHORT $LN270@ZSTD_compr
	npad	11
$LL269@ZSTD_compr:

; 571  :             size_t const diff = MEM_readST(pMatch) ^ MEM_readST(pIn);

	mov	rax, QWORD PTR [rsi]
	xor	rax, QWORD PTR [rcx]

; 572  :             if (!diff) { pIn+=sizeof(size_t); pMatch+=sizeof(size_t); continue; }

	jne	$LN273@ZSTD_compr
	add	rsi, 8
	add	rcx, 8
	cmp	rsi, rdx
	jb	SHORT $LL269@ZSTD_compr
$LN270@ZSTD_compr:

; 575  :     }   }
; 576  :     if (MEM_64bits() && (pIn<(pInLimit-3)) && (MEM_read32(pMatch) == MEM_read32(pIn))) { pIn+=4; pMatch+=4; }

	lea	rax, QWORD PTR [r11-3]
	cmp	rsi, rax
	jae	SHORT $LN274@ZSTD_compr
	mov	eax, DWORD PTR [rsi]
	cmp	DWORD PTR [rcx], eax
	jne	SHORT $LN274@ZSTD_compr
	add	rsi, 4
	add	rcx, 4
$LN274@ZSTD_compr:

; 577  :     if ((pIn<(pInLimit-1)) && (MEM_read16(pMatch) == MEM_read16(pIn))) { pIn+=2; pMatch+=2; }

	lea	rax, QWORD PTR [r11-1]
	cmp	rsi, rax
	jae	SHORT $LN275@ZSTD_compr
	movzx	eax, WORD PTR [rsi]
	cmp	WORD PTR [rcx], ax
	jne	SHORT $LN275@ZSTD_compr
	add	rsi, 2
	add	rcx, 2
$LN275@ZSTD_compr:

; 578  :     if ((pIn<pInLimit) && (*pMatch == *pIn)) pIn++;

	cmp	rsi, r11
	jae	SHORT $LN276@ZSTD_compr
	movzx	eax, BYTE PTR [rsi]
	cmp	BYTE PTR [rcx], al
	jne	SHORT $LN276@ZSTD_compr
	inc	rsi
$LN276@ZSTD_compr:

; 579  :     return (size_t)(pIn - pStart);

	mov	r8, rsi
	sub	r8, r9
$LN268@ZSTD_compr:

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rcx, QWORD PTR [rbp+24]
	lea	rbx, QWORD PTR [r11-32]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 158  :             mLength = ZSTD_count(ip+1+4, ip+1+4-offset_1, iend) + 4;

	add	r8, 4

; 159  :             ip++;

	mov	rsi, r15

; 160  :             ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, 0, mLength-MINMATCH);

	sub	r15, rdi
	lea	r10, QWORD PTR [r8-3]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	lea	rdx, QWORD PTR [r15+rdi]

; 456  :     if (litEnd <= litLimit_w) {

	cmp	rdx, rbx
	ja	SHORT $LN312@ZSTD_compr
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rdi]
	movups	XMMWORD PTR [rcx], xmm0
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 462  :         if (litLength > 16) {

	cmp	r15, 16
	jbe	$LN334@ZSTD_compr

; 463  :             ZSTD_wildcopy(seqStorePtr->lit+16, literals+16, (ptrdiff_t)litLength-16, ZSTD_no_overlap);

	mov	rax, QWORD PTR [rbp+24]
	add	rdi, 16
	add	rax, 16
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	lea	rcx, QWORD PTR [rax-16]
	add	rcx, r15
$LL326@ZSTD_compr:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rdi]

; 289  :             COPY16(op, ip);

	lea	rdi, QWORD PTR [rdi+16]

; 243  :     memcpy(dst, src, 16);

	movups	XMMWORD PTR [rax], xmm0

; 289  :             COPY16(op, ip);

	add	rax, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rax, rcx
	jb	SHORT $LL326@ZSTD_compr
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	SHORT $LN334@ZSTD_compr
$LN273@ZSTD_compr:

; 502  :             return _BitScanForward64( &r, (U64)val ) ? (unsigned)(r >> 3) : 0;

	bsf	rcx, rax
	je	SHORT $LN303@ZSTD_compr
	shr	ecx, 3

; 574  :             return (size_t)(pIn - pStart);

	mov	r8d, ecx
	sub	r8, r9
	add	r8, rsi
	jmp	SHORT $LN268@ZSTD_compr
$LN303@ZSTD_compr:

; 502  :             return _BitScanForward64( &r, (U64)val ) ? (unsigned)(r >> 3) : 0;

	mov	ecx, r14d

; 574  :             return (size_t)(pIn - pStart);

	mov	r8d, ecx
	sub	r8, r9
	add	r8, rsi
	jmp	$LN268@ZSTD_compr
$LN312@ZSTD_compr:

; 424  :     if (ip <= ilimit_w) {

	cmp	rdi, rbx
	ja	SHORT $LN1303@ZSTD_compr
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	mov	r9, rcx
	sub	r9, rdi
	add	r9, rbx
	sub	rdi, rcx
	npad	5
$LL343@ZSTD_compr:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rdi+rcx]
	movups	XMMWORD PTR [rcx], xmm0

; 289  :             COPY16(op, ip);

	add	rcx, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rcx, r9
	jb	SHORT $LL343@ZSTD_compr
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 427  :         ip = ilimit_w;

	mov	rcx, r9
	mov	rdi, rbx
$LN1303@ZSTD_compr:

; 428  :     }
; 429  :     while (ip < iend) *op++ = *ip++;

	cmp	rdi, rdx
	jae	SHORT $LN334@ZSTD_compr
	sub	rcx, rdi
	npad	2
$LL1351@ZSTD_compr:
	movzx	eax, BYTE PTR [rdi]
	mov	BYTE PTR [rcx+rdi], al
	inc	rdi
	cmp	rdi, rdx
	jb	SHORT $LL1351@ZSTD_compr
$LN334@ZSTD_compr:

; 468  :     seqStorePtr->lit += litLength;

	add	QWORD PTR [rbp+24], r15
	mov	rcx, QWORD PTR [rbp+8]

; 469  : 
; 470  :     /* literal Length */
; 471  :     if (litLength>0xFFFF) {

	cmp	r15, 65535				; 0000ffffH
	jbe	SHORT $LN1397@ZSTD_compr

; 472  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 473  :         seqStorePtr->longLengthID = 1;
; 474  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [rbp+72], 1
	sub	rax, QWORD PTR [rbp]
	sar	rax, 3
	mov	DWORD PTR [rbp+76], eax
$LN1397@ZSTD_compr:

; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	WORD PTR [rcx+4], r15w

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	mov	rax, QWORD PTR [rbp+8]
	mov	DWORD PTR [rax], 1
	mov	rcx, QWORD PTR [rbp+8]

; 480  : 
; 481  :     /* match Length */
; 482  :     if (mlBase>0xFFFF) {

	cmp	r10, 65535				; 0000ffffH
	jbe	SHORT $LN1398@ZSTD_compr

; 483  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 484  :         seqStorePtr->longLengthID = 2;
; 485  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [rbp+72], 2
	sub	rax, QWORD PTR [rbp]
	sar	rax, 3
	mov	DWORD PTR [rbp+76], eax
$LN1398@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 161  :             goto _match_stored;

	mov	r15d, DWORD PTR offset_2$1$[rsp]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 487  :     seqStorePtr->sequences[0].matchLength = (U16)mlBase;

	mov	WORD PTR [rcx+6], r10w
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 161  :             goto _match_stored;

	jmp	$LN1456@ZSTD_compr
$LN56@ZSTD_compr:

; 162  :         }
; 163  : 
; 164  :         if (matchIndexL > prefixLowestIndex) {

	mov	ecx, DWORD PTR prefixLowestIndex$1$[rsp]
	cmp	r8d, ecx
	jbe	$LN59@ZSTD_compr

; 165  :             /* check prefix long match */
; 166  :             if (MEM_read64(matchLong) == MEM_read64(ip)) {

	mov	rax, QWORD PTR [rsi]
	cmp	QWORD PTR [r9], rax
	jne	$LN59@ZSTD_compr
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 564  :     const BYTE* const pInLoopLimit = pInLimit - (sizeof(size_t)-1);

	mov	r11, QWORD PTR iend$1$[rsp]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 167  :                 mLength = ZSTD_count(ip+8, matchLong+8, iend) + 8;

	lea	rcx, QWORD PTR [rsi+8]
	lea	rdx, QWORD PTR [r9+8]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 563  :     const BYTE* const pStart = pIn;

	mov	r10, rcx

; 564  :     const BYTE* const pInLoopLimit = pInLimit - (sizeof(size_t)-1);

	lea	r8, QWORD PTR [r11-7]

; 565  : 
; 566  :     if (pIn < pInLoopLimit) {

	cmp	rcx, r8
	jae	SHORT $LN351@ZSTD_compr

; 567  :         { size_t const diff = MEM_readST(pMatch) ^ MEM_readST(pIn);

	mov	rax, QWORD PTR [rcx]
	xor	rax, QWORD PTR [rdx]

; 568  :           if (diff) return ZSTD_NbCommonBytes(diff); }

	je	SHORT $LN353@ZSTD_compr

; 502  :             return _BitScanForward64( &r, (U64)val ) ? (unsigned)(r >> 3) : 0;

	bsf	rax, rax
	mov	DWORD PTR r$4[rsp], r14d
	je	SHORT $LN368@ZSTD_compr
	shr	eax, 3

; 568  :           if (diff) return ZSTD_NbCommonBytes(diff); }

	mov	r8d, eax
	jmp	SHORT $LN349@ZSTD_compr
$LN368@ZSTD_compr:

; 502  :             return _BitScanForward64( &r, (U64)val ) ? (unsigned)(r >> 3) : 0;

	mov	eax, r14d

; 568  :           if (diff) return ZSTD_NbCommonBytes(diff); }

	mov	r8d, eax
	jmp	SHORT $LN349@ZSTD_compr
$LN353@ZSTD_compr:

; 569  :         pIn+=sizeof(size_t); pMatch+=sizeof(size_t);

	add	rcx, 8
	add	rdx, 8

; 570  :         while (pIn < pInLoopLimit) {

	cmp	rcx, r8
	jae	SHORT $LN351@ZSTD_compr
	npad	4
$LL350@ZSTD_compr:

; 571  :             size_t const diff = MEM_readST(pMatch) ^ MEM_readST(pIn);

	mov	rax, QWORD PTR [rcx]
	xor	rax, QWORD PTR [rdx]

; 572  :             if (!diff) { pIn+=sizeof(size_t); pMatch+=sizeof(size_t); continue; }

	jne	$LN354@ZSTD_compr
	add	rcx, 8
	add	rdx, 8
	cmp	rcx, r8
	jb	SHORT $LL350@ZSTD_compr
$LN351@ZSTD_compr:

; 575  :     }   }
; 576  :     if (MEM_64bits() && (pIn<(pInLimit-3)) && (MEM_read32(pMatch) == MEM_read32(pIn))) { pIn+=4; pMatch+=4; }

	lea	rax, QWORD PTR [r11-3]
	cmp	rcx, rax
	jae	SHORT $LN355@ZSTD_compr
	mov	eax, DWORD PTR [rcx]
	cmp	DWORD PTR [rdx], eax
	jne	SHORT $LN355@ZSTD_compr
	add	rcx, 4
	add	rdx, 4
$LN355@ZSTD_compr:

; 577  :     if ((pIn<(pInLimit-1)) && (MEM_read16(pMatch) == MEM_read16(pIn))) { pIn+=2; pMatch+=2; }

	lea	rax, QWORD PTR [r11-1]
	cmp	rcx, rax
	jae	SHORT $LN356@ZSTD_compr
	movzx	eax, WORD PTR [rcx]
	cmp	WORD PTR [rdx], ax
	jne	SHORT $LN356@ZSTD_compr
	add	rcx, 2
	add	rdx, 2
$LN356@ZSTD_compr:

; 578  :     if ((pIn<pInLimit) && (*pMatch == *pIn)) pIn++;

	cmp	rcx, r11
	jae	SHORT $LN357@ZSTD_compr
	movzx	eax, BYTE PTR [rcx]
	cmp	BYTE PTR [rdx], al
	jne	SHORT $LN357@ZSTD_compr
	inc	rcx
$LN357@ZSTD_compr:

; 579  :     return (size_t)(pIn - pStart);

	mov	r8, rcx
	sub	r8, r10
$LN349@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 169  :                 while (((ip>anchor) & (matchLong>prefixLowest)) && (ip[-1] == matchLong[-1])) { ip--; matchLong--; mLength++; } /* catch up */

	mov	r10, QWORD PTR prefixLowest$1$[rsp]
	add	r8, 8
	mov	ecx, r14d
	mov	eax, r14d
	mov	r13d, esi
	sub	r13d, r9d
	cmp	r9, r10
	seta	cl
	cmp	rsi, rdi
	seta	al
	test	ecx, eax
	je	$_match_found$1471
	npad	9
$LL34@ZSTD_compr:
	movzx	eax, BYTE PTR [r9-1]
	lea	rdx, QWORD PTR [rsi-1]
	dec	r9
	cmp	BYTE PTR [rdx], al
	jne	$_match_found$1471
	inc	r8
	mov	ecx, r14d
	cmp	r9, r10
	mov	eax, r14d
	mov	rsi, rdx
	seta	cl
	cmp	rdx, rdi
	seta	al
	test	ecx, eax
	jne	SHORT $LL34@ZSTD_compr

; 170  :                 goto _match_found;

	jmp	$_match_found$1471
$LN354@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 502  :             return _BitScanForward64( &r, (U64)val ) ? (unsigned)(r >> 3) : 0;

	bsf	rdx, rax
	mov	DWORD PTR r$3[rsp], r14d
	je	SHORT $LN384@ZSTD_compr
	shr	edx, 3

; 574  :             return (size_t)(pIn - pStart);

	mov	r8d, edx
	sub	r8, r10
	add	r8, rcx
	jmp	$LN349@ZSTD_compr
$LN384@ZSTD_compr:

; 502  :             return _BitScanForward64( &r, (U64)val ) ? (unsigned)(r >> 3) : 0;

	mov	edx, r14d

; 574  :             return (size_t)(pIn - pStart);

	mov	r8d, edx
	sub	r8, r10
	add	r8, rcx
	jmp	$LN349@ZSTD_compr
$LN59@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 185  :         if (matchIndexS > prefixLowestIndex) {

	cmp	r11d, ecx
	jbe	$LN64@ZSTD_compr

; 186  :             /* check prefix short match */
; 187  :             if (MEM_read32(match) == MEM_read32(ip)) {

	mov	eax, DWORD PTR [rsi]
	cmp	DWORD PTR [rbx], eax
	jne	$LN64@ZSTD_compr
$_search_next_long$1472:
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rax, QWORD PTR [r15]
	mov	rcx, -3523014627327384477		; cf1bbcdcb7a56463H
	imul	rax, rcx
	mov	ecx, DWORD PTR tv6361[rsp]
	shr	rax, cl
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 210  :             U32 const matchIndexL3 = hashLong[hl3];

	mov	rcx, QWORD PTR hashLong$1$[rsp]
	mov	edx, DWORD PTR [rcx+rax*4]
	lea	rcx, QWORD PTR [rcx+rax*4]

; 211  :             const BYTE* matchL3 = base + matchIndexL3;

	mov	r11d, edx

; 212  :             hashLong[hl3] = current + 1;

	lea	eax, DWORD PTR [r12+1]
	add	r11, QWORD PTR base$1$[rsp]
	mov	DWORD PTR [rcx], eax

; 213  : 
; 214  :             /* check prefix long +1 match */
; 215  :             if (matchIndexL3 > prefixLowestIndex) {

	cmp	edx, DWORD PTR prefixLowestIndex$1$[rsp]
	jbe	SHORT $LN69@ZSTD_compr

; 216  :                 if (MEM_read64(matchL3) == MEM_read64(ip+1)) {

	mov	rax, QWORD PTR [r15]
	cmp	QWORD PTR [r11], rax
	jne	SHORT $LN69@ZSTD_compr

; 217  :                     mLength = ZSTD_count(ip+9, matchL3+8, iend) + 8;

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rdx, QWORD PTR [r11+8]
	lea	rcx, QWORD PTR [rsi+9]
	call	ZSTD_count

; 218  :                     ip++;
; 219  :                     offset = (U32)(ip-matchL3);
; 220  :                     while (((ip>anchor) & (matchL3>prefixLowest)) && (ip[-1] == matchL3[-1])) { ip--; matchL3--; mLength++; } /* catch up */

	mov	r10, QWORD PTR prefixLowest$1$[rsp]
	mov	edx, r14d
	mov	ecx, r14d
	mov	r13d, r15d
	sub	r13d, r11d
	mov	rsi, r15
	cmp	r11, r10
	lea	r8, QWORD PTR [rax+8]
	seta	dl
	cmp	r15, rdi
	seta	cl
	test	edx, ecx
	je	$_match_found$1471
	npad	6
$LL38@ZSTD_compr:
	movzx	eax, BYTE PTR [r11-1]
	lea	rdx, QWORD PTR [rsi-1]
	dec	r11
	cmp	BYTE PTR [rdx], al
	jne	$_match_found$1471
	inc	r8
	mov	ecx, r14d
	cmp	r11, r10
	mov	eax, r14d
	mov	rsi, rdx
	seta	cl
	cmp	rdx, rdi
	seta	al
	test	ecx, eax
	jne	SHORT $LL38@ZSTD_compr

; 221  :                     goto _match_found;

	jmp	SHORT $_match_found$1471
$LN69@ZSTD_compr:

; 222  :                 }
; 223  :             } else if (dictMode == ZSTD_dictMatchState) {
; 224  :                 /* check dict long +1 match */
; 225  :                 U32 const dictMatchIndexL3 = dictHashLong[dictHLNext];
; 226  :                 const BYTE* dictMatchL3 = dictBase + dictMatchIndexL3;
; 227  :                 assert(dictMatchL3 < dictEnd);
; 228  :                 if (dictMatchL3 > dictStart && MEM_read64(dictMatchL3) == MEM_read64(ip+1)) {
; 229  :                     mLength = ZSTD_count_2segments(ip+1+8, dictMatchL3+8, iend, dictEnd, prefixLowest) + 8;
; 230  :                     ip++;
; 231  :                     offset = (U32)(current + 1 - dictMatchIndexL3 - dictIndexDelta);
; 232  :                     while (((ip>anchor) & (dictMatchL3>dictStart)) && (ip[-1] == dictMatchL3[-1])) { ip--; dictMatchL3--; mLength++; } /* catch up */
; 233  :                     goto _match_found;
; 234  :         }   }   }
; 235  : 
; 236  :         /* if no long +1 match, explore the short match we found */
; 237  :         if (dictMode == ZSTD_dictMatchState && matchIndexS < prefixLowestIndex) {
; 238  :             mLength = ZSTD_count_2segments(ip+4, match+4, iend, dictEnd, prefixLowest) + 4;
; 239  :             offset = (U32)(current - matchIndexS);
; 240  :             while (((ip>anchor) & (match>dictStart)) && (ip[-1] == match[-1])) { ip--; match--; mLength++; } /* catch up */
; 241  :         } else {
; 242  :             mLength = ZSTD_count(ip+4, match+4, iend) + 4;

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rdx, QWORD PTR [rbx+4]
	lea	rcx, QWORD PTR [rsi+4]
	call	ZSTD_count

; 243  :             offset = (U32)(ip - match);
; 244  :             while (((ip>anchor) & (match>prefixLowest)) && (ip[-1] == match[-1])) { ip--; match--; mLength++; } /* catch up */

	mov	r10, QWORD PTR prefixLowest$1$[rsp]
	mov	ecx, r14d
	mov	r13d, esi
	sub	r13d, ebx
	cmp	rsi, rdi
	lea	r8, QWORD PTR [rax+4]
	mov	eax, r14d
	seta	cl
	cmp	rbx, r10
	seta	al
	test	ecx, eax
	je	SHORT $_match_found$1471
	npad	7
$LL44@ZSTD_compr:
	movzx	eax, BYTE PTR [rbx-1]
	lea	rdx, QWORD PTR [rsi-1]
	dec	rbx
	cmp	BYTE PTR [rdx], al
	jne	SHORT $_match_found$1471
	inc	r8
	mov	ecx, r14d
	cmp	rbx, r10
	mov	eax, r14d
	mov	rsi, rdx
	seta	cl
	cmp	rdx, rdi
	seta	al
	test	ecx, eax
	jne	SHORT $LL44@ZSTD_compr
$_match_found$1471:

; 250  :         offset_2 = offset_1;

	mov	r15d, DWORD PTR offset_1$1$[rsp]

; 253  :         ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, offset + ZSTD_REP_MOVE, mLength-MINMATCH);

	lea	r11, QWORD PTR [r8-3]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	mov	rbx, QWORD PTR iend$1$[rsp]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 253  :         ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, offset + ZSTD_REP_MOVE, mLength-MINMATCH);

	mov	r9, rsi
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rcx, QWORD PTR [rbp+24]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 253  :         ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, offset + ZSTD_REP_MOVE, mLength-MINMATCH);

	sub	r9, rdi
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	add	rbx, -32				; ffffffffffffffe0H
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 250  :         offset_2 = offset_1;

	mov	DWORD PTR offset_2$1$[rsp], r15d

; 251  :         offset_1 = offset;

	mov	DWORD PTR offset_1$1$[rsp], r13d
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	lea	rdx, QWORD PTR [r9+rdi]

; 456  :     if (litEnd <= litLimit_w) {

	cmp	rdx, rbx
	ja	SHORT $LN466@ZSTD_compr
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rdi]
	movups	XMMWORD PTR [rcx], xmm0
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 462  :         if (litLength > 16) {

	cmp	r9, 16
	jbe	SHORT $LN488@ZSTD_compr

; 463  :             ZSTD_wildcopy(seqStorePtr->lit+16, literals+16, (ptrdiff_t)litLength-16, ZSTD_no_overlap);

	mov	rax, QWORD PTR [rbp+24]
	add	rdi, 16
	add	rax, 16
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	lea	rcx, QWORD PTR [rax-16]
	add	rcx, r9
$LL480@ZSTD_compr:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rdi]

; 289  :             COPY16(op, ip);

	lea	rdi, QWORD PTR [rdi+16]

; 243  :     memcpy(dst, src, 16);

	movups	XMMWORD PTR [rax], xmm0

; 289  :             COPY16(op, ip);

	add	rax, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rax, rcx
	jb	SHORT $LL480@ZSTD_compr
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	SHORT $LN488@ZSTD_compr
$LN466@ZSTD_compr:

; 424  :     if (ip <= ilimit_w) {

	cmp	rdi, rbx
	ja	SHORT $LN1310@ZSTD_compr
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	mov	r10, rbx
	sub	r10, rdi
	add	r10, rcx
	sub	rdi, rcx
	npad	8
$LL497@ZSTD_compr:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rdi+rcx]
	movups	XMMWORD PTR [rcx], xmm0

; 289  :             COPY16(op, ip);

	add	rcx, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rcx, r10
	jb	SHORT $LL497@ZSTD_compr
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 427  :         ip = ilimit_w;

	mov	rcx, r10
	mov	rdi, rbx
$LN1310@ZSTD_compr:

; 428  :     }
; 429  :     while (ip < iend) *op++ = *ip++;

	cmp	rdi, rdx
	jae	SHORT $LN488@ZSTD_compr
	sub	rcx, rdi
	npad	2
$LL1353@ZSTD_compr:
	movzx	eax, BYTE PTR [rdi]
	mov	BYTE PTR [rcx+rdi], al
	inc	rdi
	cmp	rdi, rdx
	jb	SHORT $LL1353@ZSTD_compr
$LN488@ZSTD_compr:

; 468  :     seqStorePtr->lit += litLength;

	add	QWORD PTR [rbp+24], r9
	mov	rcx, QWORD PTR [rbp+8]

; 469  : 
; 470  :     /* literal Length */
; 471  :     if (litLength>0xFFFF) {

	cmp	r9, 65535				; 0000ffffH
	jbe	SHORT $LN1399@ZSTD_compr

; 472  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 473  :         seqStorePtr->longLengthID = 1;
; 474  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [rbp+72], 1
	sub	rax, QWORD PTR [rbp]
	sar	rax, 3
	mov	DWORD PTR [rbp+76], eax
$LN1399@ZSTD_compr:

; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	WORD PTR [rcx+4], r9w

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	lea	ecx, DWORD PTR [r13+3]
	mov	rax, QWORD PTR [rbp+8]
	mov	DWORD PTR [rax], ecx
	mov	rcx, QWORD PTR [rbp+8]

; 480  : 
; 481  :     /* match Length */
; 482  :     if (mlBase>0xFFFF) {

	cmp	r11, 65535				; 0000ffffH
	jbe	SHORT $LN1400@ZSTD_compr

; 483  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 484  :         seqStorePtr->longLengthID = 2;
; 485  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [rbp+72], 2
	sub	rax, QWORD PTR [rbp]
	sar	rax, 3
	mov	DWORD PTR [rbp+76], eax
$LN1400@ZSTD_compr:
	mov	r13d, DWORD PTR tv6390[rsp]

; 487  :     seqStorePtr->sequences[0].matchLength = (U16)mlBase;

	mov	WORD PTR [rcx+6], r11w
	mov	r11, QWORD PTR iend$1$[rsp]
$LN1456@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 257  :         ip += mLength;

	add	QWORD PTR [rbp+8], 8
$_match_stored$1473:
	lea	rdi, QWORD PTR [r8+rsi]

; 258  :         anchor = ip;

	lea	r10, QWORD PTR [r11-8]
	mov	rsi, rdi
	cmp	rdi, r10

; 259  : 
; 260  :         if (ip <= ilimit) {

	ja	$LN1454@ZSTD_compr

; 264  :                 hashLong[ZSTD_hashPtr(base+indexToInsert, hBitsL, 8)] = indexToInsert;

	mov	rdx, QWORD PTR base$1$[rsp]
	lea	r8d, DWORD PTR [r12+2]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	ecx, DWORD PTR tv6361[rsp]
	mov	r12, -3523014627327384477		; cf1bbcdcb7a56463H
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 264  :                 hashLong[ZSTD_hashPtr(base+indexToInsert, hBitsL, 8)] = indexToInsert;

	mov	r9, QWORD PTR hashLong$1$[rsp]
	mov	r10d, r8d
	add	r10, rdx
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rax, QWORD PTR [r10]
	imul	rax, r12
	shr	rax, cl
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 264  :                 hashLong[ZSTD_hashPtr(base+indexToInsert, hBitsL, 8)] = indexToInsert;

	mov	DWORD PTR [r9+rax*4], r8d
	mov	r9d, edi
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rax, QWORD PTR [rdi-2]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 264  :                 hashLong[ZSTD_hashPtr(base+indexToInsert, hBitsL, 8)] = indexToInsert;

	sub	r9d, edx
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	imul	rax, r12
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 265  :                 hashLong[ZSTD_hashPtr(ip-2, hBitsL, 8)] = (U32)(ip-2-base);

	lea	edx, DWORD PTR [r9-2]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	shr	rax, cl
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 265  :                 hashLong[ZSTD_hashPtr(ip-2, hBitsL, 8)] = (U32)(ip-2-base);

	mov	rcx, QWORD PTR hashLong$1$[rsp]
	mov	DWORD PTR [rcx+rax*4], edx
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 631  :     switch(mls)

	mov	eax, DWORD PTR mls$[rsp]
	sub	eax, 5
	je	$LN565@ZSTD_compr
	sub	eax, 1
	je	$LN566@ZSTD_compr
	sub	eax, 1
	je	$LN567@ZSTD_compr
	cmp	eax, 1
	je	SHORT $LN568@ZSTD_compr

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	imul	edx, DWORD PTR [r10], -1640531535	; 9e3779b1H
	mov	r12, QWORD PTR tv6341[rsp]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 266  :                 hashSmall[ZSTD_hashPtr(base+indexToInsert, hBitsS, mls)] = indexToInsert;

	mov	r10, QWORD PTR hashSmall$1$[rsp]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	mov	rcx, r12

; 631  :     switch(mls)

	mov	eax, DWORD PTR mls$[rsp]

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	shr	rdx, cl
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 266  :                 hashSmall[ZSTD_hashPtr(base+indexToInsert, hBitsS, mls)] = indexToInsert;

	mov	DWORD PTR [r10+rdx*4], r8d
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 631  :     switch(mls)

	sub	eax, 5
	je	$LN594@ZSTD_compr
	sub	eax, 1
	je	$LN595@ZSTD_compr
	sub	eax, 1
	je	SHORT $LN596@ZSTD_compr
	cmp	eax, 1
	je	SHORT $LN597@ZSTD_compr

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	imul	edx, DWORD PTR [rdi-1], -1640531535	; 9e3779b1H

; 634  :     case 4: return ZSTD_hash4Ptr(p, hBits);

	lea	r8d, DWORD PTR [r9-1]

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	shr	rdx, cl

; 634  :     case 4: return ZSTD_hash4Ptr(p, hBits);

	mov	DWORD PTR [r10+rdx*4], r8d
	jmp	$LL1441@ZSTD_compr
$LN568@ZSTD_compr:

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rax, QWORD PTR [r10]
	mov	ecx, r13d

; 638  :     case 8: return ZSTD_hash8Ptr(p, hBits);

	mov	r10, QWORD PTR hashSmall$1$[rsp]

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	imul	rax, r12
	mov	r12, QWORD PTR tv6341[rsp]
	shr	rax, cl

; 638  :     case 8: return ZSTD_hash8Ptr(p, hBits);

	mov	DWORD PTR [r10+rax*4], r8d
$LN597@ZSTD_compr:

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rcx, -3523014627327384477		; cf1bbcdcb7a56463H

; 638  :     case 8: return ZSTD_hash8Ptr(p, hBits);

	jmp	$LN1457@ZSTD_compr
$LN567@ZSTD_compr:

; 622  : static size_t ZSTD_hash7(U64 u, U32 h) { return (size_t)(((u  << (64-56)) * prime7bytes) >> (64-h)) ; }

	mov	rax, QWORD PTR [r10]
	mov	rcx, -3523014627193167104		; cf1bbcdcbfa56300H

; 637  :     case 7: return ZSTD_hash7Ptr(p, hBits);

	mov	r10, QWORD PTR hashSmall$1$[rsp]
	mov	r12, QWORD PTR tv6341[rsp]

; 622  : static size_t ZSTD_hash7(U64 u, U32 h) { return (size_t)(((u  << (64-56)) * prime7bytes) >> (64-h)) ; }

	imul	rax, rcx
	mov	ecx, r13d
	shr	rax, cl

; 637  :     case 7: return ZSTD_hash7Ptr(p, hBits);

	mov	DWORD PTR [r10+rax*4], r8d
$LN596@ZSTD_compr:

; 622  : static size_t ZSTD_hash7(U64 u, U32 h) { return (size_t)(((u  << (64-56)) * prime7bytes) >> (64-h)) ; }

	mov	rcx, -3523014627193167104		; cf1bbcdcbfa56300H

; 637  :     case 7: return ZSTD_hash7Ptr(p, hBits);

	jmp	SHORT $LN1457@ZSTD_compr
$LN566@ZSTD_compr:

; 618  : static size_t ZSTD_hash6(U64 u, U32 h) { return (size_t)(((u  << (64-48)) * prime6bytes) >> (64-h)) ; }

	mov	rax, QWORD PTR [r10]
	mov	rcx, -3523014627193847808		; cf1bbcdcbf9b0000H

; 636  :     case 6: return ZSTD_hash6Ptr(p, hBits);

	mov	r10, QWORD PTR hashSmall$1$[rsp]
	mov	r12, QWORD PTR tv6341[rsp]

; 618  : static size_t ZSTD_hash6(U64 u, U32 h) { return (size_t)(((u  << (64-48)) * prime6bytes) >> (64-h)) ; }

	imul	rax, rcx
	mov	ecx, r13d
	shr	rax, cl

; 636  :     case 6: return ZSTD_hash6Ptr(p, hBits);

	mov	DWORD PTR [r10+rax*4], r8d
$LN595@ZSTD_compr:

; 618  : static size_t ZSTD_hash6(U64 u, U32 h) { return (size_t)(((u  << (64-48)) * prime6bytes) >> (64-h)) ; }

	mov	rcx, -3523014627193847808		; cf1bbcdcbf9b0000H

; 636  :     case 6: return ZSTD_hash6Ptr(p, hBits);

	jmp	SHORT $LN1457@ZSTD_compr
$LN565@ZSTD_compr:

; 614  : static size_t ZSTD_hash5(U64 u, U32 h) { return (size_t)(((u  << (64-40)) * prime5bytes) >> (64-h)) ; }

	mov	rax, QWORD PTR [r10]
	mov	rcx, -3523014627271114752		; cf1bbcdcbb000000H

; 635  :     case 5: return ZSTD_hash5Ptr(p, hBits);

	mov	r10, QWORD PTR hashSmall$1$[rsp]
	mov	r12, QWORD PTR tv6341[rsp]

; 614  : static size_t ZSTD_hash5(U64 u, U32 h) { return (size_t)(((u  << (64-40)) * prime5bytes) >> (64-h)) ; }

	imul	rax, rcx
	mov	ecx, r13d
	shr	rax, cl

; 635  :     case 5: return ZSTD_hash5Ptr(p, hBits);

	mov	DWORD PTR [r10+rax*4], r8d
$LN594@ZSTD_compr:

; 614  : static size_t ZSTD_hash5(U64 u, U32 h) { return (size_t)(((u  << (64-40)) * prime5bytes) >> (64-h)) ; }

	mov	rcx, -3523014627271114752		; cf1bbcdcbb000000H
$LN1457@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 296  :                      && ( (offset_2>0)

	mov	rax, QWORD PTR [rdi-1]
	lea	edx, DWORD PTR [r9-1]
	imul	rax, rcx
	mov	ecx, r13d
	shr	rax, cl
	mov	DWORD PTR [r10+rax*4], edx
	npad	5
$LL1441@ZSTD_compr:
	mov	r10d, DWORD PTR [rsi]
	mov	ecx, r14d
	mov	eax, r15d
	mov	rdx, rsi
	sub	rdx, rax
	mov	eax, r14d
	cmp	r10d, DWORD PTR [rdx]
	sete	cl
	test	r15d, r15d
	setne	al
	test	ecx, eax
	je	$LN1454@ZSTD_compr

; 297  :                         & (MEM_read32(ip) == MEM_read32(ip - offset_2)) )) {
; 298  :                     /* store sequence */
; 299  :                     size_t const rLength = ZSTD_count(ip+4, ip+4-offset_2, iend) + 4;

	lea	rax, QWORD PTR [rsi+4]
	add	rdx, 4
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 564  :     const BYTE* const pInLoopLimit = pInLimit - (sizeof(size_t)-1);

	lea	r8, QWORD PTR [r11-7]
	mov	r9, rax

; 565  : 
; 566  :     if (pIn < pInLoopLimit) {

	cmp	rax, r8
	jae	SHORT $LN722@ZSTD_compr

; 567  :         { size_t const diff = MEM_readST(pMatch) ^ MEM_readST(pIn);

	mov	rcx, QWORD PTR [rax]
	xor	rcx, QWORD PTR [rdx]

; 568  :           if (diff) return ZSTD_NbCommonBytes(diff); }

	je	SHORT $LN724@ZSTD_compr

; 502  :             return _BitScanForward64( &r, (U64)val ) ? (unsigned)(r >> 3) : 0;

	bsf	rax, rcx
	mov	DWORD PTR r$2[rsp], r14d
	je	SHORT $LN739@ZSTD_compr
	shr	eax, 3

; 568  :           if (diff) return ZSTD_NbCommonBytes(diff); }

	mov	ecx, eax
	jmp	SHORT $LN720@ZSTD_compr
$LN739@ZSTD_compr:

; 502  :             return _BitScanForward64( &r, (U64)val ) ? (unsigned)(r >> 3) : 0;

	mov	eax, r14d

; 568  :           if (diff) return ZSTD_NbCommonBytes(diff); }

	mov	ecx, eax
	jmp	SHORT $LN720@ZSTD_compr
$LN724@ZSTD_compr:

; 569  :         pIn+=sizeof(size_t); pMatch+=sizeof(size_t);

	add	rax, 8
	add	rdx, 8

; 570  :         while (pIn < pInLoopLimit) {

	cmp	rax, r8
	jae	SHORT $LN722@ZSTD_compr
	npad	5
$LL721@ZSTD_compr:

; 571  :             size_t const diff = MEM_readST(pMatch) ^ MEM_readST(pIn);

	mov	rcx, QWORD PTR [rax]
	xor	rcx, QWORD PTR [rdx]

; 572  :             if (!diff) { pIn+=sizeof(size_t); pMatch+=sizeof(size_t); continue; }

	jne	$LN725@ZSTD_compr
	add	rax, 8
	add	rdx, 8
	cmp	rax, r8
	jb	SHORT $LL721@ZSTD_compr
$LN722@ZSTD_compr:

; 575  :     }   }
; 576  :     if (MEM_64bits() && (pIn<(pInLimit-3)) && (MEM_read32(pMatch) == MEM_read32(pIn))) { pIn+=4; pMatch+=4; }

	lea	rcx, QWORD PTR [r11-3]
	cmp	rax, rcx
	jae	SHORT $LN726@ZSTD_compr
	mov	ecx, DWORD PTR [rax]
	cmp	DWORD PTR [rdx], ecx
	jne	SHORT $LN726@ZSTD_compr
	add	rax, 4
	add	rdx, 4
$LN726@ZSTD_compr:

; 577  :     if ((pIn<(pInLimit-1)) && (MEM_read16(pMatch) == MEM_read16(pIn))) { pIn+=2; pMatch+=2; }

	lea	rcx, QWORD PTR [r11-1]
	cmp	rax, rcx
	jae	SHORT $LN727@ZSTD_compr
	movzx	ecx, WORD PTR [rax]
	cmp	WORD PTR [rdx], cx
	jne	SHORT $LN727@ZSTD_compr
	add	rax, 2
	add	rdx, 2
$LN727@ZSTD_compr:

; 578  :     if ((pIn<pInLimit) && (*pMatch == *pIn)) pIn++;

	cmp	rax, r11
	jae	SHORT $LN728@ZSTD_compr
	movzx	ecx, BYTE PTR [rax]
	cmp	BYTE PTR [rdx], cl
	jne	SHORT $LN728@ZSTD_compr
	inc	rax
$LN728@ZSTD_compr:

; 579  :     return (size_t)(pIn - pStart);

	mov	rcx, rax
	sub	rcx, r9
$LN720@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 300  :                     U32 const tmpOff = offset_2; offset_2 = offset_1; offset_1 = tmpOff;  /* swap offset_2 <=> offset_1 */

	mov	eax, r15d
	lea	r9, QWORD PTR [rcx+4]
	mov	r15d, DWORD PTR offset_1$1$[rsp]
	mov	DWORD PTR offset_1$1$[rsp], eax
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 631  :     switch(mls)

	mov	eax, DWORD PTR mls$[rsp]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 300  :                     U32 const tmpOff = offset_2; offset_2 = offset_1; offset_1 = tmpOff;  /* swap offset_2 <=> offset_1 */

	mov	DWORD PTR offset_2$1$[rsp], r15d
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 631  :     switch(mls)

	sub	eax, 5
	je	SHORT $LN767@ZSTD_compr
	sub	eax, 1
	je	SHORT $LN768@ZSTD_compr
	sub	eax, 1
	je	SHORT $LN769@ZSTD_compr
	cmp	eax, 1
	je	SHORT $LN770@ZSTD_compr

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	imul	r8d, r10d, -1640531535			; 9e3779b1H
	mov	rcx, r12

; 634  :     case 4: return ZSTD_hash4Ptr(p, hBits);

	jmp	SHORT $LN1458@ZSTD_compr
$LN725@ZSTD_compr:

; 502  :             return _BitScanForward64( &r, (U64)val ) ? (unsigned)(r >> 3) : 0;

	bsf	rdx, rcx
	mov	DWORD PTR r$1[rsp], r14d
	je	SHORT $LN755@ZSTD_compr
	shr	edx, 3

; 574  :             return (size_t)(pIn - pStart);

	mov	ecx, edx
	sub	rcx, r9
	add	rcx, rax
	jmp	SHORT $LN720@ZSTD_compr
$LN755@ZSTD_compr:

; 502  :             return _BitScanForward64( &r, (U64)val ) ? (unsigned)(r >> 3) : 0;

	mov	edx, r14d

; 574  :             return (size_t)(pIn - pStart);

	mov	ecx, edx
	sub	rcx, r9
	add	rcx, rax
	jmp	SHORT $LN720@ZSTD_compr
$LN770@ZSTD_compr:

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rax, -3523014627327384477		; cf1bbcdcb7a56463H

; 638  :     case 8: return ZSTD_hash8Ptr(p, hBits);

	jmp	SHORT $LN1459@ZSTD_compr
$LN769@ZSTD_compr:

; 622  : static size_t ZSTD_hash7(U64 u, U32 h) { return (size_t)(((u  << (64-56)) * prime7bytes) >> (64-h)) ; }

	mov	rax, -3523014627193167104		; cf1bbcdcbfa56300H

; 637  :     case 7: return ZSTD_hash7Ptr(p, hBits);

	jmp	SHORT $LN1459@ZSTD_compr
$LN768@ZSTD_compr:

; 618  : static size_t ZSTD_hash6(U64 u, U32 h) { return (size_t)(((u  << (64-48)) * prime6bytes) >> (64-h)) ; }

	mov	rax, -3523014627193847808		; cf1bbcdcbf9b0000H

; 636  :     case 6: return ZSTD_hash6Ptr(p, hBits);

	jmp	SHORT $LN1459@ZSTD_compr
$LN767@ZSTD_compr:

; 614  : static size_t ZSTD_hash5(U64 u, U32 h) { return (size_t)(((u  << (64-40)) * prime5bytes) >> (64-h)) ; }

	mov	rax, -3523014627271114752		; cf1bbcdcbb000000H
$LN1459@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 301  :                     hashSmall[ZSTD_hashPtr(ip, hBitsS, mls)] = (U32)(ip-base);

	mov	r8, QWORD PTR [rsi]
	mov	ecx, r13d
	imul	r8, rax
$LN1458@ZSTD_compr:
	mov	rax, QWORD PTR hashSmall$1$[rsp]
	mov	edx, esi
	sub	edx, DWORD PTR base$1$[rsp]
	shr	r8, cl
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rcx, -3523014627327384477		; cf1bbcdcb7a56463H
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 301  :                     hashSmall[ZSTD_hashPtr(ip, hBitsS, mls)] = (U32)(ip-base);

	mov	DWORD PTR [rax+r8*4], edx
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rax, QWORD PTR [rsi]
	imul	rax, rcx
	mov	ecx, DWORD PTR tv6361[rsp]
	shr	rax, cl
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 302  :                     hashLong[ZSTD_hashPtr(ip, hBitsL, 8)] = (U32)(ip-base);

	mov	rcx, QWORD PTR hashLong$1$[rsp]
	mov	DWORD PTR [rcx+rax*4], edx

; 303  :                     ZSTD_storeSeq(seqStore, 0, anchor, iend, 0, rLength-MINMATCH);

	lea	rdx, QWORD PTR [r9-3]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rax, QWORD PTR [rbp+24]

; 456  :     if (litEnd <= litLimit_w) {

	cmp	rdi, rbx
	ja	SHORT $LL853@ZSTD_compr
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rdi]
	movups	XMMWORD PTR [rax], xmm0
	npad	5
$LL853@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	rax, QWORD PTR [rbp+8]
	mov	WORD PTR [rax+4], r14w

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	mov	rax, QWORD PTR [rbp+8]
	mov	DWORD PTR [rax], 1
	mov	rcx, QWORD PTR [rbp+8]

; 480  : 
; 481  :     /* match Length */
; 482  :     if (mlBase>0xFFFF) {

	cmp	rdx, 65535				; 0000ffffH
	jbe	SHORT $LN1401@ZSTD_compr

; 483  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 484  :         seqStorePtr->longLengthID = 2;
; 485  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [rbp+72], 2
	sub	rax, QWORD PTR [rbp]
	sar	rax, 3
	mov	DWORD PTR [rbp+76], eax
$LN1401@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 304  :                     ip += rLength;

	add	rsi, r9
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 487  :     seqStorePtr->sequences[0].matchLength = (U16)mlBase;

	mov	WORD PTR [rcx+6], dx

; 488  : 
; 489  :     seqStorePtr->sequences++;

	add	QWORD PTR [rbp+8], 8
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 296  :                      && ( (offset_2>0)

	lea	r10, QWORD PTR [r11-8]

; 304  :                     ip += rLength;

	mov	rdi, rsi
	cmp	rsi, r10
	jbe	$LL1441@ZSTD_compr
$LN1454@ZSTD_compr:

; 116  :     }
; 117  :     if (dictMode == ZSTD_dictMatchState) {
; 118  :         /* dictMatchState repCode checks don't currently handle repCode == 0
; 119  :          * disabling. */
; 120  :         assert(offset_1 <= dictAndPrefixLength);
; 121  :         assert(offset_2 <= dictAndPrefixLength);
; 122  :     }
; 123  : 
; 124  :     /* Main Search Loop */
; 125  :     while (ip < ilimit) {   /* < instead of <=, because repcode check at (ip+1) */

	mov	r10d, DWORD PTR offset_1$1$[rsp]
$LN1341@ZSTD_compr:
	mov	rax, -3523014627327384477		; cf1bbcdcb7a56463H
	mov	r9, QWORD PTR tv6341[rsp]
	mov	rbx, -3523014627193847808		; cf1bbcdcbf9b0000H
	mov	ecx, DWORD PTR tv6361[rsp]
	mov	r11, -3523014627193167104		; cf1bbcdcbfa56300H
	mov	r15, -3523014627271114752		; cf1bbcdcbb000000H
	cmp	rsi, QWORD PTR ilimit$1$[rsp]
	jb	$LL32@ZSTD_compr
	mov	edx, DWORD PTR offset_2$1$[rsp]
	mov	r8d, DWORD PTR tv7134[rsp]
$LN33@ZSTD_compr:

; 305  :                     anchor = ip;
; 306  :                     continue;   /* faster when present ... (?) */
; 307  :         }   }   }
; 308  :     }   /* while (ip < ilimit) */
; 309  : 
; 310  :     /* save reps for next block */
; 311  :     rep[0] = offset_1 ? offset_1 : offsetSaved;

	mov	rax, QWORD PTR rep$[rsp]
	test	r10d, r10d
	mov	ecx, r8d
	cmovne	ecx, r10d

; 312  :     rep[1] = offset_2 ? offset_2 : offsetSaved;

	test	edx, edx
	cmovne	r8d, edx
	mov	DWORD PTR [rax], ecx
	mov	DWORD PTR [rax+4], r8d

; 313  : 
; 314  :     /* Return the last literals size */
; 315  :     return (size_t)(iend - anchor);

	mov	rax, QWORD PTR iend$1$[rsp]
	sub	rax, rdi

; 390  :         return ZSTD_compressBlock_doubleFast_generic(ms, seqStore, rep, src, srcSize, mls, ZSTD_noDict);

	jmp	$LN1@ZSTD_compr
$LN64@ZSTD_compr:

; 200  :         ip += ((ip-anchor) >> kSearchStrength) + 1;

	mov	rax, rsi
	inc	rsi
	sub	rax, rdi
	sar	rax, 8
	add	rsi, rax

; 259  : 
; 260  :         if (ip <= ilimit) {

	jmp	$LN1341@ZSTD_compr
$LN1315@ZSTD_compr:

; 391  : 
; 392  :     /* Search Loop */
; 393  :     while (ip < ilimit) {  /* < instead of <=, because (ip+1) */

	cmp	rdi, QWORD PTR ilimit$1$[rsp]
	jae	$LN3@ZSTD_compr
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	ebx, DWORD PTR mls$[rsp]
	mov	eax, 64					; 00000040H
	mov	ecx, eax

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	mov	r8d, 32					; 00000020H

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	sub	ecx, r15d

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	sub	r8d, r15d

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	sub	eax, r12d
	mov	DWORD PTR tv6392[rsp], ecx
	xor	r14d, r14d

; 634  :     case 4: return ZSTD_hash4Ptr(p, hBits);

	mov	QWORD PTR tv6309[rsp], r8

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	DWORD PTR tv6361[rsp], eax
	mov	r15, -3523014627327384477		; cf1bbcdcb7a56463H
	mov	r9, -3523014627193167104		; cf1bbcdcbfa56300H
	mov	r10, -3523014627193847808		; cf1bbcdcbf9b0000H
	mov	r11, -3523014627271114752		; cf1bbcdcbb000000H
	npad	3
$LL2@ZSTD_compr:

; 631  :     switch(mls)

	mov	eax, ebx
	sub	eax, 5
	je	SHORT $LN863@ZSTD_compr
	sub	eax, 1
	je	SHORT $LN864@ZSTD_compr
	sub	eax, 1
	je	SHORT $LN865@ZSTD_compr
	cmp	eax, 1
	je	SHORT $LN866@ZSTD_compr

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	imul	edx, DWORD PTR [rdi], -1640531535	; 9e3779b1H
	mov	rcx, r8

; 634  :     case 4: return ZSTD_hash4Ptr(p, hBits);

	jmp	SHORT $LN1460@ZSTD_compr
$LN866@ZSTD_compr:

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rdx, QWORD PTR [rdi]
	imul	rdx, r15

; 638  :     case 8: return ZSTD_hash8Ptr(p, hBits);

	jmp	SHORT $LN1460@ZSTD_compr
$LN865@ZSTD_compr:

; 622  : static size_t ZSTD_hash7(U64 u, U32 h) { return (size_t)(((u  << (64-56)) * prime7bytes) >> (64-h)) ; }

	mov	rdx, QWORD PTR [rdi]
	imul	rdx, r9

; 637  :     case 7: return ZSTD_hash7Ptr(p, hBits);

	jmp	SHORT $LN1460@ZSTD_compr
$LN864@ZSTD_compr:

; 618  : static size_t ZSTD_hash6(U64 u, U32 h) { return (size_t)(((u  << (64-48)) * prime6bytes) >> (64-h)) ; }

	mov	rdx, QWORD PTR [rdi]
	imul	rdx, r10

; 636  :     case 6: return ZSTD_hash6Ptr(p, hBits);

	jmp	SHORT $LN1460@ZSTD_compr
$LN863@ZSTD_compr:

; 614  : static size_t ZSTD_hash5(U64 u, U32 h) { return (size_t)(((u  << (64-40)) * prime5bytes) >> (64-h)) ; }

	mov	rdx, QWORD PTR [rdi]
	imul	rdx, r11
$LN1460@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 396  :         const BYTE* const matchBase = matchIndex < prefixStartIndex ? dictBase : base;

	mov	r11, QWORD PTR base$1$[rsp]

; 402  :         const BYTE* matchLong = matchLongBase + matchLongIndex;
; 403  : 
; 404  :         const U32 current = (U32)(ip-base);

	mov	ebx, edi
	mov	r13d, DWORD PTR prefixStartIndex$1$[rsp]
	mov	r12, r11
	mov	rax, QWORD PTR hashSmall$1$[rsp]
	shr	rdx, cl
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	ecx, DWORD PTR tv6361[rsp]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 395  :         const U32 matchIndex = hashSmall[hSmall];

	mov	r9d, DWORD PTR [rax+rdx*4]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rax, QWORD PTR [rdi]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 396  :         const BYTE* const matchBase = matchIndex < prefixStartIndex ? dictBase : base;

	cmp	r9d, r13d
	mov	DWORD PTR matchIndex$1$[rsp], r9d
	cmovb	r12, QWORD PTR dictBase$1$[rsp]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	imul	rax, r15
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 397  :         const BYTE* match = matchBase + matchIndex;

	add	r12, r9

; 401  :         const BYTE* const matchLongBase = matchLongIndex < prefixStartIndex ? dictBase : base;

	mov	r15, r11
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	shr	rax, cl
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 400  :         const U32 matchLongIndex = hashLong[hLong];

	mov	rcx, QWORD PTR hashLong$1$[rsp]
	mov	r8d, DWORD PTR [rcx+rax*4]
	lea	rcx, QWORD PTR [rcx+rax*4]

; 401  :         const BYTE* const matchLongBase = matchLongIndex < prefixStartIndex ? dictBase : base;

	cmp	r8d, r13d
	mov	DWORD PTR matchLongIndex$1$[rsp], r8d
	cmovb	r15, QWORD PTR dictBase$1$[rsp]

; 402  :         const BYTE* matchLong = matchLongBase + matchLongIndex;
; 403  : 
; 404  :         const U32 current = (U32)(ip-base);

	sub	ebx, r11d
	add	r15, r8

; 405  :         const U32 repIndex = current + 1 - offset_1;   /* offset_1 expected <= current +1 */
; 406  :         const BYTE* const repBase = repIndex < prefixStartIndex ? dictBase : base;
; 407  :         const BYTE* const repMatch = repBase + repIndex;
; 408  :         size_t mLength;
; 409  :         hashSmall[hSmall] = hashLong[hLong] = current;   /* update hash table */

	mov	DWORD PTR [rcx], ebx

; 410  : 
; 411  :         if ((((U32)((prefixStartIndex-1) - repIndex) >= 3) /* intentional underflow : ensure repIndex doesn't overlap dict + prefix */
; 412  :             & (repIndex > dictStartIndex))
; 413  :           && (MEM_read32(repMatch) == MEM_read32(ip+1)) ) {

	mov	ecx, r14d
	mov	DWORD PTR current$1$[rsp], ebx
	mov	r10d, ebx
	sub	r10d, DWORD PTR offset_1$1$[rsp]
	inc	r10d
	cmp	r10d, r13d
	mov	eax, r10d
	cmovb	r11, QWORD PTR dictBase$1$[rsp]
	add	r11, rax
	mov	rax, QWORD PTR hashSmall$1$[rsp]
	mov	DWORD PTR [rax+rdx*4], ebx
	mov	eax, r13d
	mov	edx, DWORD PTR lowLimit$1$[rsp]
	sub	eax, r10d
	dec	eax
	cmp	eax, 3
	mov	eax, r14d
	setae	cl
	cmp	r10d, edx
	seta	al
	test	ecx, eax
	je	$LN13@ZSTD_compr
	mov	eax, DWORD PTR [rdi+1]
	lea	r13, QWORD PTR [rdi+1]
	cmp	DWORD PTR [r11], eax
	jne	$LN1451@ZSTD_compr

; 414  :             const BYTE* repMatchEnd = repIndex < prefixStartIndex ? dictEnd : iend;

	mov	r12, QWORD PTR iend$1$[rsp]

; 415  :             mLength = ZSTD_count_2segments(ip+1+4, repMatch+4, iend, repMatchEnd, prefixStart) + 4;

	lea	r15, QWORD PTR [rdi+5]
	cmp	r10d, DWORD PTR prefixStartIndex$1$[rsp]
	mov	rbx, r12
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	mov	rcx, r15
	mov	r8, r12
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 414  :             const BYTE* repMatchEnd = repIndex < prefixStartIndex ? dictEnd : iend;

	cmovb	rbx, QWORD PTR dictEnd$1$[rsp]

; 415  :             mLength = ZSTD_count_2segments(ip+1+4, repMatch+4, iend, repMatchEnd, prefixStart) + 4;

	add	r11, 4
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	sub	rcx, r11

; 591  :     size_t const matchLength = ZSTD_count(ip, match, vEnd);

	mov	rdx, r11
	add	rcx, rbx
	cmp	rcx, r12
	cmovb	r8, rcx
	mov	rcx, r15
	call	ZSTD_count
	mov	rdi, rax

; 592  :     if (match + matchLength != mEnd) return matchLength;

	lea	rcx, QWORD PTR [rax+r11]
	cmp	rcx, rbx
	jne	SHORT $LN917@ZSTD_compr

; 593  :     DEBUGLOG(7, "ZSTD_count_2segments: found a 2-parts match (current length==%zu)", matchLength);
; 594  :     DEBUGLOG(7, "distance from match beginning to end dictionary = %zi", mEnd - match);
; 595  :     DEBUGLOG(7, "distance from current pos to end buffer = %zi", iEnd - ip);
; 596  :     DEBUGLOG(7, "next byte : ip==%02X, istart==%02X", ip[matchLength], *iStart);
; 597  :     DEBUGLOG(7, "final match length = %zu", matchLength + ZSTD_count(ip+matchLength, iStart, iEnd));
; 598  :     return matchLength + ZSTD_count(ip+matchLength, iStart, iEnd);

	mov	rdx, QWORD PTR prefixStart$1$[rsp]
	lea	rcx, QWORD PTR [rax+r15]
	mov	r8, r12
	call	ZSTD_count
	add	rdi, rax
$LN917@ZSTD_compr:

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rcx, QWORD PTR [rbp+24]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 415  :             mLength = ZSTD_count_2segments(ip+1+4, repMatch+4, iend, repMatchEnd, prefixStart) + 4;

	lea	r8, QWORD PTR [rdi+4]

; 416  :             ip++;

	mov	rdi, r13
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	lea	r15, QWORD PTR [r12-32]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 417  :             ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, 0, mLength-MINMATCH);

	sub	r13, rsi
	lea	r10, QWORD PTR [r8-3]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	lea	r9, QWORD PTR [rsi+r13]

; 456  :     if (litEnd <= litLimit_w) {

	cmp	r9, r15
	ja	SHORT $LN923@ZSTD_compr
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rsi]
	movups	XMMWORD PTR [rcx], xmm0
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 462  :         if (litLength > 16) {

	cmp	r13, 16
	jbe	SHORT $LN945@ZSTD_compr

; 463  :             ZSTD_wildcopy(seqStorePtr->lit+16, literals+16, (ptrdiff_t)litLength-16, ZSTD_no_overlap);

	mov	rax, QWORD PTR [rbp+24]
	add	rsi, 16
	add	rax, 16
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	lea	rcx, QWORD PTR [rax-16]
	add	rcx, r13
$LL937@ZSTD_compr:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rsi]

; 289  :             COPY16(op, ip);

	lea	rsi, QWORD PTR [rsi+16]

; 243  :     memcpy(dst, src, 16);

	movups	XMMWORD PTR [rax], xmm0

; 289  :             COPY16(op, ip);

	add	rax, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rax, rcx
	jb	SHORT $LL937@ZSTD_compr
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	SHORT $LN945@ZSTD_compr
$LN923@ZSTD_compr:

; 424  :     if (ip <= ilimit_w) {

	cmp	rsi, r15
	ja	SHORT $LN1318@ZSTD_compr
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	mov	rdx, rcx
	sub	rdx, rsi
	add	rdx, r15
	sub	rsi, rcx
	npad	10
$LL954@ZSTD_compr:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rsi+rcx]
	movups	XMMWORD PTR [rcx], xmm0

; 289  :             COPY16(op, ip);

	add	rcx, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rcx, rdx
	jb	SHORT $LL954@ZSTD_compr
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 427  :         ip = ilimit_w;

	mov	rcx, rdx
	mov	rsi, r15
$LN1318@ZSTD_compr:

; 428  :     }
; 429  :     while (ip < iend) *op++ = *ip++;

	cmp	rsi, r9
	jae	SHORT $LN945@ZSTD_compr
	sub	rcx, rsi
	npad	2
$LL1357@ZSTD_compr:
	movzx	eax, BYTE PTR [rsi]
	mov	BYTE PTR [rcx+rsi], al
	inc	rsi
	cmp	rsi, r9
	jb	SHORT $LL1357@ZSTD_compr
$LN945@ZSTD_compr:

; 468  :     seqStorePtr->lit += litLength;

	add	QWORD PTR [rbp+24], r13
	mov	rcx, QWORD PTR [rbp+8]

; 469  : 
; 470  :     /* literal Length */
; 471  :     if (litLength>0xFFFF) {

	cmp	r13, 65535				; 0000ffffH
	jbe	SHORT $LN1402@ZSTD_compr

; 472  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 473  :         seqStorePtr->longLengthID = 1;
; 474  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [rbp+72], 1
	sub	rax, QWORD PTR [rbp]
	sar	rax, 3
	mov	DWORD PTR [rbp+76], eax
$LN1402@ZSTD_compr:

; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	WORD PTR [rcx+4], r13w

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	mov	rax, QWORD PTR [rbp+8]
	mov	DWORD PTR [rax], 1
	mov	rcx, QWORD PTR [rbp+8]

; 480  : 
; 481  :     /* match Length */
; 482  :     if (mlBase>0xFFFF) {

	cmp	r10, 65535				; 0000ffffH
	jbe	SHORT $LN1403@ZSTD_compr

; 483  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 484  :         seqStorePtr->longLengthID = 2;
; 485  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [rbp+72], 2
	sub	rax, QWORD PTR [rbp]
	sar	rax, 3
	mov	DWORD PTR [rbp+76], eax
$LN1403@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 418  :         } else {

	mov	r13d, DWORD PTR current$1$[rsp]
	mov	r12d, DWORD PTR offset_2$1$[rsp]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 487  :     seqStorePtr->sequences[0].matchLength = (U16)mlBase;

	mov	WORD PTR [rcx+6], r10w
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 418  :         } else {

	jmp	$LN1461@ZSTD_compr
$LN1451@ZSTD_compr:

; 410  : 
; 411  :         if ((((U32)((prefixStartIndex-1) - repIndex) >= 3) /* intentional underflow : ensure repIndex doesn't overlap dict + prefix */
; 412  :             & (repIndex > dictStartIndex))
; 413  :           && (MEM_read32(repMatch) == MEM_read32(ip+1)) ) {

	mov	r13d, DWORD PTR prefixStartIndex$1$[rsp]
$LN13@ZSTD_compr:

; 419  :             if ((matchLongIndex > dictStartIndex) && (MEM_read64(matchLong) == MEM_read64(ip))) {

	cmp	r8d, edx
	jbe	$LN15@ZSTD_compr
	mov	rax, QWORD PTR [rdi]
	cmp	QWORD PTR [r15], rax
	jne	$LN15@ZSTD_compr

; 420  :                 const BYTE* const matchEnd = matchLongIndex < prefixStartIndex ? dictEnd : iend;

	mov	rdx, QWORD PTR iend$1$[rsp]

; 422  :                 U32 offset;
; 423  :                 mLength = ZSTD_count_2segments(ip+8, matchLong+8, iend, matchEnd, prefixStart) + 8;

	lea	r11, QWORD PTR [r15+8]
	mov	r12, QWORD PTR prefixStart$1$[rsp]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	lea	rcx, QWORD PTR [rdi+8]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 420  :                 const BYTE* const matchEnd = matchLongIndex < prefixStartIndex ? dictEnd : iend;

	cmp	r8d, r13d
	mov	rbx, rdx
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	mov	r8, rdx
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 420  :                 const BYTE* const matchEnd = matchLongIndex < prefixStartIndex ? dictEnd : iend;

	cmovb	rbx, QWORD PTR dictEnd$1$[rsp]

; 421  :                 const BYTE* const lowMatchPtr = matchLongIndex < prefixStartIndex ? dictStart : prefixStart;

	cmovb	r12, QWORD PTR dictStart$1$[rsp]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	sub	rcx, r11
	add	rcx, rbx
	cmp	rcx, rdx

; 591  :     size_t const matchLength = ZSTD_count(ip, match, vEnd);

	mov	rdx, r11
	cmovb	r8, rcx
	lea	rcx, QWORD PTR [rdi+8]
	call	ZSTD_count
	mov	r13, rax

; 592  :     if (match + matchLength != mEnd) return matchLength;

	lea	rcx, QWORD PTR [r11+rax]
	cmp	rcx, rbx
	jne	SHORT $LN960@ZSTD_compr

; 593  :     DEBUGLOG(7, "ZSTD_count_2segments: found a 2-parts match (current length==%zu)", matchLength);
; 594  :     DEBUGLOG(7, "distance from match beginning to end dictionary = %zi", mEnd - match);
; 595  :     DEBUGLOG(7, "distance from current pos to end buffer = %zi", iEnd - ip);
; 596  :     DEBUGLOG(7, "next byte : ip==%02X, istart==%02X", ip[matchLength], *iStart);
; 597  :     DEBUGLOG(7, "final match length = %zu", matchLength + ZSTD_count(ip+matchLength, iStart, iEnd));
; 598  :     return matchLength + ZSTD_count(ip+matchLength, iStart, iEnd);

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rcx, QWORD PTR [rax+8]
	mov	rdx, QWORD PTR prefixStart$1$[rsp]
	add	rcx, rdi
	call	ZSTD_count
	add	r13, rax
$LN960@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 425  :                 while (((ip>anchor) & (matchLong>lowMatchPtr)) && (ip[-1] == matchLong[-1])) { ip--; matchLong--; mLength++; }   /* catch up */

	mov	ecx, r14d
	lea	r8, QWORD PTR [r13+8]
	mov	r13d, DWORD PTR current$1$[rsp]
	mov	eax, r14d
	mov	r11d, r13d
	sub	r11d, DWORD PTR matchLongIndex$1$[rsp]
	cmp	r15, r12
	seta	cl
	cmp	rdi, rsi
	seta	al
	test	ecx, eax
	je	SHORT $LN1443@ZSTD_compr
	npad	11
$LL4@ZSTD_compr:
	movzx	eax, BYTE PTR [r15-1]
	lea	rdx, QWORD PTR [rdi-1]
	dec	r15
	cmp	BYTE PTR [rdx], al
	jne	SHORT $LN1443@ZSTD_compr
	inc	r8
	mov	ecx, r14d
	cmp	rdx, rsi
	mov	eax, r14d
	mov	rdi, rdx
	seta	cl
	cmp	r15, r12
	seta	al
	test	ecx, eax
	jne	SHORT $LL4@ZSTD_compr
$LN1443@ZSTD_compr:

; 426  :                 offset_2 = offset_1;

	mov	r12d, DWORD PTR offset_1$1$[rsp]

; 428  :                 ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, offset + ZSTD_REP_MOVE, mLength-MINMATCH);

	lea	rbx, QWORD PTR [r8-3]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	mov	r15, QWORD PTR iend$1$[rsp]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 428  :                 ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, offset + ZSTD_REP_MOVE, mLength-MINMATCH);

	mov	r10, rdi
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rcx, QWORD PTR [rbp+24]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 428  :                 ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, offset + ZSTD_REP_MOVE, mLength-MINMATCH);

	sub	r10, rsi
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	add	r15, -32				; ffffffffffffffe0H
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 426  :                 offset_2 = offset_1;

	mov	DWORD PTR offset_2$1$[rsp], r12d

; 427  :                 offset_1 = offset;

	mov	DWORD PTR offset_1$1$[rsp], r11d
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	lea	r9, QWORD PTR [r10+rsi]

; 456  :     if (litEnd <= litLimit_w) {

	cmp	r9, r15
	ja	SHORT $LN966@ZSTD_compr
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rsi]
	movups	XMMWORD PTR [rcx], xmm0
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 462  :         if (litLength > 16) {

	cmp	r10, 16
	jbe	$LN1065@ZSTD_compr

; 463  :             ZSTD_wildcopy(seqStorePtr->lit+16, literals+16, (ptrdiff_t)litLength-16, ZSTD_no_overlap);

	mov	rax, QWORD PTR [rbp+24]
	add	rsi, 16
	add	rax, 16
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	lea	rcx, QWORD PTR [rax-16]
	add	rcx, r10
	npad	12
$LL980@ZSTD_compr:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rsi]

; 289  :             COPY16(op, ip);

	lea	rsi, QWORD PTR [rsi+16]

; 243  :     memcpy(dst, src, 16);

	movups	XMMWORD PTR [rax], xmm0

; 289  :             COPY16(op, ip);

	add	rax, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rax, rcx
	jb	SHORT $LL980@ZSTD_compr
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	$LN1065@ZSTD_compr
$LN966@ZSTD_compr:

; 424  :     if (ip <= ilimit_w) {

	cmp	rsi, r15
	ja	SHORT $LN1322@ZSTD_compr
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	mov	rdx, rcx
	sub	rdx, rsi
	add	rdx, r15
	sub	rsi, rcx
	npad	7
$LL997@ZSTD_compr:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rsi+rcx]
	movups	XMMWORD PTR [rcx], xmm0

; 289  :             COPY16(op, ip);

	add	rcx, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rcx, rdx
	jb	SHORT $LL997@ZSTD_compr
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 427  :         ip = ilimit_w;

	mov	rcx, rdx
	mov	rsi, r15
$LN1322@ZSTD_compr:

; 428  :     }
; 429  :     while (ip < iend) *op++ = *ip++;

	cmp	rsi, r9
	jae	$LN1065@ZSTD_compr
	sub	rcx, rsi
$LL1359@ZSTD_compr:
	movzx	eax, BYTE PTR [rsi]
	mov	BYTE PTR [rcx+rsi], al
	inc	rsi
	cmp	rsi, r9
	jb	SHORT $LL1359@ZSTD_compr

; 490  : }

	jmp	$LN1065@ZSTD_compr
$LN15@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 430  :             } else if ((matchIndex > dictStartIndex) && (MEM_read32(match) == MEM_read32(ip))) {

	cmp	r9d, edx
	jbe	$LN17@ZSTD_compr
	mov	eax, DWORD PTR [rdi]
	cmp	DWORD PTR [r12], eax
	jne	$LN17@ZSTD_compr
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rax, QWORD PTR [rdi+1]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 431  :                 size_t const h3 = ZSTD_hashPtr(ip+1, hBitsL, 8);

	lea	rdx, QWORD PTR [rdi+1]

; 433  :                 const BYTE* const match3Base = matchIndex3 < prefixStartIndex ? dictBase : base;

	mov	r8d, DWORD PTR prefixStartIndex$1$[rsp]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rcx, -3523014627327384477		; cf1bbcdcb7a56463H
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 433  :                 const BYTE* const match3Base = matchIndex3 < prefixStartIndex ? dictBase : base;

	mov	r15, QWORD PTR base$1$[rsp]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	imul	rax, rcx
	mov	ecx, DWORD PTR tv6361[rsp]
	shr	rax, cl
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 432  :                 U32 const matchIndex3 = hashLong[h3];

	mov	rcx, QWORD PTR hashLong$1$[rsp]
	mov	r13d, DWORD PTR [rcx+rax*4]
	lea	rcx, QWORD PTR [rcx+rax*4]

; 433  :                 const BYTE* const match3Base = matchIndex3 < prefixStartIndex ? dictBase : base;

	cmp	r13d, r8d
	mov	QWORD PTR tv6303[rsp], rdx

; 434  :                 const BYTE* match3 = match3Base + matchIndex3;
; 435  :                 U32 offset;
; 436  :                 hashLong[h3] = current + 1;

	lea	eax, DWORD PTR [rbx+1]
	cmovb	r15, QWORD PTR dictBase$1$[rsp]
	add	r15, r13
	mov	DWORD PTR [rcx], eax

; 437  :                 if ( (matchIndex3 > dictStartIndex) && (MEM_read64(match3) == MEM_read64(ip+1)) ) {

	cmp	r13d, DWORD PTR lowLimit$1$[rsp]
	jbe	$LN19@ZSTD_compr
	mov	rax, QWORD PTR [rdx]
	cmp	QWORD PTR [r15], rax
	jne	$LN19@ZSTD_compr

; 438  :                     const BYTE* const matchEnd = matchIndex3 < prefixStartIndex ? dictEnd : iend;

	mov	rdx, QWORD PTR iend$1$[rsp]

; 440  :                     mLength = ZSTD_count_2segments(ip+9, match3+8, iend, matchEnd, prefixStart) + 8;

	lea	r9, QWORD PTR [rdi+9]
	mov	r12, QWORD PTR prefixStart$1$[rsp]
	lea	r11, QWORD PTR [r15+8]
	cmp	r13d, r8d
	mov	QWORD PTR ip$1$[rsp], r9
	mov	rbx, rdx
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	mov	r8, rdx
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 438  :                     const BYTE* const matchEnd = matchIndex3 < prefixStartIndex ? dictEnd : iend;

	cmovb	rbx, QWORD PTR dictEnd$1$[rsp]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	mov	rcx, r9
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 439  :                     const BYTE* const lowMatchPtr = matchIndex3 < prefixStartIndex ? dictStart : prefixStart;

	cmovb	r12, QWORD PTR dictStart$1$[rsp]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	sub	rcx, r11
	add	rcx, rbx
	cmp	rcx, rdx

; 591  :     size_t const matchLength = ZSTD_count(ip, match, vEnd);

	mov	rdx, r11
	cmovb	r8, rcx
	mov	rcx, r9
	call	ZSTD_count
	mov	rdi, rax

; 592  :     if (match + matchLength != mEnd) return matchLength;

	lea	rcx, QWORD PTR [rax+r11]
	cmp	rcx, rbx
	jne	SHORT $LN1032@ZSTD_compr

; 593  :     DEBUGLOG(7, "ZSTD_count_2segments: found a 2-parts match (current length==%zu)", matchLength);
; 594  :     DEBUGLOG(7, "distance from match beginning to end dictionary = %zi", mEnd - match);
; 595  :     DEBUGLOG(7, "distance from current pos to end buffer = %zi", iEnd - ip);
; 596  :     DEBUGLOG(7, "next byte : ip==%02X, istart==%02X", ip[matchLength], *iStart);
; 597  :     DEBUGLOG(7, "final match length = %zu", matchLength + ZSTD_count(ip+matchLength, iStart, iEnd));
; 598  :     return matchLength + ZSTD_count(ip+matchLength, iStart, iEnd);

	mov	rcx, QWORD PTR ip$1$[rsp]
	mov	r8, QWORD PTR iend$1$[rsp]
	add	rcx, rax
	mov	rdx, QWORD PTR prefixStart$1$[rsp]
	call	ZSTD_count
	add	rdi, rax
$LN1032@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 442  :                     offset = current+1 - matchIndex3;

	mov	r11d, DWORD PTR current$1$[rsp]
	lea	r8, QWORD PTR [rdi+8]
	mov	rdi, QWORD PTR tv6303[rsp]
	sub	r11d, r13d
	inc	r11d

; 443  :                     while (((ip>anchor) & (match3>lowMatchPtr)) && (ip[-1] == match3[-1])) { ip--; match3--; mLength++; } /* catch up */

	mov	ecx, r14d
	cmp	rdi, rsi
	mov	eax, r14d
	seta	cl
	cmp	r15, r12
	seta	al
	test	ecx, eax
	je	SHORT $LN1450@ZSTD_compr
	npad	2
$LL6@ZSTD_compr:
	movzx	eax, BYTE PTR [r15-1]
	lea	rdx, QWORD PTR [rdi-1]
	dec	r15
	cmp	BYTE PTR [rdx], al
	jne	SHORT $LN1450@ZSTD_compr
	inc	r8
	mov	ecx, r14d
	cmp	rdx, rsi
	mov	eax, r14d
	mov	rdi, rdx
	seta	cl
	cmp	r15, r12
	seta	al
	test	ecx, eax
	jne	SHORT $LL6@ZSTD_compr
$LN1450@ZSTD_compr:

; 451  :                 offset_2 = offset_1;

	mov	r13d, DWORD PTR current$1$[rsp]
$LN9@ZSTD_compr:
	mov	r12d, DWORD PTR offset_1$1$[rsp]

; 453  :                 ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, offset + ZSTD_REP_MOVE, mLength-MINMATCH);

	lea	rbx, QWORD PTR [r8-3]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	mov	r15, QWORD PTR iend$1$[rsp]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 453  :                 ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, offset + ZSTD_REP_MOVE, mLength-MINMATCH);

	mov	r10, rdi
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rcx, QWORD PTR [rbp+24]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 453  :                 ZSTD_storeSeq(seqStore, (size_t)(ip-anchor), anchor, iend, offset + ZSTD_REP_MOVE, mLength-MINMATCH);

	sub	r10, rsi
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 441  :     BYTE const* const litLimit_w = litLimit - WILDCOPY_OVERLENGTH;

	add	r15, -32				; ffffffffffffffe0H
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 451  :                 offset_2 = offset_1;

	mov	DWORD PTR offset_2$1$[rsp], r12d

; 452  :                 offset_1 = offset;

	mov	DWORD PTR offset_1$1$[rsp], r11d
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	lea	r9, QWORD PTR [r10+rsi]

; 456  :     if (litEnd <= litLimit_w) {

	cmp	r9, r15
	ja	$LN1043@ZSTD_compr
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rsi]
	movups	XMMWORD PTR [rcx], xmm0
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 462  :         if (litLength > 16) {

	cmp	r10, 16
	jbe	$LN1065@ZSTD_compr

; 463  :             ZSTD_wildcopy(seqStorePtr->lit+16, literals+16, (ptrdiff_t)litLength-16, ZSTD_no_overlap);

	mov	rax, QWORD PTR [rbp+24]
	add	rsi, 16
	add	rax, 16
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	lea	rcx, QWORD PTR [rax-16]
	add	rcx, r10
	npad	3
$LL1057@ZSTD_compr:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rsi]

; 289  :             COPY16(op, ip);

	lea	rsi, QWORD PTR [rsi+16]

; 243  :     memcpy(dst, src, 16);

	movups	XMMWORD PTR [rax], xmm0

; 289  :             COPY16(op, ip);

	add	rax, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rax, rcx
	jb	SHORT $LL1057@ZSTD_compr
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 465  :     } else {

	jmp	$LN1065@ZSTD_compr
$LN19@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 445  :                     const BYTE* const matchEnd = matchIndex < prefixStartIndex ? dictEnd : iend;

	mov	rdx, QWORD PTR iend$1$[rsp]

; 447  :                     mLength = ZSTD_count_2segments(ip+4, match+4, iend, matchEnd, prefixStart) + 4;

	lea	r11, QWORD PTR [r12+4]
	mov	r15, QWORD PTR prefixStart$1$[rsp]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	lea	rcx, QWORD PTR [rdi+4]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 445  :                     const BYTE* const matchEnd = matchIndex < prefixStartIndex ? dictEnd : iend;

	cmp	r9d, r8d
	mov	rbx, rdx
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	mov	r8, rdx
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 445  :                     const BYTE* const matchEnd = matchIndex < prefixStartIndex ? dictEnd : iend;

	cmovb	rbx, QWORD PTR dictEnd$1$[rsp]

; 446  :                     const BYTE* const lowMatchPtr = matchIndex < prefixStartIndex ? dictStart : prefixStart;

	cmovb	r15, QWORD PTR dictStart$1$[rsp]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	sub	rcx, r11
	add	rcx, rbx
	cmp	rcx, rdx

; 591  :     size_t const matchLength = ZSTD_count(ip, match, vEnd);

	mov	rdx, r11
	cmovb	r8, rcx
	lea	rcx, QWORD PTR [rdi+4]
	call	ZSTD_count
	mov	r13, rax

; 592  :     if (match + matchLength != mEnd) return matchLength;

	lea	rcx, QWORD PTR [r11+rax]
	cmp	rcx, rbx
	jne	SHORT $LN1037@ZSTD_compr

; 593  :     DEBUGLOG(7, "ZSTD_count_2segments: found a 2-parts match (current length==%zu)", matchLength);
; 594  :     DEBUGLOG(7, "distance from match beginning to end dictionary = %zi", mEnd - match);
; 595  :     DEBUGLOG(7, "distance from current pos to end buffer = %zi", iEnd - ip);
; 596  :     DEBUGLOG(7, "next byte : ip==%02X, istart==%02X", ip[matchLength], *iStart);
; 597  :     DEBUGLOG(7, "final match length = %zu", matchLength + ZSTD_count(ip+matchLength, iStart, iEnd));
; 598  :     return matchLength + ZSTD_count(ip+matchLength, iStart, iEnd);

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rcx, QWORD PTR [rax+4]
	mov	rdx, QWORD PTR prefixStart$1$[rsp]
	add	rcx, rdi
	call	ZSTD_count
	add	r13, rax
$LN1037@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 449  :                     while (((ip>anchor) & (match>lowMatchPtr)) && (ip[-1] == match[-1])) { ip--; match--; mLength++; }   /* catch up */

	mov	ecx, r14d
	lea	r8, QWORD PTR [r13+4]
	mov	r13d, DWORD PTR current$1$[rsp]
	mov	eax, r14d
	mov	r11d, r13d
	sub	r11d, DWORD PTR matchIndex$1$[rsp]
	cmp	r12, r15
	seta	cl
	cmp	rdi, rsi
	seta	al
	test	ecx, eax
	je	$LN9@ZSTD_compr
	npad	4
$LL8@ZSTD_compr:
	movzx	eax, BYTE PTR [r12-1]
	lea	rdx, QWORD PTR [rdi-1]
	dec	r12
	cmp	BYTE PTR [rdx], al
	jne	$LN9@ZSTD_compr
	inc	r8
	mov	ecx, r14d
	cmp	rdx, rsi
	mov	eax, r14d
	mov	rdi, rdx
	seta	cl
	cmp	r12, r15
	seta	al
	test	ecx, eax
	jne	SHORT $LL8@ZSTD_compr

; 443  :                     while (((ip>anchor) & (match3>lowMatchPtr)) && (ip[-1] == match3[-1])) { ip--; match3--; mLength++; } /* catch up */

	jmp	$LN9@ZSTD_compr
$LN1043@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 424  :     if (ip <= ilimit_w) {

	cmp	rsi, r15
	ja	SHORT $LN1327@ZSTD_compr
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 270  :     BYTE* const oend = op + length;

	mov	rdx, rcx
	sub	rdx, rsi
	add	rdx, r15
	sub	rsi, rcx
	npad	9
$LL1074@ZSTD_compr:

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rcx+rsi]
	movups	XMMWORD PTR [rcx], xmm0

; 289  :             COPY16(op, ip);

	add	rcx, 16

; 290  :         }
; 291  :         while (op < oend);

	cmp	rcx, rdx
	jb	SHORT $LL1074@ZSTD_compr
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 427  :         ip = ilimit_w;

	mov	rcx, rdx
	mov	rsi, r15
$LN1327@ZSTD_compr:

; 428  :     }
; 429  :     while (ip < iend) *op++ = *ip++;

	cmp	rsi, r9
	jae	SHORT $LN1065@ZSTD_compr
	sub	rcx, rsi
	npad	2
$LL1361@ZSTD_compr:
	movzx	eax, BYTE PTR [rsi]
	mov	BYTE PTR [rsi+rcx], al
	inc	rsi
	cmp	rsi, r9
	jb	SHORT $LL1361@ZSTD_compr
$LN1065@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 461  :         ip += mLength;

	add	QWORD PTR [rbp+24], r10
	mov	rcx, QWORD PTR [rbp+8]
	cmp	r10, 65535				; 0000ffffH
	jbe	SHORT $LN1406@ZSTD_compr
	mov	rax, rcx
	mov	DWORD PTR [rbp+72], 1
	sub	rax, QWORD PTR [rbp]
	sar	rax, 3
	mov	DWORD PTR [rbp+76], eax
$LN1406@ZSTD_compr:
	mov	WORD PTR [rcx+4], r10w
	lea	ecx, DWORD PTR [r11+3]
	mov	rax, QWORD PTR [rbp+8]
	mov	DWORD PTR [rax], ecx
	mov	rcx, QWORD PTR [rbp+8]
	cmp	rbx, 65535				; 0000ffffH
	jbe	SHORT $LN1407@ZSTD_compr
	mov	rax, rcx
	mov	DWORD PTR [rbp+72], 2
	sub	rax, QWORD PTR [rbp]
	sar	rax, 3
	mov	DWORD PTR [rbp+76], eax
$LN1407@ZSTD_compr:
	mov	WORD PTR [rcx+6], bx
$LN1461@ZSTD_compr:
	add	QWORD PTR [rbp+8], 8
	add	rdi, r8
	mov	rsi, rdi

; 462  :         anchor = ip;

	cmp	rdi, QWORD PTR ilimit$1$[rsp]

; 463  : 
; 464  :         if (ip <= ilimit) {

	ja	$LN1452@ZSTD_compr

; 468  :                 hashLong[ZSTD_hashPtr(base+indexToInsert, hBitsL, 8)] = indexToInsert;

	mov	r11, QWORD PTR base$1$[rsp]
	lea	r8d, DWORD PTR [r13+2]
	mov	rbx, QWORD PTR hashLong$1$[rsp]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	r15, -3523014627327384477		; cf1bbcdcb7a56463H
	mov	ecx, DWORD PTR tv6361[rsp]
	mov	edx, edi
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 468  :                 hashLong[ZSTD_hashPtr(base+indexToInsert, hBitsL, 8)] = indexToInsert;

	mov	r9d, r8d
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	sub	edx, r11d
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 468  :                 hashLong[ZSTD_hashPtr(base+indexToInsert, hBitsL, 8)] = indexToInsert;

	add	r9, r11

; 469  :                 hashLong[ZSTD_hashPtr(ip-2, hBitsL, 8)] = (U32)(ip-2-base);

	sub	edx, 2
	mov	r10d, edi
	sub	r10d, r11d
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rax, QWORD PTR [r9]
	imul	rax, r15
	shr	rax, cl
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 468  :                 hashLong[ZSTD_hashPtr(base+indexToInsert, hBitsL, 8)] = indexToInsert;

	mov	DWORD PTR [rbx+rax*4], r8d
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rax, QWORD PTR [rdi-2]
	imul	rax, r15
	shr	rax, cl
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 469  :                 hashLong[ZSTD_hashPtr(ip-2, hBitsL, 8)] = (U32)(ip-2-base);

	mov	DWORD PTR [rbx+rax*4], edx
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 631  :     switch(mls)

	mov	ebx, DWORD PTR mls$[rsp]
	mov	eax, ebx
	sub	eax, 5
	je	$LN1142@ZSTD_compr
	sub	eax, 1
	je	$LN1143@ZSTD_compr
	sub	eax, 1
	je	$LN1144@ZSTD_compr
	cmp	eax, 1
	je	SHORT $LN1145@ZSTD_compr

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	imul	edx, DWORD PTR [r9], -1640531535	; 9e3779b1H

; 631  :     switch(mls)

	mov	eax, ebx

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	mov	rcx, QWORD PTR tv6309[rsp]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 470  :                 hashSmall[ZSTD_hashPtr(base+indexToInsert, hBitsS, mls)] = indexToInsert;

	mov	r9, QWORD PTR hashSmall$1$[rsp]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	shr	rdx, cl
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 470  :                 hashSmall[ZSTD_hashPtr(base+indexToInsert, hBitsS, mls)] = indexToInsert;

	mov	DWORD PTR [r9+rdx*4], r8d
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 631  :     switch(mls)

	sub	eax, 5
	je	$LN1445@ZSTD_compr
	sub	eax, 1
	je	$LN1446@ZSTD_compr
	sub	eax, 1
	je	SHORT $LN1447@ZSTD_compr
	cmp	eax, 1
	je	SHORT $LN1448@ZSTD_compr

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	imul	edx, DWORD PTR [rdi-1], -1640531535	; 9e3779b1H

; 634  :     case 4: return ZSTD_hash4Ptr(p, hBits);

	jmp	$LN1466@ZSTD_compr
$LN1145@ZSTD_compr:

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rax, QWORD PTR [r9]
	mov	ecx, DWORD PTR tv6392[rsp]

; 638  :     case 8: return ZSTD_hash8Ptr(p, hBits);

	mov	r9, QWORD PTR hashSmall$1$[rsp]

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	imul	rax, r15
	shr	rax, cl

; 638  :     case 8: return ZSTD_hash8Ptr(p, hBits);

	mov	DWORD PTR [r9+rax*4], r8d

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rdx, QWORD PTR [rdi-1]
	imul	rdx, r15

; 638  :     case 8: return ZSTD_hash8Ptr(p, hBits);

	jmp	$LN1466@ZSTD_compr
$LN1448@ZSTD_compr:

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rdx, QWORD PTR [rdi-1]

; 631  :     switch(mls)

	mov	ecx, DWORD PTR tv6392[rsp]

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	imul	rdx, r15

; 638  :     case 8: return ZSTD_hash8Ptr(p, hBits);

	jmp	$LN1466@ZSTD_compr
$LN1144@ZSTD_compr:

; 622  : static size_t ZSTD_hash7(U64 u, U32 h) { return (size_t)(((u  << (64-56)) * prime7bytes) >> (64-h)) ; }

	mov	rax, QWORD PTR [r9]
	mov	rcx, -3523014627193167104		; cf1bbcdcbfa56300H

; 637  :     case 7: return ZSTD_hash7Ptr(p, hBits);

	mov	r9, QWORD PTR hashSmall$1$[rsp]

; 622  : static size_t ZSTD_hash7(U64 u, U32 h) { return (size_t)(((u  << (64-56)) * prime7bytes) >> (64-h)) ; }

	imul	rax, rcx
	mov	ecx, DWORD PTR tv6392[rsp]
	shr	rax, cl

; 637  :     case 7: return ZSTD_hash7Ptr(p, hBits);

	mov	DWORD PTR [r9+rax*4], r8d

; 622  : static size_t ZSTD_hash7(U64 u, U32 h) { return (size_t)(((u  << (64-56)) * prime7bytes) >> (64-h)) ; }

	mov	rax, -3523014627193167104		; cf1bbcdcbfa56300H

; 637  :     case 7: return ZSTD_hash7Ptr(p, hBits);

	jmp	$LN1467@ZSTD_compr
$LN1447@ZSTD_compr:

; 631  :     switch(mls)

	mov	ecx, DWORD PTR tv6392[rsp]

; 622  : static size_t ZSTD_hash7(U64 u, U32 h) { return (size_t)(((u  << (64-56)) * prime7bytes) >> (64-h)) ; }

	mov	rax, -3523014627193167104		; cf1bbcdcbfa56300H

; 637  :     case 7: return ZSTD_hash7Ptr(p, hBits);

	jmp	SHORT $LN1467@ZSTD_compr
$LN1143@ZSTD_compr:

; 618  : static size_t ZSTD_hash6(U64 u, U32 h) { return (size_t)(((u  << (64-48)) * prime6bytes) >> (64-h)) ; }

	mov	rax, QWORD PTR [r9]
	mov	rcx, -3523014627193847808		; cf1bbcdcbf9b0000H

; 636  :     case 6: return ZSTD_hash6Ptr(p, hBits);

	mov	r9, QWORD PTR hashSmall$1$[rsp]

; 618  : static size_t ZSTD_hash6(U64 u, U32 h) { return (size_t)(((u  << (64-48)) * prime6bytes) >> (64-h)) ; }

	imul	rax, rcx
	mov	ecx, DWORD PTR tv6392[rsp]
	shr	rax, cl

; 636  :     case 6: return ZSTD_hash6Ptr(p, hBits);

	mov	DWORD PTR [r9+rax*4], r8d

; 618  : static size_t ZSTD_hash6(U64 u, U32 h) { return (size_t)(((u  << (64-48)) * prime6bytes) >> (64-h)) ; }

	mov	rax, -3523014627193847808		; cf1bbcdcbf9b0000H

; 636  :     case 6: return ZSTD_hash6Ptr(p, hBits);

	jmp	SHORT $LN1467@ZSTD_compr
$LN1446@ZSTD_compr:

; 631  :     switch(mls)

	mov	ecx, DWORD PTR tv6392[rsp]

; 618  : static size_t ZSTD_hash6(U64 u, U32 h) { return (size_t)(((u  << (64-48)) * prime6bytes) >> (64-h)) ; }

	mov	rax, -3523014627193847808		; cf1bbcdcbf9b0000H

; 636  :     case 6: return ZSTD_hash6Ptr(p, hBits);

	jmp	SHORT $LN1467@ZSTD_compr
$LN1142@ZSTD_compr:

; 614  : static size_t ZSTD_hash5(U64 u, U32 h) { return (size_t)(((u  << (64-40)) * prime5bytes) >> (64-h)) ; }

	mov	rax, QWORD PTR [r9]
	mov	rcx, -3523014627271114752		; cf1bbcdcbb000000H

; 635  :     case 5: return ZSTD_hash5Ptr(p, hBits);

	mov	r9, QWORD PTR hashSmall$1$[rsp]

; 614  : static size_t ZSTD_hash5(U64 u, U32 h) { return (size_t)(((u  << (64-40)) * prime5bytes) >> (64-h)) ; }

	imul	rax, rcx
	mov	ecx, DWORD PTR tv6392[rsp]
	shr	rax, cl

; 635  :     case 5: return ZSTD_hash5Ptr(p, hBits);

	mov	DWORD PTR [r9+rax*4], r8d

; 631  :     switch(mls)

	jmp	SHORT $LN1171@ZSTD_compr
$LN1445@ZSTD_compr:
	mov	ecx, DWORD PTR tv6392[rsp]
$LN1171@ZSTD_compr:

; 614  : static size_t ZSTD_hash5(U64 u, U32 h) { return (size_t)(((u  << (64-40)) * prime5bytes) >> (64-h)) ; }

	mov	rax, -3523014627271114752		; cf1bbcdcbb000000H
$LN1467@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 471  :                 hashSmall[ZSTD_hashPtr(ip-1, hBitsS, mls)] = (U32)(ip-1-base);

	mov	rdx, QWORD PTR [rdi-1]
	imul	rdx, rax
$LN1466@ZSTD_compr:
	shr	rdx, cl
	lea	eax, DWORD PTR [r10-1]
	mov	DWORD PTR [r9+rdx*4], eax
	mov	r9, QWORD PTR iend$1$[rsp]
	npad	1
$LL10@ZSTD_compr:

; 472  :             }
; 473  : 
; 474  :             /* check immediate repcode */
; 475  :             while (ip <= ilimit) {
; 476  :                 U32 const current2 = (U32)(ip-base);
; 477  :                 U32 const repIndex2 = current2 - offset_2;
; 478  :                 const BYTE* repMatch2 = repIndex2 < prefixStartIndex ? dictBase + repIndex2 : base + repIndex2;
; 479  :                 if ( (((U32)((prefixStartIndex-1) - repIndex2) >= 3)   /* intentional overflow : ensure repIndex2 doesn't overlap dict + prefix */
; 480  :                     & (repIndex2 > dictStartIndex))
; 481  :                   && (MEM_read32(repMatch2) == MEM_read32(ip)) ) {

	mov	r8d, DWORD PTR prefixStartIndex$1$[rsp]
	mov	r13d, edi
	mov	rcx, QWORD PTR dictBase$1$[rsp]
	sub	r13d, r11d
	mov	edx, r13d
	mov	eax, r8d
	sub	edx, r12d
	cmp	edx, r8d
	cmovae	rcx, r11
	sub	eax, edx
	dec	eax
	mov	r11d, edx
	add	r11, rcx
	mov	ecx, r14d
	cmp	eax, 3
	mov	eax, r14d
	setae	cl
	cmp	edx, DWORD PTR lowLimit$1$[rsp]
	seta	al
	test	ecx, eax
	je	$LN1350@ZSTD_compr
	mov	eax, DWORD PTR [rdi]
	cmp	DWORD PTR [r11], eax
	jne	$LN1350@ZSTD_compr

; 482  :                     const BYTE* const repEnd2 = repIndex2 < prefixStartIndex ? dictEnd : iend;

	cmp	edx, r8d

; 483  :                     size_t const repLength2 = ZSTD_count_2segments(ip+4, repMatch2+4, iend, repEnd2, prefixStart) + 4;

	lea	r12, QWORD PTR [rdi+4]
	mov	rbx, r9
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	mov	r8, r9
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 482  :                     const BYTE* const repEnd2 = repIndex2 < prefixStartIndex ? dictEnd : iend;

	cmovb	rbx, QWORD PTR dictEnd$1$[rsp]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	mov	rcx, r12
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 483  :                     size_t const repLength2 = ZSTD_count_2segments(ip+4, repMatch2+4, iend, repEnd2, prefixStart) + 4;

	add	r11, 4
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 590  :     const BYTE* const vEnd = MIN( ip + (mEnd - match), iEnd);

	sub	rcx, r11

; 591  :     size_t const matchLength = ZSTD_count(ip, match, vEnd);

	mov	rdx, r11
	add	rcx, rbx
	cmp	rcx, r9
	cmovb	r8, rcx
	mov	rcx, r12
	call	ZSTD_count
	mov	r15, rax

; 592  :     if (match + matchLength != mEnd) return matchLength;

	lea	rcx, QWORD PTR [rax+r11]
	cmp	rcx, rbx
	jne	SHORT $LN1196@ZSTD_compr

; 593  :     DEBUGLOG(7, "ZSTD_count_2segments: found a 2-parts match (current length==%zu)", matchLength);
; 594  :     DEBUGLOG(7, "distance from match beginning to end dictionary = %zi", mEnd - match);
; 595  :     DEBUGLOG(7, "distance from current pos to end buffer = %zi", iEnd - ip);
; 596  :     DEBUGLOG(7, "next byte : ip==%02X, istart==%02X", ip[matchLength], *iStart);
; 597  :     DEBUGLOG(7, "final match length = %zu", matchLength + ZSTD_count(ip+matchLength, iStart, iEnd));
; 598  :     return matchLength + ZSTD_count(ip+matchLength, iStart, iEnd);

	mov	r8, QWORD PTR iend$1$[rsp]
	lea	rcx, QWORD PTR [rax+r12]
	mov	rdx, QWORD PTR prefixStart$1$[rsp]
	call	ZSTD_count
	add	r15, rax
$LN1196@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 484  :                     U32 const tmpOffset = offset_2; offset_2 = offset_1; offset_1 = tmpOffset;   /* swap offset_2 <=> offset_1 */

	mov	eax, DWORD PTR offset_2$1$[rsp]
	add	r15, 4
	mov	r12d, DWORD PTR offset_1$1$[rsp]
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 456  :     if (litEnd <= litLimit_w) {

	mov	r9, QWORD PTR iend$1$[rsp]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 484  :                     U32 const tmpOffset = offset_2; offset_2 = offset_1; offset_1 = tmpOffset;   /* swap offset_2 <=> offset_1 */

	mov	DWORD PTR offset_1$1$[rsp], eax
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 442  :     BYTE const* const litEnd = literals + litLength;

	mov	rax, QWORD PTR [rbp+24]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 485  :                     ZSTD_storeSeq(seqStore, 0, anchor, iend, 0, repLength2-MINMATCH);

	lea	rdx, QWORD PTR [r15-3]
	mov	DWORD PTR offset_2$1$[rsp], r12d
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 456  :     if (litEnd <= litLimit_w) {

	lea	rcx, QWORD PTR [r9-32]
	cmp	rsi, rcx
	ja	SHORT $LL1233@ZSTD_compr
; File E:\dev\pyzstd\lib\common\zstd_internal.h

; 243  :     memcpy(dst, src, 16);

	movups	xmm0, XMMWORD PTR [rsi]
	movups	XMMWORD PTR [rax], xmm0
	npad	4
$LL1233@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 476  :     seqStorePtr->sequences[0].litLength = (U16)litLength;

	mov	rax, QWORD PTR [rbp+8]
	mov	WORD PTR [rax+4], r14w

; 477  : 
; 478  :     /* match offset */
; 479  :     seqStorePtr->sequences[0].offset = offCode + 1;

	mov	rax, QWORD PTR [rbp+8]
	mov	DWORD PTR [rax], 1
	mov	rcx, QWORD PTR [rbp+8]

; 480  : 
; 481  :     /* match Length */
; 482  :     if (mlBase>0xFFFF) {

	cmp	rdx, 65535				; 0000ffffH
	jbe	SHORT $LN1408@ZSTD_compr

; 483  :         assert(seqStorePtr->longLengthID == 0); /* there can only be a single long length */
; 484  :         seqStorePtr->longLengthID = 2;
; 485  :         seqStorePtr->longLengthPos = (U32)(seqStorePtr->sequences - seqStorePtr->sequencesStart);

	mov	rax, rcx
	mov	DWORD PTR [rbp+72], 2
	sub	rax, QWORD PTR [rbp]
	sar	rax, 3
	mov	DWORD PTR [rbp+76], eax
$LN1408@ZSTD_compr:

; 631  :     switch(mls)

	mov	ebx, DWORD PTR mls$[rsp]
	mov	eax, ebx

; 487  :     seqStorePtr->sequences[0].matchLength = (U16)mlBase;

	mov	WORD PTR [rcx+6], dx

; 488  : 
; 489  :     seqStorePtr->sequences++;

	add	QWORD PTR [rbp+8], 8

; 631  :     switch(mls)

	sub	eax, 5
	je	SHORT $LN1243@ZSTD_compr
	sub	eax, 1
	je	SHORT $LN1244@ZSTD_compr
	sub	eax, 1
	je	SHORT $LN1245@ZSTD_compr
	cmp	eax, 1
	je	SHORT $LN1246@ZSTD_compr

; 610  : static U32    ZSTD_hash4(U32 u, U32 h) { return (u * prime4bytes) >> (32-h) ; }

	imul	edx, DWORD PTR [rdi], -1640531535	; 9e3779b1H
	mov	rcx, QWORD PTR tv6309[rsp]

; 634  :     case 4: return ZSTD_hash4Ptr(p, hBits);

	jmp	SHORT $LN1468@ZSTD_compr
$LN1246@ZSTD_compr:

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rax, -3523014627327384477		; cf1bbcdcb7a56463H

; 638  :     case 8: return ZSTD_hash8Ptr(p, hBits);

	jmp	SHORT $LN1469@ZSTD_compr
$LN1245@ZSTD_compr:

; 622  : static size_t ZSTD_hash7(U64 u, U32 h) { return (size_t)(((u  << (64-56)) * prime7bytes) >> (64-h)) ; }

	mov	rax, -3523014627193167104		; cf1bbcdcbfa56300H

; 637  :     case 7: return ZSTD_hash7Ptr(p, hBits);

	jmp	SHORT $LN1469@ZSTD_compr
$LN1244@ZSTD_compr:

; 618  : static size_t ZSTD_hash6(U64 u, U32 h) { return (size_t)(((u  << (64-48)) * prime6bytes) >> (64-h)) ; }

	mov	rax, -3523014627193847808		; cf1bbcdcbf9b0000H

; 636  :     case 6: return ZSTD_hash6Ptr(p, hBits);

	jmp	SHORT $LN1469@ZSTD_compr
$LN1243@ZSTD_compr:

; 614  : static size_t ZSTD_hash5(U64 u, U32 h) { return (size_t)(((u  << (64-40)) * prime5bytes) >> (64-h)) ; }

	mov	rax, -3523014627271114752		; cf1bbcdcbb000000H
$LN1469@ZSTD_compr:
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 486  :                     hashSmall[ZSTD_hashPtr(ip, hBitsS, mls)] = current2;

	mov	rdx, QWORD PTR [rdi]
	mov	ecx, DWORD PTR tv6392[rsp]
	imul	rdx, rax
$LN1468@ZSTD_compr:
	mov	rax, QWORD PTR hashSmall$1$[rsp]
	lea	r11, QWORD PTR [r9-8]
	shr	rdx, cl
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rcx, -3523014627327384477		; cf1bbcdcb7a56463H
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 486  :                     hashSmall[ZSTD_hashPtr(ip, hBitsS, mls)] = current2;

	mov	DWORD PTR [rax+rdx*4], r13d
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	mov	rax, QWORD PTR [rdi]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 488  :                     ip += repLength2;

	add	rdi, r15
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	imul	rax, rcx
	mov	ecx, DWORD PTR tv6361[rsp]
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 488  :                     ip += repLength2;

	mov	rsi, rdi
; File E:\dev\pyzstd\lib\compress\zstd_compress_internal.h

; 626  : static size_t ZSTD_hash8(U64 u, U32 h) { return (size_t)(((u) * prime8bytes) >> (64-h)) ; }

	shr	rax, cl
; File E:\dev\pyzstd\lib\compress\zstd_double_fast.c

; 487  :                     hashLong[ZSTD_hashPtr(ip, hBitsL, 8)] = current2;

	mov	rcx, QWORD PTR hashLong$1$[rsp]
	cmp	rdi, r11
	mov	r11, QWORD PTR base$1$[rsp]
	mov	DWORD PTR [rcx+rax*4], r13d
	jbe	$LL10@ZSTD_compr

; 489  :                     anchor = ip;
; 490  :                     continue;
; 491  :                 }
; 492  :                 break;
; 493  :     }   }   }

	jmp	SHORT $LN1350@ZSTD_compr
$LN17@ZSTD_compr:

; 454  : 
; 455  :             } else {
; 456  :                 ip += ((ip-anchor) >> kSearchStrength) + 1;

	mov	rax, rdi
	inc	rdi
	sub	rax, rsi
	sar	rax, 8
	add	rdi, rax
$LN1452@ZSTD_compr:

; 391  : 
; 392  :     /* Search Loop */
; 393  :     while (ip < ilimit) {  /* < instead of <=, because (ip+1) */

	mov	ebx, DWORD PTR mls$[rsp]
$LN1350@ZSTD_compr:
	mov	r15, -3523014627327384477		; cf1bbcdcb7a56463H
	mov	ecx, DWORD PTR tv6392[rsp]
	mov	r9, -3523014627193167104		; cf1bbcdcbfa56300H
	mov	r8, QWORD PTR tv6309[rsp]
	mov	r10, -3523014627193847808		; cf1bbcdcbf9b0000H
	mov	r11, -3523014627271114752		; cf1bbcdcbb000000H
	cmp	rdi, QWORD PTR ilimit$1$[rsp]
	jb	$LL2@ZSTD_compr
	mov	r13d, DWORD PTR offset_2$1$[rsp]
	mov	eax, DWORD PTR offset_1$1$[rsp]
	mov	r14, QWORD PTR rep$[rsp]
$LN3@ZSTD_compr:

; 494  : 
; 495  :     /* save reps for next block */
; 496  :     rep[0] = offset_1;

	mov	DWORD PTR [r14], eax

; 497  :     rep[1] = offset_2;
; 498  : 
; 499  :     /* Return the last literals size */
; 500  :     return (size_t)(iend - anchor);

	mov	rax, QWORD PTR iend$1$[rsp]
	sub	rax, rsi
	mov	DWORD PTR [r14+4], r13d
$LN1@ZSTD_compr:

; 501  : }

	mov	rbx, QWORD PTR [rsp+232]
	add	rsp, 160				; 000000a0H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
ZSTD_compressBlock_doubleFast_extDict_generic ENDP
_TEXT	ENDS
END
