; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29111.0 

include listing.inc

INCLUDELIB OLDNAMES

EXTRN	__imp_calloc:PROC
PUBLIC	ZSTD_free
PUBLIC	ZSTD_calloc
PUBLIC	ZSTD_malloc
PUBLIC	ZSTD_getErrorCode
PUBLIC	ZSTD_getErrorName
PUBLIC	ZSTD_isError
PUBLIC	ZSTD_versionString
pdata	SEGMENT
$pdata$ZSTD_free DD imagerel $LN7
	DD	imagerel $LN7+46
	DD	imagerel $unwind$ZSTD_free
$pdata$ZSTD_calloc DD imagerel $LN5
	DD	imagerel $LN5+27
	DD	imagerel $unwind$ZSTD_calloc
$pdata$0$ZSTD_calloc DD imagerel $LN5+27
	DD	imagerel $LN5+65
	DD	imagerel $chain$0$ZSTD_calloc
$pdata$1$ZSTD_calloc DD imagerel $LN5+65
	DD	imagerel $LN5+82
	DD	imagerel $chain$1$ZSTD_calloc
$pdata$ZSTD_malloc DD imagerel $LN5
	DD	imagerel $LN5+41
	DD	imagerel $unwind$ZSTD_malloc
$SG4294967146 DB '1.4.5', 00H
_DATA	ENDS
xdata	SEGMENT
$unwind$ZSTD_free DD 010401H
	DD	04204H
$unwind$ZSTD_calloc DD 020601H
	DD	070023206H
$chain$0$ZSTD_calloc DD 020521H
	DD	063405H
	DD	imagerel $LN5
	DD	imagerel $LN5+27
	DD	imagerel $unwind$ZSTD_calloc
$chain$1$ZSTD_calloc DD 021H
	DD	imagerel $LN5
	DD	imagerel $LN5+27
	DD	imagerel $unwind$ZSTD_calloc
$unwind$ZSTD_malloc DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\common\error_private.h
_TEXT	SEGMENT
code$ = 8
ERR_isError PROC

; 56   : ERR_STATIC unsigned ERR_isError(size_t code) { return (code > ERROR(maxCode)); }

	xor	eax, eax
	cmp	rcx, -120				; ffffffffffffff88H
	seta	al
	ret	0
ERR_isError ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\common\error_private.h
_TEXT	SEGMENT
code$ = 8
ERR_getErrorCode PROC

; 56   : ERR_STATIC unsigned ERR_isError(size_t code) { return (code > ERROR(maxCode)); }

	cmp	rcx, -120				; ffffffffffffff88H

; 58   : ERR_STATIC ERR_enum ERR_getErrorCode(size_t code) { if (!ERR_isError(code)) return (ERR_enum)0; return (ERR_enum) (0-code); }

	ja	SHORT $LN2@ERR_getErr
	xor	eax, eax
	ret	0
$LN2@ERR_getErr:
	neg	ecx
	mov	eax, ecx
	ret	0
ERR_getErrorCode ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\common\error_private.h
_TEXT	SEGMENT
code$ = 8
ERR_getErrorName PROC

; 56   : ERR_STATIC unsigned ERR_isError(size_t code) { return (code > ERROR(maxCode)); }

	cmp	rcx, -120				; ffffffffffffff88H

; 58   : ERR_STATIC ERR_enum ERR_getErrorCode(size_t code) { if (!ERR_isError(code)) return (ERR_enum)0; return (ERR_enum) (0-code); }

	ja	SHORT $LN4@ERR_getErr
	xor	ecx, ecx

; 73   :     return ERR_getErrorString(ERR_getErrorCode(code));

	jmp	ERR_getErrorString
$LN4@ERR_getErr:

; 58   : ERR_STATIC ERR_enum ERR_getErrorCode(size_t code) { if (!ERR_isError(code)) return (ERR_enum)0; return (ERR_enum) (0-code); }

	neg	ecx

; 73   :     return ERR_getErrorString(ERR_getErrorCode(code));

	jmp	ERR_getErrorString
ERR_getErrorName ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\common\zstd_common.c
_TEXT	SEGMENT
ZSTD_versionString PROC

; 27   : const char* ZSTD_versionString(void) { return ZSTD_VERSION_STRING; }

	lea	rax, OFFSET FLAT:$SG4294967146
	ret	0
ZSTD_versionString ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\common\zstd_common.c
; File E:\dev\pyzstd\lib\common\error_private.h
; File E:\dev\pyzstd\lib\common\zstd_common.c
_TEXT	SEGMENT
code$ = 8
ZSTD_isError PROC
; File E:\dev\pyzstd\lib\common\error_private.h

; 56   : ERR_STATIC unsigned ERR_isError(size_t code) { return (code > ERROR(maxCode)); }

	xor	eax, eax
	cmp	rcx, -120				; ffffffffffffff88H
	seta	al
; File E:\dev\pyzstd\lib\common\zstd_common.c

; 37   : unsigned ZSTD_isError(size_t code) { return ERR_isError(code); }

	ret	0
ZSTD_isError ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\common\zstd_common.c
; File E:\dev\pyzstd\lib\common\error_private.h
; File E:\dev\pyzstd\lib\common\zstd_common.c
_TEXT	SEGMENT
code$ = 8
ZSTD_getErrorName PROC
; File E:\dev\pyzstd\lib\common\error_private.h

; 56   : ERR_STATIC unsigned ERR_isError(size_t code) { return (code > ERROR(maxCode)); }

	cmp	rcx, -120				; ffffffffffffff88H

; 58   : ERR_STATIC ERR_enum ERR_getErrorCode(size_t code) { if (!ERR_isError(code)) return (ERR_enum)0; return (ERR_enum) (0-code); }

	ja	SHORT $LN6@ZSTD_getEr
	xor	ecx, ecx

; 73   :     return ERR_getErrorString(ERR_getErrorCode(code));

	jmp	ERR_getErrorString
$LN6@ZSTD_getEr:

; 58   : ERR_STATIC ERR_enum ERR_getErrorCode(size_t code) { if (!ERR_isError(code)) return (ERR_enum)0; return (ERR_enum) (0-code); }

	neg	ecx

; 73   :     return ERR_getErrorString(ERR_getErrorCode(code));

	jmp	ERR_getErrorString
ZSTD_getErrorName ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\common\zstd_common.c
; File E:\dev\pyzstd\lib\common\error_private.h
; File E:\dev\pyzstd\lib\common\zstd_common.c
; File E:\dev\pyzstd\lib\common\error_private.h
; File E:\dev\pyzstd\lib\common\zstd_common.c
_TEXT	SEGMENT
code$ = 8
ZSTD_getErrorCode PROC
; File E:\dev\pyzstd\lib\common\error_private.h

; 56   : ERR_STATIC unsigned ERR_isError(size_t code) { return (code > ERROR(maxCode)); }

	cmp	rcx, -120				; ffffffffffffff88H

; 58   : ERR_STATIC ERR_enum ERR_getErrorCode(size_t code) { if (!ERR_isError(code)) return (ERR_enum)0; return (ERR_enum) (0-code); }

	ja	SHORT $LN4@ZSTD_getEr
; File E:\dev\pyzstd\lib\common\zstd_common.c

; 45   : ZSTD_ErrorCode ZSTD_getErrorCode(size_t code) { return ERR_getErrorCode(code); }

	xor	eax, eax
	ret	0
$LN4@ZSTD_getEr:
; File E:\dev\pyzstd\lib\common\error_private.h

; 58   : ERR_STATIC ERR_enum ERR_getErrorCode(size_t code) { if (!ERR_isError(code)) return (ERR_enum)0; return (ERR_enum) (0-code); }

	neg	ecx
; File E:\dev\pyzstd\lib\common\zstd_common.c

; 45   : ZSTD_ErrorCode ZSTD_getErrorCode(size_t code) { return ERR_getErrorCode(code); }

	mov	eax, ecx
	ret	0
ZSTD_getErrorCode ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\common\zstd_common.c
_TEXT	SEGMENT
size$ = 48
customMem$ = 56
ZSTD_malloc PROC

; 57   : {

$LN5:
	sub	rsp, 40					; 00000028H

; 58   :     if (customMem.customAlloc)

	mov	r8, QWORD PTR [rdx]
	mov	rax, rdx
	test	r8, r8
	je	SHORT $LN2@ZSTD_mallo

; 59   :         return customMem.customAlloc(customMem.opaque, size);

	mov	rdx, rcx
	mov	rcx, QWORD PTR [rax+16]
	call	r8

; 61   : }

	add	rsp, 40					; 00000028H
	ret	0
$LN2@ZSTD_mallo:

; 60   :     return malloc(size);

	call	QWORD PTR __imp_malloc

; 61   : }

	add	rsp, 40					; 00000028H
	ret	0
ZSTD_malloc ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\common\zstd_common.c
_TEXT	SEGMENT
size$ = 48
customMem$ = 56
ZSTD_calloc PROC

; 64   : {

$LN5:
	push	rdi
	sub	rsp, 32					; 00000020H

; 65   :     if (customMem.customAlloc) {

	mov	r8, QWORD PTR [rdx]
	mov	rax, rdx
	mov	rdi, rcx
	mov	rdx, rcx
	test	r8, r8
	je	SHORT $LN2@ZSTD_callo

; 66   :         /* calloc implemented as malloc+memset;
; 67   :          * not as efficient as calloc, but next best guess for custom malloc */
; 68   :         void* const ptr = customMem.customAlloc(customMem.opaque, size);

	mov	rcx, QWORD PTR [rax+16]
	mov	QWORD PTR [rsp+48], rbx
	call	r8

; 69   :         memset(ptr, 0, size);

	mov	r8, rdi
	xor	edx, edx
	mov	rcx, rax
	mov	rbx, rax
	call	memset

; 70   :         return ptr;

	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+48]

; 73   : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN2@ZSTD_callo:

; 71   :     }
; 72   :     return calloc(1, size);

	mov	ecx, 1
	call	QWORD PTR __imp_calloc

; 73   : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
ZSTD_calloc ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\common\zstd_common.c
_TEXT	SEGMENT
ptr$ = 48
customMem$ = 56
ZSTD_free PROC

; 76   : {

$LN7:
	sub	rsp, 40					; 00000028H
	mov	r8, rdx

; 77   :     if (ptr!=NULL) {

	test	rcx, rcx
	je	SHORT $LN4@ZSTD_free

; 78   :         if (customMem.customFree)

	mov	rax, QWORD PTR [rdx+8]
	test	rax, rax
	je	SHORT $LN3@ZSTD_free

; 79   :             customMem.customFree(customMem.opaque, ptr);

	mov	rdx, rcx
	mov	rcx, QWORD PTR [r8+16]
	call	rax

; 82   :     }
; 83   : }

	add	rsp, 40					; 00000028H
	ret	0
$LN3@ZSTD_free:

; 80   :         else
; 81   :             free(ptr);

	call	QWORD PTR __imp_free
$LN4@ZSTD_free:

; 82   :     }
; 83   : }

	add	rsp, 40					; 00000028H
	ret	0
ZSTD_free ENDP
_TEXT	ENDS
END
