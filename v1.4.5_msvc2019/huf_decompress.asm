; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29111.0 

include listing.inc

INCLUDELIB OLDNAMES

algoTime DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	026H
	DD	082H
	DD	0521H
	DD	04aH
	DD	0867H
	DD	026H
	DD	01c0H
	DD	080H
	DD	0549H
	DD	04aH
	DD	08beH
	DD	029H
	DD	022cH
	DD	080H
	DD	0549H
	DD	04aH
	DD	08beH
	DD	02fH
	DD	02caH
	DD	080H
	DD	058aH
	DD	04aH
	DD	0984H
	DD	035H
	DD	0373H
	DD	080H
	DD	059dH
	DD	04aH
	DD	09a0H
	DD	03dH
	DD	0381H
	DD	080H
	DD	05ebH
	DD	04bH
	DD	0a3eH
	DD	044H
	DD	039eH
	DD	080H
	DD	064dH
	DD	04bH
	DD	0aaaH
	DD	04bH
	DD	03b3H
	DD	080H
	DD	06c1H
	DD	04dH
	DD	0d1fH
	DD	04dH
	DD	0453H
	DD	080H
	DD	0823H
	DD	051H
	DD	0fa6H
	DD	054H
	DD	0499H
	DD	080H
	DD	094bH
	DD	057H
	DD	012b1H
	DD	058H
	DD	04daH
	DD	080H
	DD	096fH
	DD	05dH
	DD	01423H
	DD	054H
	DD	0545H
	DD	080H
	DD	0a54H
	DD	06aH
	DD	0148cH
	DD	06aH
	DD	05afH
	DD	080H
	DD	0976H
	DD	07cH
	DD	0104eH
	DD	07cH
	DD	02d2H
	DD	080H
	DD	0763H
	DD	091H
	DD	0790H
	DD	092H
PUBLIC	HUF_selectDecoder
PUBLIC	HUF_decompress4X2
PUBLIC	HUF_decompress4X2_DCtx
PUBLIC	HUF_decompress4X2_DCtx_wksp
PUBLIC	HUF_decompress4X1
PUBLIC	HUF_decompress4X1_DCtx
PUBLIC	HUF_decompress4X1_DCtx_wksp
PUBLIC	HUF_readDTableX1_wksp
PUBLIC	HUF_decompress4X_usingDTable_bmi2
PUBLIC	HUF_decompress1X1_DCtx_wksp_bmi2
PUBLIC	HUF_decompress4X_hufOnly_wksp_bmi2
PUBLIC	HUF_decompress1X_usingDTable_bmi2
PUBLIC	HUF_readDTableX2_wksp
pdata	SEGMENT
$pdata$HUF_decompress4X2 DD imagerel $LN713
	DD	imagerel $LN713+203
	DD	imagerel $unwind$HUF_decompress4X2
$pdata$HUF_decompress4X2_DCtx DD imagerel $LN711
	DD	imagerel $LN711+161
	DD	imagerel $unwind$HUF_decompress4X2_DCtx
$pdata$HUF_decompress4X2_DCtx_wksp DD imagerel $LN4
	DD	imagerel $LN4+42
	DD	imagerel $unwind$HUF_decompress4X2_DCtx_wksp
$pdata$HUF_decompress4X2_DCtx_wksp_bmi2 DD imagerel HUF_decompress4X2_DCtx_wksp_bmi2
	DD	imagerel HUF_decompress4X2_DCtx_wksp_bmi2+149
	DD	imagerel $unwind$HUF_decompress4X2_DCtx_wksp_bmi2
$pdata$HUF_decompress4X2_usingDTable_internal DD imagerel HUF_decompress4X2_usingDTable_internal
	DD	imagerel HUF_decompress4X2_usingDTable_internal+3813
	DD	imagerel $unwind$HUF_decompress4X2_usingDTable_internal
$pdata$HUF_decompress1X2_usingDTable_internal DD imagerel HUF_decompress1X2_usingDTable_internal
	DD	imagerel HUF_decompress1X2_usingDTable_internal+67
	DD	imagerel $unwind$HUF_decompress1X2_usingDTable_internal
$pdata$2$HUF_decompress1X2_usingDTable_internal DD imagerel HUF_decompress1X2_usingDTable_internal+67
	DD	imagerel HUF_decompress1X2_usingDTable_internal+103
	DD	imagerel $chain$2$HUF_decompress1X2_usingDTable_internal
$pdata$6$HUF_decompress1X2_usingDTable_internal DD imagerel HUF_decompress1X2_usingDTable_internal+103
	DD	imagerel HUF_decompress1X2_usingDTable_internal+695
	DD	imagerel $chain$6$HUF_decompress1X2_usingDTable_internal
$pdata$7$HUF_decompress1X2_usingDTable_internal DD imagerel HUF_decompress1X2_usingDTable_internal+695
	DD	imagerel HUF_decompress1X2_usingDTable_internal+765
	DD	imagerel $chain$7$HUF_decompress1X2_usingDTable_internal
$pdata$8$HUF_decompress1X2_usingDTable_internal DD imagerel HUF_decompress1X2_usingDTable_internal+765
	DD	imagerel HUF_decompress1X2_usingDTable_internal+874
	DD	imagerel $chain$8$HUF_decompress1X2_usingDTable_internal
$pdata$9$HUF_decompress1X2_usingDTable_internal DD imagerel HUF_decompress1X2_usingDTable_internal+874
	DD	imagerel HUF_decompress1X2_usingDTable_internal+901
	DD	imagerel $chain$9$HUF_decompress1X2_usingDTable_internal
$pdata$HUF_decompress4X2_usingDTable_internal_body DD imagerel HUF_decompress4X2_usingDTable_internal_body
	DD	imagerel HUF_decompress4X2_usingDTable_internal_body+4768
	DD	imagerel $unwind$HUF_decompress4X2_usingDTable_internal_body
$pdata$HUF_decompress1X2_usingDTable_internal_body DD imagerel HUF_decompress1X2_usingDTable_internal_body
	DD	imagerel HUF_decompress1X2_usingDTable_internal_body+67
	DD	imagerel $unwind$HUF_decompress1X2_usingDTable_internal_body
$pdata$2$HUF_decompress1X2_usingDTable_internal_body DD imagerel HUF_decompress1X2_usingDTable_internal_body+67
	DD	imagerel HUF_decompress1X2_usingDTable_internal_body+103
	DD	imagerel $chain$2$HUF_decompress1X2_usingDTable_internal_body
$pdata$6$HUF_decompress1X2_usingDTable_internal_body DD imagerel HUF_decompress1X2_usingDTable_internal_body+103
	DD	imagerel HUF_decompress1X2_usingDTable_internal_body+695
	DD	imagerel $chain$6$HUF_decompress1X2_usingDTable_internal_body
$pdata$7$HUF_decompress1X2_usingDTable_internal_body DD imagerel HUF_decompress1X2_usingDTable_internal_body+695
	DD	imagerel HUF_decompress1X2_usingDTable_internal_body+765
	DD	imagerel $chain$7$HUF_decompress1X2_usingDTable_internal_body
$pdata$8$HUF_decompress1X2_usingDTable_internal_body DD imagerel HUF_decompress1X2_usingDTable_internal_body+765
	DD	imagerel HUF_decompress1X2_usingDTable_internal_body+874
	DD	imagerel $chain$8$HUF_decompress1X2_usingDTable_internal_body
$pdata$9$HUF_decompress1X2_usingDTable_internal_body DD imagerel HUF_decompress1X2_usingDTable_internal_body+874
	DD	imagerel HUF_decompress1X2_usingDTable_internal_body+901
	DD	imagerel $chain$9$HUF_decompress1X2_usingDTable_internal_body
$pdata$HUF_decodeStreamX2 DD imagerel HUF_decodeStreamX2
	DD	imagerel HUF_decodeStreamX2+19
	DD	imagerel $unwind$HUF_decodeStreamX2
$pdata$3$HUF_decodeStreamX2 DD imagerel HUF_decodeStreamX2+19
	DD	imagerel HUF_decodeStreamX2+639
	DD	imagerel $chain$3$HUF_decodeStreamX2
$pdata$4$HUF_decodeStreamX2 DD imagerel HUF_decodeStreamX2+639
	DD	imagerel HUF_decodeStreamX2+729
	DD	imagerel $chain$4$HUF_decodeStreamX2
$pdata$5$HUF_decodeStreamX2 DD imagerel HUF_decodeStreamX2+729
	DD	imagerel HUF_decodeStreamX2+838
	DD	imagerel $chain$5$HUF_decodeStreamX2
$pdata$HUF_decodeSymbolX2 DD imagerel HUF_decodeSymbolX2
	DD	imagerel HUF_decodeSymbolX2+63
	DD	imagerel $unwind$HUF_decodeSymbolX2
$pdata$HUF_fillDTableX2 DD imagerel HUF_fillDTableX2
	DD	imagerel HUF_fillDTableX2+133
	DD	imagerel $unwind$HUF_fillDTableX2
$pdata$5$HUF_fillDTableX2 DD imagerel HUF_fillDTableX2+133
	DD	imagerel HUF_fillDTableX2+684
	DD	imagerel $chain$5$HUF_fillDTableX2
$pdata$6$HUF_fillDTableX2 DD imagerel HUF_fillDTableX2+684
	DD	imagerel HUF_fillDTableX2+706
	DD	imagerel $chain$6$HUF_fillDTableX2
$pdata$HUF_fillDTableX2Level2 DD imagerel HUF_fillDTableX2Level2
	DD	imagerel HUF_fillDTableX2Level2+145
	DD	imagerel $unwind$HUF_fillDTableX2Level2
$pdata$2$HUF_fillDTableX2Level2 DD imagerel HUF_fillDTableX2Level2+145
	DD	imagerel HUF_fillDTableX2Level2+304
	DD	imagerel $chain$2$HUF_fillDTableX2Level2
$pdata$3$HUF_fillDTableX2Level2 DD imagerel HUF_fillDTableX2Level2+304
	DD	imagerel HUF_fillDTableX2Level2+327
	DD	imagerel $chain$3$HUF_fillDTableX2Level2
$pdata$HUF_decompress4X1 DD imagerel $LN673
	DD	imagerel $LN673+194
	DD	imagerel $unwind$HUF_decompress4X1
$pdata$HUF_decompress4X1_DCtx DD imagerel $LN671
	DD	imagerel $LN671+152
	DD	imagerel $unwind$HUF_decompress4X1_DCtx
$pdata$HUF_decompress4X1_DCtx_wksp DD imagerel $LN669
	DD	imagerel $LN669+140
	DD	imagerel $unwind$HUF_decompress4X1_DCtx_wksp
$pdata$HUF_decompress4X1_DCtx_wksp_bmi2 DD imagerel HUF_decompress4X1_DCtx_wksp_bmi2
	DD	imagerel HUF_decompress4X1_DCtx_wksp_bmi2+140
	DD	imagerel $unwind$HUF_decompress4X1_DCtx_wksp_bmi2
$pdata$HUF_decompress4X1_usingDTable_internal DD imagerel HUF_decompress4X1_usingDTable_internal
	DD	imagerel HUF_decompress4X1_usingDTable_internal+2737
	DD	imagerel $unwind$HUF_decompress4X1_usingDTable_internal
$pdata$HUF_decompress1X1_usingDTable_internal DD imagerel HUF_decompress1X1_usingDTable_internal
	DD	imagerel HUF_decompress1X1_usingDTable_internal+96
	DD	imagerel $unwind$HUF_decompress1X1_usingDTable_internal
$pdata$1$HUF_decompress1X1_usingDTable_internal DD imagerel HUF_decompress1X1_usingDTable_internal+96
	DD	imagerel HUF_decompress1X1_usingDTable_internal+119
	DD	imagerel $chain$1$HUF_decompress1X1_usingDTable_internal
$pdata$3$HUF_decompress1X1_usingDTable_internal DD imagerel HUF_decompress1X1_usingDTable_internal+119
	DD	imagerel HUF_decompress1X1_usingDTable_internal+459
	DD	imagerel $chain$3$HUF_decompress1X1_usingDTable_internal
$pdata$4$HUF_decompress1X1_usingDTable_internal DD imagerel HUF_decompress1X1_usingDTable_internal+459
	DD	imagerel HUF_decompress1X1_usingDTable_internal+523
	DD	imagerel $chain$4$HUF_decompress1X1_usingDTable_internal
$pdata$5$HUF_decompress1X1_usingDTable_internal DD imagerel HUF_decompress1X1_usingDTable_internal+523
	DD	imagerel HUF_decompress1X1_usingDTable_internal+555
	DD	imagerel $chain$5$HUF_decompress1X1_usingDTable_internal
$pdata$HUF_decompress4X1_usingDTable_internal_body DD imagerel HUF_decompress4X1_usingDTable_internal_body
	DD	imagerel HUF_decompress4X1_usingDTable_internal_body+3377
	DD	imagerel $unwind$HUF_decompress4X1_usingDTable_internal_body
$pdata$HUF_decompress1X1_usingDTable_internal_body DD imagerel HUF_decompress1X1_usingDTable_internal_body
	DD	imagerel HUF_decompress1X1_usingDTable_internal_body+99
	DD	imagerel $unwind$HUF_decompress1X1_usingDTable_internal_body
$pdata$1$HUF_decompress1X1_usingDTable_internal_body DD imagerel HUF_decompress1X1_usingDTable_internal_body+99
	DD	imagerel HUF_decompress1X1_usingDTable_internal_body+122
	DD	imagerel $chain$1$HUF_decompress1X1_usingDTable_internal_body
$pdata$3$HUF_decompress1X1_usingDTable_internal_body DD imagerel HUF_decompress1X1_usingDTable_internal_body+122
	DD	imagerel HUF_decompress1X1_usingDTable_internal_body+459
	DD	imagerel $chain$3$HUF_decompress1X1_usingDTable_internal_body
$pdata$4$HUF_decompress1X1_usingDTable_internal_body DD imagerel HUF_decompress1X1_usingDTable_internal_body+459
	DD	imagerel HUF_decompress1X1_usingDTable_internal_body+523
	DD	imagerel $chain$4$HUF_decompress1X1_usingDTable_internal_body
$pdata$5$HUF_decompress1X1_usingDTable_internal_body DD imagerel HUF_decompress1X1_usingDTable_internal_body+523
	DD	imagerel HUF_decompress1X1_usingDTable_internal_body+555
	DD	imagerel $chain$5$HUF_decompress1X1_usingDTable_internal_body
$pdata$HUF_decodeStreamX1 DD imagerel HUF_decodeStreamX1
	DD	imagerel HUF_decodeStreamX1+22
	DD	imagerel $unwind$HUF_decodeStreamX1
$pdata$1$HUF_decodeStreamX1 DD imagerel HUF_decodeStreamX1+22
	DD	imagerel HUF_decodeStreamX1+394
	DD	imagerel $chain$1$HUF_decodeStreamX1
$pdata$2$HUF_decodeStreamX1 DD imagerel HUF_decodeStreamX1+394
	DD	imagerel HUF_decodeStreamX1+465
	DD	imagerel $chain$2$HUF_decodeStreamX1
$pdata$HUF_readDTableX1_wksp DD imagerel $LN44
	DD	imagerel $LN44+394
	DD	imagerel $unwind$HUF_readDTableX1_wksp
$pdata$BIT_reloadDStream DD imagerel BIT_reloadDStream
	DD	imagerel BIT_reloadDStream+175
	DD	imagerel $unwind$BIT_reloadDStream
$pdata$HUF_decompress4X_usingDTable_bmi2 DD imagerel $LN1390
	DD	imagerel $LN1390+52
	DD	imagerel $unwind$HUF_decompress4X_usingDTable_bmi2
$pdata$HUF_decompress1X1_DCtx_wksp_bmi2 DD imagerel $LN8
	DD	imagerel $LN8+132
	DD	imagerel $unwind$HUF_decompress1X1_DCtx_wksp_bmi2
$pdata$HUF_decompress4X_hufOnly_wksp_bmi2 DD imagerel $LN8
	DD	imagerel $LN8+177
	DD	imagerel $unwind$HUF_decompress4X_hufOnly_wksp_bmi2
$pdata$HUF_decompress1X_usingDTable_bmi2 DD imagerel $LN8
	DD	imagerel $LN8+44
	DD	imagerel $unwind$HUF_decompress1X_usingDTable_bmi2
$pdata$HUF_readDTableX2_wksp DD imagerel $LN69
	DD	imagerel $LN69+195
	DD	imagerel $unwind$HUF_readDTableX2_wksp
$pdata$1$HUF_readDTableX2_wksp DD imagerel $LN69+195
	DD	imagerel $LN69+835
	DD	imagerel $chain$1$HUF_readDTableX2_wksp
$pdata$2$HUF_readDTableX2_wksp DD imagerel $LN69+835
	DD	imagerel $LN69+856
	DD	imagerel $chain$2$HUF_readDTableX2_wksp
xdata	SEGMENT
$unwind$HUF_decompress4X2 DD 062419H
	DD	090b0112H
	DD	060047005H
	DD	030025003H
	DD	imagerel __GSHandlerCheck
	DD	04840H
$unwind$HUF_decompress4X2_DCtx DD 072019H
	DD	0108010eH
	DD	07005e007H
	DD	050036004H
	DD	03002H
	DD	imagerel __GSHandlerCheck
	DD	0830H
$unwind$HUF_decompress4X2_DCtx_wksp DD 010401H
	DD	08204H
$unwind$HUF_decompress4X2_DCtx_wksp_bmi2 DD 0a1a01H
	DD	0b741aH
	DD	0a641aH
	DD	09541aH
	DD	08341aH
	DD	0e016521aH
$unwind$HUF_decompress4X2_usingDTable_internal DD 0d6801H
	DD	022f468H
	DD	023c460H
	DD	02a644dH
	DD	024011dH
	DD	0d00fe011H
	DD	0300c700dH
	DD	0500bH
$unwind$HUF_decompress1X2_usingDTable_internal DD 020a01H
	DD	03006d20aH
$chain$2$HUF_decompress1X2_usingDTable_internal DD 061f21H
	DD	013741fH
	DD	0126412H
	DD	0105408H
	DD	imagerel HUF_decompress1X2_usingDTable_internal
	DD	imagerel HUF_decompress1X2_usingDTable_internal+67
	DD	imagerel $unwind$HUF_decompress1X2_usingDTable_internal
$chain$6$HUF_decompress1X2_usingDTable_internal DD 082221H
	DD	0af422H
	DD	0be416H
	DD	0cd40dH
	DD	0dc405H
	DD	imagerel HUF_decompress1X2_usingDTable_internal+67
	DD	imagerel HUF_decompress1X2_usingDTable_internal+103
	DD	imagerel $chain$2$HUF_decompress1X2_usingDTable_internal
$chain$7$HUF_decompress1X2_usingDTable_internal DD 040021H
	DD	0be400H
	DD	0cd400H
	DD	imagerel HUF_decompress1X2_usingDTable_internal+67
	DD	imagerel HUF_decompress1X2_usingDTable_internal+103
	DD	imagerel $chain$2$HUF_decompress1X2_usingDTable_internal
$chain$8$HUF_decompress1X2_usingDTable_internal DD 020021H
	DD	0be400H
	DD	imagerel HUF_decompress1X2_usingDTable_internal+67
	DD	imagerel HUF_decompress1X2_usingDTable_internal+103
	DD	imagerel $chain$2$HUF_decompress1X2_usingDTable_internal
$chain$9$HUF_decompress1X2_usingDTable_internal DD 021H
	DD	imagerel HUF_decompress1X2_usingDTable_internal
	DD	imagerel HUF_decompress1X2_usingDTable_internal+67
	DD	imagerel $unwind$HUF_decompress1X2_usingDTable_internal
$unwind$HUF_decompress4X2_usingDTable_internal_body DD 0b2601H
	DD	0303426H
	DD	0260126H
	DD	0e018f01aH
	DD	0c014d016H
	DD	060117012H
	DD	05010H
$unwind$HUF_decompress1X2_usingDTable_internal_body DD 020a01H
	DD	03006d20aH
$chain$2$HUF_decompress1X2_usingDTable_internal_body DD 061f21H
	DD	013741fH
	DD	0126412H
	DD	0105408H
	DD	imagerel HUF_decompress1X2_usingDTable_internal_body
	DD	imagerel HUF_decompress1X2_usingDTable_internal_body+67
	DD	imagerel $unwind$HUF_decompress1X2_usingDTable_internal_body
$chain$6$HUF_decompress1X2_usingDTable_internal_body DD 082221H
	DD	0af422H
	DD	0be416H
	DD	0cd40dH
	DD	0dc405H
	DD	imagerel HUF_decompress1X2_usingDTable_internal_body+67
	DD	imagerel HUF_decompress1X2_usingDTable_internal_body+103
	DD	imagerel $chain$2$HUF_decompress1X2_usingDTable_internal_body
$chain$7$HUF_decompress1X2_usingDTable_internal_body DD 040021H
	DD	0be400H
	DD	0cd400H
	DD	imagerel HUF_decompress1X2_usingDTable_internal_body+67
	DD	imagerel HUF_decompress1X2_usingDTable_internal_body+103
	DD	imagerel $chain$2$HUF_decompress1X2_usingDTable_internal_body
$chain$8$HUF_decompress1X2_usingDTable_internal_body DD 020021H
	DD	0be400H
	DD	imagerel HUF_decompress1X2_usingDTable_internal_body+67
	DD	imagerel HUF_decompress1X2_usingDTable_internal_body+103
	DD	imagerel $chain$2$HUF_decompress1X2_usingDTable_internal_body
$chain$9$HUF_decompress1X2_usingDTable_internal_body DD 021H
	DD	imagerel HUF_decompress1X2_usingDTable_internal_body
	DD	imagerel HUF_decompress1X2_usingDTable_internal_body+67
	DD	imagerel $unwind$HUF_decompress1X2_usingDTable_internal_body
$unwind$HUF_decodeStreamX2 DD 030601H
	DD	0c004e006H
	DD	05002H
$chain$3$HUF_decodeStreamX2 DD 082121H
	DD	067421H
	DD	07f415H
	DD	05640dH
	DD	043405H
	DD	imagerel HUF_decodeStreamX2
	DD	imagerel HUF_decodeStreamX2+19
	DD	imagerel $unwind$HUF_decodeStreamX2
$chain$4$HUF_decodeStreamX2 DD 040021H
	DD	07f400H
	DD	056400H
	DD	imagerel HUF_decodeStreamX2
	DD	imagerel HUF_decodeStreamX2+19
	DD	imagerel $unwind$HUF_decodeStreamX2
$chain$5$HUF_decodeStreamX2 DD 021H
	DD	imagerel HUF_decodeStreamX2
	DD	imagerel HUF_decodeStreamX2+19
	DD	imagerel $unwind$HUF_decodeStreamX2
$unwind$HUF_decodeSymbolX2 DD 020501H
	DD	013405H
$unwind$HUF_fillDTableX2 DD 041d19H
	DD	01f010fH
	DD	050027003H
	DD	imagerel __GSHandlerCheck
	DD	0c0H
$chain$5$HUF_fillDTableX2 DD 0c3c21H
	DD	01af43cH
	DD	01be434H
	DD	01cd420H
	DD	01dc418H
	DD	01e6410H
	DD	0253408H
	DD	imagerel HUF_fillDTableX2
	DD	imagerel HUF_fillDTableX2+133
	DD	imagerel $unwind$HUF_fillDTableX2
$chain$6$HUF_fillDTableX2 DD 021H
	DD	imagerel HUF_fillDTableX2
	DD	imagerel HUF_fillDTableX2+133
	DD	imagerel $unwind$HUF_fillDTableX2
$unwind$HUF_fillDTableX2Level2 DD 051919H
	DD	0f006a20aH
	DD	060037004H
	DD	05002H
	DD	imagerel __GSHandlerCheck
	DD	040H
$chain$2$HUF_fillDTableX2Level2 DD 061e21H
	DD	0ae41eH
	DD	012c413H
	DD	0113408H
	DD	imagerel HUF_fillDTableX2Level2
	DD	imagerel HUF_fillDTableX2Level2+145
	DD	imagerel $unwind$HUF_fillDTableX2Level2
$chain$3$HUF_fillDTableX2Level2 DD 021H
	DD	imagerel HUF_fillDTableX2Level2
	DD	imagerel HUF_fillDTableX2Level2+145
	DD	imagerel $unwind$HUF_fillDTableX2Level2
$unwind$HUF_decompress4X1 DD 062419H
	DD	050b0112H
	DD	060047005H
	DD	030025003H
	DD	imagerel __GSHandlerCheck
	DD	02840H
$unwind$HUF_decompress4X1_DCtx DD 072019H
	DD	0108010eH
	DD	07005e007H
	DD	050036004H
	DD	03002H
	DD	imagerel __GSHandlerCheck
	DD	0830H
$unwind$HUF_decompress4X1_DCtx_wksp DD 0a1a01H
	DD	0b741aH
	DD	0a641aH
	DD	09541aH
	DD	08341aH
	DD	0e016521aH
$unwind$HUF_decompress4X1_DCtx_wksp_bmi2 DD 0a1a01H
	DD	0b741aH
	DD	0a641aH
	DD	09541aH
	DD	08341aH
	DD	0e016521aH
$unwind$HUF_decompress4X1_usingDTable_internal DD 0d6b01H
	DD	024f46bH
	DD	025d463H
	DD	02c644dH
	DD	026011dH
	DD	0c00fe011H
	DD	0300c700dH
	DD	0500bH
$unwind$HUF_decompress1X1_usingDTable_internal DD 050f01H
	DD	0f00bc20fH
	DD	05007e009H
	DD	03006H
$chain$1$HUF_decompress1X1_usingDTable_internal DD 041221H
	DD	0c7412H
	DD	0146408H
	DD	imagerel HUF_decompress1X1_usingDTable_internal
	DD	imagerel HUF_decompress1X1_usingDTable_internal+96
	DD	imagerel $unwind$HUF_decompress1X1_usingDTable_internal
$chain$3$HUF_decompress1X1_usingDTable_internal DD 040f21H
	DD	0ad40fH
	DD	0bc405H
	DD	imagerel HUF_decompress1X1_usingDTable_internal+96
	DD	imagerel HUF_decompress1X1_usingDTable_internal+119
	DD	imagerel $chain$1$HUF_decompress1X1_usingDTable_internal
$chain$4$HUF_decompress1X1_usingDTable_internal DD 021H
	DD	imagerel HUF_decompress1X1_usingDTable_internal+96
	DD	imagerel HUF_decompress1X1_usingDTable_internal+119
	DD	imagerel $chain$1$HUF_decompress1X1_usingDTable_internal
$chain$5$HUF_decompress1X1_usingDTable_internal DD 021H
	DD	imagerel HUF_decompress1X1_usingDTable_internal
	DD	imagerel HUF_decompress1X1_usingDTable_internal+96
	DD	imagerel $unwind$HUF_decompress1X1_usingDTable_internal
$unwind$HUF_decompress4X1_usingDTable_internal_body DD 0b2601H
	DD	0303426H
	DD	0260126H
	DD	0e018f01aH
	DD	0c014d016H
	DD	060117012H
	DD	05010H
$unwind$HUF_decompress1X1_usingDTable_internal_body DD 050f01H
	DD	0f00bc20fH
	DD	05007e009H
	DD	03006H
$chain$1$HUF_decompress1X1_usingDTable_internal_body DD 041221H
	DD	0c7412H
	DD	0146408H
	DD	imagerel HUF_decompress1X1_usingDTable_internal_body
	DD	imagerel HUF_decompress1X1_usingDTable_internal_body+99
	DD	imagerel $unwind$HUF_decompress1X1_usingDTable_internal_body
$chain$3$HUF_decompress1X1_usingDTable_internal_body DD 040f21H
	DD	0ad40fH
	DD	0bc405H
	DD	imagerel HUF_decompress1X1_usingDTable_internal_body+99
	DD	imagerel HUF_decompress1X1_usingDTable_internal_body+122
	DD	imagerel $chain$1$HUF_decompress1X1_usingDTable_internal_body
$chain$4$HUF_decompress1X1_usingDTable_internal_body DD 021H
	DD	imagerel HUF_decompress1X1_usingDTable_internal_body+99
	DD	imagerel HUF_decompress1X1_usingDTable_internal_body+122
	DD	imagerel $chain$1$HUF_decompress1X1_usingDTable_internal_body
$chain$5$HUF_decompress1X1_usingDTable_internal_body DD 021H
	DD	imagerel HUF_decompress1X1_usingDTable_internal_body
	DD	imagerel HUF_decompress1X1_usingDTable_internal_body+99
	DD	imagerel $unwind$HUF_decompress1X1_usingDTable_internal_body
$unwind$HUF_decodeStreamX1 DD 070f01H
	DD	07540fH
	DD	06340fH
	DD	0c00de00fH
	DD	0600bH
$chain$1$HUF_decodeStreamX1 DD 041121H
	DD	047411H
	DD	05f405H
	DD	imagerel HUF_decodeStreamX1
	DD	imagerel HUF_decodeStreamX1+22
	DD	imagerel $unwind$HUF_decodeStreamX1
$chain$2$HUF_decodeStreamX1 DD 021H
	DD	imagerel HUF_decodeStreamX1
	DD	imagerel HUF_decodeStreamX1+22
	DD	imagerel $unwind$HUF_decodeStreamX1
$unwind$HUF_readDTableX1_wksp DD 081201H
	DD	0f3412H
	DD	0f00e7212H
	DD	0700ae00cH
	DD	050086009H
$unwind$BIT_reloadDStream DD 036601H
	DD	03466H
	DD	0204H
$unwind$HUF_decompress4X_usingDTable_bmi2 DD 010401H
	DD	06204H
$unwind$HUF_decompress1X1_DCtx_wksp_bmi2 DD 0a1a01H
	DD	0b741aH
	DD	0a641aH
	DD	09541aH
	DD	08341aH
	DD	0e016521aH
$unwind$HUF_decompress4X_hufOnly_wksp_bmi2 DD 060f01H
	DD	0b640fH
	DD	0a340fH
	DD	0700b720fH
$unwind$HUF_decompress1X_usingDTable_bmi2 DD 010401H
	DD	06204H
$unwind$HUF_readDTableX2_wksp DD 071401H
	DD	0f010c214H
	DD	0d00ce00eH
	DD	06009700aH
	DD	03008H
$chain$1$HUF_readDTableX2_wksp DD 040d21H
	DD	0cc40dH
	DD	0155408H
	DD	imagerel $LN69
	DD	imagerel $LN69+195
	DD	imagerel $unwind$HUF_readDTableX2_wksp
$chain$2$HUF_readDTableX2_wksp DD 021H
	DD	imagerel $LN69
	DD	imagerel $LN69+195
	DD	imagerel $unwind$HUF_readDTableX2_wksp
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\error_private.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
_TEXT	SEGMENT
maxTableLog$1$ = 64
nbSymbols$ = 68
dt$1$ = 72
iSize$1$ = 80
DTable$ = 160
src$ = 168
srcSize$ = 176
dtd$ = 184
workSpace$ = 184
tableLog$ = 192
wkspSize$ = 192
HUF_readDTableX2_wksp PROC

; 554  : {

$LN69:
	mov	r11, rsp
	mov	QWORD PTR [r11+8], rcx
	push	rbx
	push	rsi
	push	rdi
	push	r13
	push	r14
	push	r15
	sub	rsp, 104				; 00000068H

; 555  :     U32 tableLog, maxW, sizeOfSort, nbSymbols;
; 556  :     DTableDesc dtd = HUF_getDTableDesc(DTable);
; 557  :     U32 const maxTableLog = dtd.maxTableLog;
; 558  :     size_t iSize;
; 559  :     void* dtPtr = DTable+1;   /* force compiler to avoid strict-aliasing */
; 560  :     HUF_DEltX2* const dt = (HUF_DEltX2*)dtPtr;
; 561  :     U32 *rankStart;
; 562  : 
; 563  :     rankValCol_t* rankVal;
; 564  :     U32* rankStats;
; 565  :     U32* rankStart0;
; 566  :     sortedSymbol_t* sortedSymbol;
; 567  :     BYTE* weightList;
; 568  :     size_t spaceUsed32 = 0;
; 569  : 
; 570  :     rankVal = (rankValCol_t *)((U32 *)workSpace + spaceUsed32);
; 571  :     spaceUsed32 += (sizeof(rankValCol_t) * HUF_TABLELOG_MAX) >> 2;
; 572  :     rankStats = (U32 *)workSpace + spaceUsed32;
; 573  :     spaceUsed32 += HUF_TABLELOG_MAX + 1;
; 574  :     rankStart0 = (U32 *)workSpace + spaceUsed32;
; 575  :     spaceUsed32 += HUF_TABLELOG_MAX + 2;
; 576  :     sortedSymbol = (sortedSymbol_t *)workSpace + (spaceUsed32 * sizeof(U32)) / sizeof(sortedSymbol_t);
; 577  :     spaceUsed32 += HUF_ALIGN(sizeof(sortedSymbol_t) * (HUF_SYMBOLVALUE_MAX + 1), sizeof(U32)) >> 2;
; 578  :     weightList = (BYTE *)((U32 *)workSpace + spaceUsed32);
; 579  :     spaceUsed32 += HUF_ALIGN(HUF_SYMBOLVALUE_MAX + 1, sizeof(U32)) >> 2;
; 580  : 
; 581  :     if ((spaceUsed32 << 2) > wkspSize) return ERROR(tableLog_tooLarge);

	cmp	QWORD PTR wkspSize$[rsp], 1500		; 000005dcH
	lea	rdi, QWORD PTR [r9+624]
	mov	eax, DWORD PTR [rcx]
	lea	r14, QWORD PTR [r9+1244]
	movzx	ebx, al
	mov	rsi, r9
	mov	DWORD PTR [r11+32], eax
	lea	rax, QWORD PTR [rcx+4]
	mov	QWORD PTR dt$1$[rsp], rax
	mov	DWORD PTR maxTableLog$1$[rsp], ebx
	jb	$LN66@HUF_readDT

; 582  : 
; 583  :     rankStart = rankStart0 + 1;

	xorps	xmm0, xmm0
	lea	r15, QWORD PTR [r9+680]

; 584  :     memset(rankStats, 0, sizeof(U32) * (2 * HUF_TABLELOG_MAX + 2 + 1));

	movups	XMMWORD PTR [rdi], xmm0
	xor	eax, eax
	movups	XMMWORD PTR [rdi+16], xmm0
	movups	XMMWORD PTR [rdi+32], xmm0
	movups	XMMWORD PTR [rdi+48], xmm0
	movups	XMMWORD PTR [rdi+64], xmm0
	movups	XMMWORD PTR [rdi+80], xmm0
	mov	QWORD PTR [rdi+96], rax
	mov	DWORD PTR [rdi+104], eax

; 585  : 
; 586  :     DEBUG_STATIC_ASSERT(sizeof(HUF_DEltX2) == sizeof(HUF_DTable));   /* if compiler fails here, assertion is wrong */
; 587  :     if (maxTableLog > HUF_TABLELOG_MAX) return ERROR(tableLog_tooLarge);

	cmp	ebx, 12
	ja	$LN66@HUF_readDT

; 588  :     /* memset(weightList, 0, sizeof(weightList)); */  /* is not necessary, even though some analyzer complain ... */
; 589  : 
; 590  :     iSize = HUF_readStats(weightList, HUF_SYMBOLVALUE_MAX + 1, rankStats, &nbSymbols, &tableLog, src, srcSize);

	mov	QWORD PTR [r11-104], r8
	lea	rax, QWORD PTR [r11+40]
	mov	QWORD PTR [r11-112], rdx
	lea	r9, QWORD PTR [r11-84]
	mov	r8, rdi
	mov	QWORD PTR [r11-120], rax
	mov	rcx, r14
	call	HUF_readStats
	mov	QWORD PTR iSize$1$[rsp], rax
; File E:\dev\pyzstd\lib\common\error_private.h

; 56   : ERR_STATIC unsigned ERR_isError(size_t code) { return (code > ERROR(maxCode)); }

	cmp	rax, -120				; ffffffffffffff88H
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 591  :     if (HUF_isError(iSize)) return iSize;

	ja	$LN1@HUF_readDT

; 592  : 
; 593  :     /* check result */
; 594  :     if (tableLog > maxTableLog) return ERROR(tableLog_tooLarge);   /* DTable can't fit code depth */

	mov	eax, DWORD PTR tableLog$[rsp]
	cmp	eax, ebx
	ja	$LN66@HUF_readDT

; 595  : 
; 596  :     /* find maxWeight */
; 597  :     for (maxW = tableLog; rankStats[maxW]==0; maxW--) {}  /* necessarily finds a solution before 0 */

	cmp	DWORD PTR [rdi+rax*4], 0
	mov	ebx, eax
	mov	QWORD PTR [rsp+168], rbp
	mov	QWORD PTR [rsp+96], r12
	jne	SHORT $LN3@HUF_readDT
$LL4@HUF_readDT:
	dec	ebx
	cmp	DWORD PTR [rdi+rbx*4], 0
	je	SHORT $LL4@HUF_readDT
$LN3@HUF_readDT:

; 598  : 
; 599  :     /* Get start index of each weight */
; 600  :     {   U32 w, nextRankStart = 0;

	xor	r10d, r10d

; 601  :         for (w=1; w<maxW+1; w++) {

	lea	ebp, DWORD PTR [rbx+1]
	mov	r12d, r10d
	cmp	ebp, 1
	jbe	SHORT $LN6@HUF_readDT
	mov	r8, rdi
	mov	edx, ebx
	sub	r8, r15
	lea	rcx, QWORD PTR [r15+4]
	npad	12
$LL41@HUF_readDT:

; 602  :             U32 current = nextRankStart;

	mov	eax, r12d

; 603  :             nextRankStart += rankStats[w];

	add	r12d, DWORD PTR [r8+rcx]

; 604  :             rankStart[w] = current;

	mov	DWORD PTR [rcx], eax
	lea	rcx, QWORD PTR [rcx+4]
	sub	rdx, 1
	jne	SHORT $LL41@HUF_readDT
$LN6@HUF_readDT:

; 605  :         }
; 606  :         rankStart[0] = nextRankStart;   /* put all 0w symbols at the end of sorted list*/
; 607  :         sizeOfSort = nextRankStart;
; 608  :     }
; 609  : 
; 610  :     /* sort symbols by weight */
; 611  :     {   U32 s;
; 612  :         for (s=0; s<nbSymbols; s++) {

	mov	r9d, DWORD PTR nbSymbols$[rsp]
	mov	r8d, r10d
	mov	DWORD PTR [r15], r12d
	test	r9d, r9d
	je	SHORT $LN9@HUF_readDT
	npad	13
$LL10@HUF_readDT:

; 613  :             U32 const w = weightList[s];

	movzx	edx, BYTE PTR [r14]
	lea	r14, QWORD PTR [r14+1]

; 614  :             U32 const r = rankStart[w]++;

	mov	ecx, DWORD PTR [r15+rdx*4]
	lea	eax, DWORD PTR [rcx+1]
	mov	DWORD PTR [r15+rdx*4], eax

; 615  :             sortedSymbol[r].symbol = (BYTE)s;

	mov	BYTE PTR [rsi+rcx*2+732], r8b
	inc	r8d

; 616  :             sortedSymbol[r].weight = (BYTE)w;

	mov	BYTE PTR [rsi+rcx*2+733], dl
	cmp	r8d, r9d
	jb	SHORT $LL10@HUF_readDT
$LN9@HUF_readDT:

; 617  :         }
; 618  :         rankStart[0] = 0;   /* forget 0w symbols; this is beginning of weight(1) */
; 619  :     }
; 620  : 
; 621  :     /* Build rankVal */
; 622  :     {   U32* const rankVal0 = rankVal[0];
; 623  :         {   int const rescale = (maxTableLog-tableLog) - 1;   /* tableLog <= maxTableLog */
; 624  :             U32 nextRankVal = 0;
; 625  :             U32 w;
; 626  :             for (w=1; w<maxW+1; w++) {

	mov	r14d, DWORD PTR tableLog$[rsp]
	mov	r8d, 1
	mov	DWORD PTR [r15], r10d
	mov	r15d, DWORD PTR maxTableLog$1$[rsp]
	cmp	ebp, r8d
	jbe	SHORT $LN12@HUF_readDT
	sub	rdi, rsi
	lea	r9, QWORD PTR [rsi+4]
	mov	r11d, r15d
	sub	r11d, r14d
	npad	14
$LL43@HUF_readDT:

; 627  :                 U32 current = nextRankVal;
; 628  :                 nextRankVal += rankStats[w] << (w+rescale);

	mov	eax, DWORD PTR [rdi+r9]
	lea	ecx, DWORD PTR [r11-1]
	add	ecx, r8d
	lea	r9, QWORD PTR [r9+4]
	shl	eax, cl
	mov	edx, r10d
	add	r10d, eax

; 629  :                 rankVal0[w] = current;

	mov	DWORD PTR [r9-4], edx
	inc	r8d
	cmp	r8d, ebp
	jb	SHORT $LL43@HUF_readDT
$LN12@HUF_readDT:

; 630  :         }   }
; 631  :         {   U32 const minBits = tableLog+1 - maxW;

	mov	r10d, r14d

; 632  :             U32 consumed;
; 633  :             for (consumed = minBits; consumed < maxTableLog - minBits + 1; consumed++) {

	mov	r14d, r15d
	sub	r10d, ebx
	inc	r10d
	sub	r14d, r10d
	inc	r14d
	cmp	r10d, r14d
	jae	$LN15@HUF_readDT
	mov	eax, r10d
	imul	r11, rax, 52				; 00000034H
	add	r11, rsi
	imul	rdi, rax, -52				; ffffffffffffffccH
	npad	4
$LL16@HUF_readDT:

; 634  :                 U32* const rankValPtr = rankVal[consumed];

	mov	edx, 1
	movd	xmm1, r10d

; 635  :                 U32 w;
; 636  :                 for (w = 1; w < maxW+1; w++) {

	cmp	ebp, edx
	jbe	$LN14@HUF_readDT
	cmp	ebx, 16
	jb	$LN65@HUF_readDT

; 634  :                 U32* const rankValPtr = rankVal[consumed];

	mov	eax, ebx
	lea	r9, QWORD PTR [rsi+4]
	lea	rcx, QWORD PTR [rsi+rax*4]
	lea	r8, QWORD PTR [r11+rax*4]
	lea	rax, QWORD PTR [r11+4]
	cmp	rax, rcx
	ja	SHORT $LN47@HUF_readDT
	cmp	r8, r9
	jae	SHORT $LN65@HUF_readDT
$LN47@HUF_readDT:
	mov	eax, ebx
	mov	r8d, ebp
	and	eax, 15
	sub	r8d, eax
	mov	r9d, 9
	npad	8
$LL19@HUF_readDT:

; 637  :                     rankValPtr[w] = rankVal0[w] >> consumed;

	mov	eax, edx
	add	edx, 16
	movdqu	xmm0, XMMWORD PTR [rsi+rax*4]
	psrld	xmm0, xmm1
	movdqu	XMMWORD PTR [r11+rax*4], xmm0
	lea	eax, DWORD PTR [r9-4]
	movdqu	xmm0, XMMWORD PTR [rsi+rax*4]
	psrld	xmm0, xmm1
	movdqu	XMMWORD PTR [r11+rax*4], xmm0
	mov	eax, r9d
	movdqu	xmm0, XMMWORD PTR [rsi+rax*4]
	psrld	xmm0, xmm1
	movdqu	XMMWORD PTR [r11+rax*4], xmm0
	lea	eax, DWORD PTR [r9+4]
	add	r9d, 16
	movdqu	xmm0, XMMWORD PTR [rsi+rax*4]
	psrld	xmm0, xmm1
	movdqu	XMMWORD PTR [r11+rax*4], xmm0
	cmp	edx, r8d
	jb	SHORT $LL19@HUF_readDT

; 635  :                 U32 w;
; 636  :                 for (w = 1; w < maxW+1; w++) {

	cmp	edx, ebp
	jae	SHORT $LN14@HUF_readDT
$LN65@HUF_readDT:
	mov	eax, edx
	mov	r8d, ebp
	sub	r8d, edx
	lea	rax, QWORD PTR [r11+rax*4]
	npad	11
$LL45@HUF_readDT:

; 637  :                     rankValPtr[w] = rankVal0[w] >> consumed;

	mov	edx, DWORD PTR [rdi+rax]
	lea	rax, QWORD PTR [rax+4]
	mov	ecx, r10d
	shr	edx, cl
	mov	DWORD PTR [rax-4], edx
	sub	r8, 1
	jne	SHORT $LL45@HUF_readDT
$LN14@HUF_readDT:

; 632  :             U32 consumed;
; 633  :             for (consumed = minBits; consumed < maxTableLog - minBits + 1; consumed++) {

	inc	r10d
	add	r11, 52					; 00000034H
	sub	rdi, 52					; 00000034H
	cmp	r10d, r14d
	jb	$LL16@HUF_readDT
$LN15@HUF_readDT:

; 638  :     }   }   }   }
; 639  : 
; 640  :     HUF_fillDTableX2(dt, maxTableLog,

	mov	eax, DWORD PTR tableLog$[rsp]
	lea	r8, QWORD PTR [rsi+732]
	mov	rcx, QWORD PTR dt$1$[rsp]
	inc	eax
	mov	DWORD PTR [rsp+56], eax
	mov	r9d, r12d
	mov	DWORD PTR [rsp+48], ebx
	lea	rax, QWORD PTR [rsi+676]
	mov	QWORD PTR [rsp+40], rsi
	mov	edx, r15d
	mov	QWORD PTR [rsp+32], rax
	call	HUF_fillDTableX2

; 641  :                    sortedSymbol, sizeOfSort,
; 642  :                    rankStart0, rankVal, maxW,
; 643  :                    tableLog+1);
; 644  : 
; 645  :     dtd.tableLog = (BYTE)maxTableLog;
; 646  :     dtd.tableType = 1;
; 647  :     memcpy(DTable, &dtd, sizeof(dtd));

	mov	rcx, QWORD PTR DTable$[rsp]

; 648  :     return iSize;

	mov	r12, QWORD PTR [rsp+96]
	mov	rbp, QWORD PTR [rsp+168]
	mov	BYTE PTR dtd$[rsp+2], r15b
	mov	BYTE PTR dtd$[rsp+1], 1
	mov	eax, DWORD PTR dtd$[rsp]
	mov	DWORD PTR [rcx], eax
	mov	rax, QWORD PTR iSize$1$[rsp]

; 649  : }

	add	rsp, 104				; 00000068H
	pop	r15
	pop	r14
	pop	r13
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
$LN66@HUF_readDT:

; 592  : 
; 593  :     /* check result */
; 594  :     if (tableLog > maxTableLog) return ERROR(tableLog_tooLarge);   /* DTable can't fit code depth */

	mov	rax, -44				; ffffffffffffffd4H
$LN1@HUF_readDT:

; 649  : }

	add	rsp, 104				; 00000068H
	pop	r15
	pop	r14
	pop	r13
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
HUF_readDTableX2_wksp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
_TEXT	SEGMENT
dst$ = 64
maxDstSize$ = 72
cSrc$ = 80
cSrcSize$ = 88
DTable$ = 96
bmi2$dead$ = 104
HUF_decompress1X_usingDTable_bmi2 PROC

; 1181 : {

$LN8:
	sub	rsp, 56					; 00000038H

; 1182 :     DTableDesc const dtd = HUF_getDTableDesc(DTable);

	mov	r10, QWORD PTR DTable$[rsp]

; 1183 : #if defined(HUF_FORCE_DECOMPRESS_X1)
; 1184 :     (void)dtd;
; 1185 :     assert(dtd.tableType == 0);
; 1186 :     return HUF_decompress1X1_usingDTable_internal(dst, maxDstSize, cSrc, cSrcSize, DTable, bmi2);
; 1187 : #elif defined(HUF_FORCE_DECOMPRESS_X2)
; 1188 :     (void)dtd;
; 1189 :     assert(dtd.tableType == 1);
; 1190 :     return HUF_decompress1X2_usingDTable_internal(dst, maxDstSize, cSrc, cSrcSize, DTable, bmi2);
; 1191 : #else
; 1192 :     return dtd.tableType ? HUF_decompress1X2_usingDTable_internal(dst, maxDstSize, cSrc, cSrcSize, DTable, bmi2) :

	mov	QWORD PTR [rsp+32], r10
	mov	eax, DWORD PTR [r10]
	shr	eax, 8
	test	al, al
	je	SHORT $LN3@HUF_decomp
	call	HUF_decompress1X2_usingDTable_internal

; 1193 :                            HUF_decompress1X1_usingDTable_internal(dst, maxDstSize, cSrc, cSrcSize, DTable, bmi2);
; 1194 : #endif
; 1195 : }

	add	rsp, 56					; 00000038H
	ret	0
$LN3@HUF_decomp:

; 1183 : #if defined(HUF_FORCE_DECOMPRESS_X1)
; 1184 :     (void)dtd;
; 1185 :     assert(dtd.tableType == 0);
; 1186 :     return HUF_decompress1X1_usingDTable_internal(dst, maxDstSize, cSrc, cSrcSize, DTable, bmi2);
; 1187 : #elif defined(HUF_FORCE_DECOMPRESS_X2)
; 1188 :     (void)dtd;
; 1189 :     assert(dtd.tableType == 1);
; 1190 :     return HUF_decompress1X2_usingDTable_internal(dst, maxDstSize, cSrc, cSrcSize, DTable, bmi2);
; 1191 : #else
; 1192 :     return dtd.tableType ? HUF_decompress1X2_usingDTable_internal(dst, maxDstSize, cSrc, cSrcSize, DTable, bmi2) :

	call	HUF_decompress1X1_usingDTable_internal

; 1193 :                            HUF_decompress1X1_usingDTable_internal(dst, maxDstSize, cSrc, cSrcSize, DTable, bmi2);
; 1194 : #endif
; 1195 : }

	add	rsp, 56					; 00000038H
	ret	0
HUF_decompress1X_usingDTable_bmi2 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
_TEXT	SEGMENT
dctx$ = 80
dst$ = 88
dstSize$ = 96
cSrc$ = 104
cSrcSize$ = 112
workSpace$ = 120
wkspSize$dead$ = 128
bmi2$ = 136
HUF_decompress4X_hufOnly_wksp_bmi2 PROC

; 1229 : {

$LN8:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rbx, r9
	mov	r11, r8
	mov	rdi, rdx
	mov	rsi, rcx

; 1230 :     /* validation checks */
; 1231 :     if (dstSize == 0) return ERROR(dstSize_tooSmall);

	test	r8, r8
	jne	SHORT $LN2@HUF_decomp
	lea	rax, QWORD PTR [r8-70]

; 1245 :                         HUF_decompress4X1_DCtx_wksp_bmi2(dctx, dst, dstSize, cSrc, cSrcSize, workSpace, wkspSize, bmi2);
; 1246 : #endif
; 1247 :     }
; 1248 : }

	mov	rbx, QWORD PTR [rsp+80]
	mov	rsi, QWORD PTR [rsp+88]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
$LN2@HUF_decomp:

; 1232 :     if (cSrcSize == 0) return ERROR(corruption_detected);

	mov	r10, QWORD PTR cSrcSize$[rsp]
	test	r10, r10
	jne	SHORT $LN3@HUF_decomp
	lea	rax, QWORD PTR [r10-20]

; 1245 :                         HUF_decompress4X1_DCtx_wksp_bmi2(dctx, dst, dstSize, cSrc, cSrcSize, workSpace, wkspSize, bmi2);
; 1246 : #endif
; 1247 :     }
; 1248 : }

	mov	rbx, QWORD PTR [rsp+80]
	mov	rsi, QWORD PTR [rsp+88]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
$LN3@HUF_decomp:

; 1233 : 
; 1234 :     {   U32 const algoNb = HUF_selectDecoder(dstSize, cSrcSize);

	mov	rdx, r10
	mov	rcx, r11
	call	HUF_selectDecoder

; 1235 : #if defined(HUF_FORCE_DECOMPRESS_X1)
; 1236 :         (void)algoNb;
; 1237 :         assert(algoNb == 0);
; 1238 :         return HUF_decompress4X1_DCtx_wksp_bmi2(dctx, dst, dstSize, cSrc, cSrcSize, workSpace, wkspSize, bmi2);
; 1239 : #elif defined(HUF_FORCE_DECOMPRESS_X2)
; 1240 :         (void)algoNb;
; 1241 :         assert(algoNb == 1);
; 1242 :         return HUF_decompress4X2_DCtx_wksp_bmi2(dctx, dst, dstSize, cSrc, cSrcSize, workSpace, wkspSize, bmi2);
; 1243 : #else
; 1244 :         return algoNb ? HUF_decompress4X2_DCtx_wksp_bmi2(dctx, dst, dstSize, cSrc, cSrcSize, workSpace, wkspSize, bmi2) :

	test	eax, eax
	mov	r9, rbx
	mov	eax, DWORD PTR bmi2$[rsp]
	mov	r8, r11
	mov	DWORD PTR [rsp+56], eax
	mov	rdx, rdi
	mov	rax, QWORD PTR workSpace$[rsp]
	mov	rcx, rsi
	mov	QWORD PTR [rsp+40], rax
	mov	QWORD PTR [rsp+32], r10
	je	SHORT $LN5@HUF_decomp
	call	HUF_decompress4X2_DCtx_wksp_bmi2

; 1245 :                         HUF_decompress4X1_DCtx_wksp_bmi2(dctx, dst, dstSize, cSrc, cSrcSize, workSpace, wkspSize, bmi2);
; 1246 : #endif
; 1247 :     }
; 1248 : }

	mov	rbx, QWORD PTR [rsp+80]
	mov	rsi, QWORD PTR [rsp+88]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
$LN5@HUF_decomp:

; 1235 : #if defined(HUF_FORCE_DECOMPRESS_X1)
; 1236 :         (void)algoNb;
; 1237 :         assert(algoNb == 0);
; 1238 :         return HUF_decompress4X1_DCtx_wksp_bmi2(dctx, dst, dstSize, cSrc, cSrcSize, workSpace, wkspSize, bmi2);
; 1239 : #elif defined(HUF_FORCE_DECOMPRESS_X2)
; 1240 :         (void)algoNb;
; 1241 :         assert(algoNb == 1);
; 1242 :         return HUF_decompress4X2_DCtx_wksp_bmi2(dctx, dst, dstSize, cSrc, cSrcSize, workSpace, wkspSize, bmi2);
; 1243 : #else
; 1244 :         return algoNb ? HUF_decompress4X2_DCtx_wksp_bmi2(dctx, dst, dstSize, cSrc, cSrcSize, workSpace, wkspSize, bmi2) :

	call	HUF_decompress4X1_DCtx_wksp_bmi2

; 1245 :                         HUF_decompress4X1_DCtx_wksp_bmi2(dctx, dst, dstSize, cSrc, cSrcSize, workSpace, wkspSize, bmi2);
; 1246 : #endif
; 1247 :     }
; 1248 : }

	mov	rbx, QWORD PTR [rsp+80]
	mov	rsi, QWORD PTR [rsp+88]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
HUF_decompress4X_hufOnly_wksp_bmi2 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\error_private.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
_TEXT	SEGMENT
dctx$ = 64
dst$ = 72
dstSize$ = 80
cSrc$ = 88
cSrcSize$ = 96
workSpace$ = 104
wkspSize$dead$ = 112
bmi2$dead$ = 120
HUF_decompress1X1_DCtx_wksp_bmi2 PROC

; 1199 : {

$LN8:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	sub	rsp, 48					; 00000030H

; 1200 :     const BYTE* ip = (const BYTE*) cSrc;
; 1201 : 
; 1202 :     size_t const hSize = HUF_readDTableX1_wksp(dctx, cSrc, cSrcSize, workSpace, wkspSize);

	mov	rbx, QWORD PTR cSrcSize$[rsp]
	mov	rdi, r9
	mov	r9, QWORD PTR workSpace$[rsp]
	mov	rbp, r8
	mov	r14, rdx
	mov	r8, rbx
	mov	rdx, rdi
	mov	rsi, rcx
	call	HUF_readDTableX1_wksp
; File E:\dev\pyzstd\lib\common\error_private.h

; 56   : ERR_STATIC unsigned ERR_isError(size_t code) { return (code > ERROR(maxCode)); }

	cmp	rax, -120				; ffffffffffffff88H
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 1203 :     if (HUF_isError(hSize)) return hSize;

	ja	SHORT $LN1@HUF_decomp

; 1204 :     if (hSize >= cSrcSize) return ERROR(srcSize_wrong);

	cmp	rax, rbx
	jb	SHORT $LN3@HUF_decomp
	mov	rax, -72				; ffffffffffffffb8H
	jmp	SHORT $LN1@HUF_decomp
$LN3@HUF_decomp:

; 1205 :     ip += hSize; cSrcSize -= hSize;

	sub	rbx, rax

; 1206 : 
; 1207 :     return HUF_decompress1X1_usingDTable_internal(dst, dstSize, ip, cSrcSize, dctx, bmi2);

	mov	QWORD PTR [rsp+32], rsi
	mov	r9, rbx
	lea	r8, QWORD PTR [rax+rdi]
	mov	rdx, rbp
	mov	rcx, r14
	call	HUF_decompress1X1_usingDTable_internal
$LN1@HUF_decomp:

; 1208 : }

	mov	rbx, QWORD PTR [rsp+64]
	mov	rbp, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	mov	rdi, QWORD PTR [rsp+88]
	add	rsp, 48					; 00000030H
	pop	r14
	ret	0
HUF_decompress1X1_DCtx_wksp_bmi2 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
_TEXT	SEGMENT
dst$ = 64
maxDstSize$ = 72
cSrc$ = 80
cSrcSize$ = 88
DTable$ = 96
bmi2$ = 104
HUF_decompress4X_usingDTable_bmi2 PROC

; 1212 : {

$LN1390:
	sub	rsp, 56					; 00000038H

; 1213 :     DTableDesc const dtd = HUF_getDTableDesc(DTable);

	mov	r10, QWORD PTR DTable$[rsp]
	mov	eax, DWORD PTR [r10]
	shr	eax, 8
	test	al, al

; 1214 : #if defined(HUF_FORCE_DECOMPRESS_X1)
; 1215 :     (void)dtd;
; 1216 :     assert(dtd.tableType == 0);
; 1217 :     return HUF_decompress4X1_usingDTable_internal(dst, maxDstSize, cSrc, cSrcSize, DTable, bmi2);
; 1218 : #elif defined(HUF_FORCE_DECOMPRESS_X2)
; 1219 :     (void)dtd;
; 1220 :     assert(dtd.tableType == 1);
; 1221 :     return HUF_decompress4X2_usingDTable_internal(dst, maxDstSize, cSrc, cSrcSize, DTable, bmi2);
; 1222 : #else
; 1223 :     return dtd.tableType ? HUF_decompress4X2_usingDTable_internal(dst, maxDstSize, cSrc, cSrcSize, DTable, bmi2) :

	mov	eax, DWORD PTR bmi2$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	QWORD PTR [rsp+32], r10
	je	SHORT $LN3@HUF_decomp
	call	HUF_decompress4X2_usingDTable_internal

; 1224 :                            HUF_decompress4X1_usingDTable_internal(dst, maxDstSize, cSrc, cSrcSize, DTable, bmi2);
; 1225 : #endif
; 1226 : }

	add	rsp, 56					; 00000038H
	ret	0
$LN3@HUF_decomp:

; 1214 : #if defined(HUF_FORCE_DECOMPRESS_X1)
; 1215 :     (void)dtd;
; 1216 :     assert(dtd.tableType == 0);
; 1217 :     return HUF_decompress4X1_usingDTable_internal(dst, maxDstSize, cSrc, cSrcSize, DTable, bmi2);
; 1218 : #elif defined(HUF_FORCE_DECOMPRESS_X2)
; 1219 :     (void)dtd;
; 1220 :     assert(dtd.tableType == 1);
; 1221 :     return HUF_decompress4X2_usingDTable_internal(dst, maxDstSize, cSrc, cSrcSize, DTable, bmi2);
; 1222 : #else
; 1223 :     return dtd.tableType ? HUF_decompress4X2_usingDTable_internal(dst, maxDstSize, cSrc, cSrcSize, DTable, bmi2) :

	call	HUF_decompress4X1_usingDTable_internal

; 1224 :                            HUF_decompress4X1_usingDTable_internal(dst, maxDstSize, cSrc, cSrcSize, DTable, bmi2);
; 1225 : #endif
; 1226 : }

	add	rsp, 56					; 00000038H
	ret	0
HUF_decompress4X_usingDTable_bmi2 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\common\mem.h
_TEXT	SEGMENT
MEM_32bits PROC

; 183  : MEM_STATIC unsigned MEM_32bits(void) { return sizeof(size_t)==4; }

	xor	eax, eax
	ret	0
MEM_32bits ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\common\mem.h
_TEXT	SEGMENT
MEM_64bits PROC

; 184  : MEM_STATIC unsigned MEM_64bits(void) { return sizeof(size_t)==8; }

	mov	eax, 1
	ret	0
MEM_64bits ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\common\mem.h
_TEXT	SEGMENT
MEM_isLittleEndian PROC

; 188  :     const union { U32 u; BYTE c[4]; } one = { 1 };   /* don't use static : performance detrimental  */
; 189  :     return one.c[0];

	mov	eax, 1

; 190  : }

	ret	0
MEM_isLittleEndian ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\common\mem.h
_TEXT	SEGMENT
memPtr$ = 8
MEM_read16 PROC

; 239  :     U16 val; memcpy(&val, memPtr, sizeof(val)); return val;

	movzx	eax, WORD PTR [rcx]

; 240  : }

	ret	0
MEM_read16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\common\mem.h
_TEXT	SEGMENT
memPtr$ = 8
MEM_read32 PROC

; 244  :     U32 val; memcpy(&val, memPtr, sizeof(val)); return val;

	mov	eax, DWORD PTR [rcx]

; 245  : }

	ret	0
MEM_read32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\common\mem.h
_TEXT	SEGMENT
memPtr$ = 8
MEM_read64 PROC

; 249  :     U64 val; memcpy(&val, memPtr, sizeof(val)); return val;

	mov	rax, QWORD PTR [rcx]

; 250  : }

	ret	0
MEM_read64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\common\mem.h
_TEXT	SEGMENT
memPtr$ = 8
value$ = 16
MEM_write16 PROC

; 259  :     memcpy(memPtr, &value, sizeof(value));

	mov	WORD PTR [rcx], dx

; 260  : }

	ret	0
MEM_write16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\common\mem.h
_TEXT	SEGMENT
in$ = 8
MEM_swap32 PROC

; 276  : #if defined(_MSC_VER)     /* Visual Studio */
; 277  :     return _byteswap_ulong(in);

	bswap	ecx
	mov	eax, ecx

; 278  : #elif (defined (__GNUC__) && (__GNUC__ * 100 + __GNUC_MINOR__ >= 403)) \
; 279  :   || (defined(__clang__) && __has_builtin(__builtin_bswap32))
; 280  :     return __builtin_bswap32(in);
; 281  : #else
; 282  :     return  ((in << 24) & 0xff000000 ) |
; 283  :             ((in <<  8) & 0x00ff0000 ) |
; 284  :             ((in >>  8) & 0x0000ff00 ) |
; 285  :             ((in >> 24) & 0x000000ff );
; 286  : #endif
; 287  : }

	ret	0
MEM_swap32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\common\mem.h
_TEXT	SEGMENT
in$ = 8
MEM_swap64 PROC

; 291  : #if defined(_MSC_VER)     /* Visual Studio */
; 292  :     return _byteswap_uint64(in);

	bswap	rcx
	mov	rax, rcx

; 293  : #elif (defined (__GNUC__) && (__GNUC__ * 100 + __GNUC_MINOR__ >= 403)) \
; 294  :   || (defined(__clang__) && __has_builtin(__builtin_bswap64))
; 295  :     return __builtin_bswap64(in);
; 296  : #else
; 297  :     return  ((in << 56) & 0xff00000000000000ULL) |
; 298  :             ((in << 40) & 0x00ff000000000000ULL) |
; 299  :             ((in << 24) & 0x0000ff0000000000ULL) |
; 300  :             ((in << 8)  & 0x000000ff00000000ULL) |
; 301  :             ((in >> 8)  & 0x00000000ff000000ULL) |
; 302  :             ((in >> 24) & 0x0000000000ff0000ULL) |
; 303  :             ((in >> 40) & 0x000000000000ff00ULL) |
; 304  :             ((in >> 56) & 0x00000000000000ffULL);
; 305  : #endif
; 306  : }

	ret	0
MEM_swap64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\common\mem.h
_TEXT	SEGMENT
memPtr$ = 8
MEM_readLE16 PROC

; 320  :     if (MEM_isLittleEndian())
; 321  :         return MEM_read16(memPtr);

	movzx	eax, WORD PTR [rcx]

; 322  :     else {
; 323  :         const BYTE* p = (const BYTE*)memPtr;
; 324  :         return (U16)(p[0] + (p[1]<<8));
; 325  :     }
; 326  : }

	ret	0
MEM_readLE16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\common\mem.h
_TEXT	SEGMENT
memPtr$ = 8
val$ = 16
MEM_writeLE16 PROC

; 330  :     if (MEM_isLittleEndian()) {
; 331  :         MEM_write16(memPtr, val);

	mov	WORD PTR [rcx], dx

; 332  :     } else {
; 333  :         BYTE* p = (BYTE*)memPtr;
; 334  :         p[0] = (BYTE)val;
; 335  :         p[1] = (BYTE)(val>>8);
; 336  :     }
; 337  : }

	ret	0
MEM_writeLE16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\common\mem.h
_TEXT	SEGMENT
memPtr$ = 8
MEM_readLE32 PROC

; 352  :     if (MEM_isLittleEndian())
; 353  :         return MEM_read32(memPtr);

	mov	eax, DWORD PTR [rcx]

; 354  :     else
; 355  :         return MEM_swap32(MEM_read32(memPtr));
; 356  : }

	ret	0
MEM_readLE32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\common\mem.h
_TEXT	SEGMENT
memPtr$ = 8
MEM_readLE64 PROC

; 368  :     if (MEM_isLittleEndian())
; 369  :         return MEM_read64(memPtr);

	mov	rax, QWORD PTR [rcx]

; 370  :     else
; 371  :         return MEM_swap64(MEM_read64(memPtr));
; 372  : }

	ret	0
MEM_readLE64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\common\mem.h
_TEXT	SEGMENT
memPtr$ = 8
MEM_readLEST PROC

; 384  :     if (MEM_32bits())
; 385  :         return (size_t)MEM_readLE32(memPtr);
; 386  :     else
; 387  :         return (size_t)MEM_readLE64(memPtr);

	mov	rax, QWORD PTR [rcx]

; 388  : }

	ret	0
MEM_readLEST ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\common\error_private.h
_TEXT	SEGMENT
code$ = 8
ERR_isError PROC

; 56   : ERR_STATIC unsigned ERR_isError(size_t code) { return (code > ERROR(maxCode)); }

	xor	eax, eax
	cmp	rcx, -120				; ffffffffffffff88H
	seta	al
	ret	0
ERR_isError ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\common\bitstream.h
_TEXT	SEGMENT
val$ = 8
BIT_highbit32 PROC

; 141  :     assert(val != 0);
; 142  :     {
; 143  : #   if defined(_MSC_VER)   /* Visual */
; 144  :         unsigned long r=0;

	xor	eax, eax

; 145  :         return _BitScanReverse ( &r, val ) ? (unsigned)r : 0;

	bsr	edx, ecx
	cmovne	eax, edx

; 146  : #   elif defined(__GNUC__) && (__GNUC__ >= 3)   /* Use GCC Intrinsic */
; 147  :         return __builtin_clz (val) ^ 31;
; 148  : #   elif defined(__ICCARM__)    /* IAR Intrinsic */
; 149  :         return 31 - __CLZ(val);
; 150  : #   else   /* Software version */
; 151  :         static const unsigned DeBruijnClz[32] = { 0,  9,  1, 10, 13, 21,  2, 29,
; 152  :                                                  11, 14, 16, 18, 22, 25,  3, 30,
; 153  :                                                   8, 12, 20, 28, 15, 17, 24,  7,
; 154  :                                                  19, 27, 23,  6, 26,  5,  4, 31 };
; 155  :         U32 v = val;
; 156  :         v |= v >> 1;
; 157  :         v |= v >> 2;
; 158  :         v |= v >> 4;
; 159  :         v |= v >> 8;
; 160  :         v |= v >> 16;
; 161  :         return DeBruijnClz[ (U32) (v * 0x07C4ACDDU) >> 27];
; 162  : #   endif
; 163  :     }
; 164  : }

	ret	0
BIT_highbit32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\common\bitstream.h
_TEXT	SEGMENT
bitD$ = 8
srcBuffer$ = 16
srcSize$ = 24
BIT_initDStream PROC

; 273  : {

	mov	r9, rcx

; 274  :     if (srcSize < 1) { memset(bitD, 0, sizeof(*bitD)); return ERROR(srcSize_wrong); }

	cmp	r8, 1
	jae	SHORT $LN4@BIT_initDS
	xorps	xmm0, xmm0
	xor	eax, eax
	movups	XMMWORD PTR [rcx], xmm0
	movups	XMMWORD PTR [rcx+16], xmm0
	mov	QWORD PTR [rcx+32], rax
	mov	rax, -72				; ffffffffffffffb8H

; 318  : }

	ret	0
$LN4@BIT_initDS:

; 275  : 
; 276  :     bitD->start = (const char*)srcBuffer;

	mov	QWORD PTR [rcx+24], rdx

; 277  :     bitD->limitPtr = bitD->start + sizeof(bitD->bitContainer);

	lea	rax, QWORD PTR [rdx+8]
	mov	QWORD PTR [rcx+32], rax

; 278  : 
; 279  :     if (srcSize >=  sizeof(bitD->bitContainer)) {  /* normal case */

	cmp	r8, 8
	jb	SHORT $LN5@BIT_initDS

; 280  :         bitD->ptr   = (const char*)srcBuffer + srcSize - sizeof(bitD->bitContainer);

	lea	rax, QWORD PTR [r8-8]
	add	rax, rdx
	mov	QWORD PTR [rcx+16], rax

; 281  :         bitD->bitContainer = MEM_readLEST(bitD->ptr);

	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rcx], rax

; 282  :         { BYTE const lastByte = ((const BYTE*)srcBuffer)[srcSize-1];

	movzx	eax, BYTE PTR [rdx+r8-1]

; 283  :           bitD->bitsConsumed = lastByte ? 8 - BIT_highbit32(lastByte) : 0;  /* ensures bitsConsumed is always set */

	xor	edx, edx
	test	al, al
	je	SHORT $LN17@BIT_initDS

; 145  :         return _BitScanReverse ( &r, val ) ? (unsigned)r : 0;

	bsr	ecx, eax

; 315  :     }
; 316  : 
; 317  :     return srcSize;

	mov	rax, r8

; 145  :         return _BitScanReverse ( &r, val ) ? (unsigned)r : 0;

	cmovne	edx, ecx

; 283  :           bitD->bitsConsumed = lastByte ? 8 - BIT_highbit32(lastByte) : 0;  /* ensures bitsConsumed is always set */

	mov	ecx, 8
	sub	ecx, edx
	mov	DWORD PTR [r9+8], ecx

; 318  : }

	ret	0
$LN17@BIT_initDS:

; 283  :           bitD->bitsConsumed = lastByte ? 8 - BIT_highbit32(lastByte) : 0;  /* ensures bitsConsumed is always set */

	mov	DWORD PTR [rcx+8], edx

; 284  :           if (lastByte == 0) return ERROR(GENERIC); /* endMark not present */ }

	mov	rax, -1

; 318  : }

	ret	0
$LN5@BIT_initDS:

; 285  :     } else {
; 286  :         bitD->ptr   = bitD->start;

	mov	QWORD PTR [rcx+16], rdx

; 287  :         bitD->bitContainer = *(const BYTE*)(bitD->start);
; 288  :         switch(srcSize)

	lea	rax, QWORD PTR [r8-2]
	movzx	ecx, BYTE PTR [rdx]
	mov	QWORD PTR [r9], rcx
	cmp	rax, 5
	ja	SHORT $LN14@BIT_initDS
	lea	r10, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN27@BIT_initDS[r10+rax*4]
	add	rax, r10
	jmp	rax
$LN8@BIT_initDS:

; 289  :         {
; 290  :         case 7: bitD->bitContainer += (size_t)(((const BYTE*)(srcBuffer))[6]) << (sizeof(bitD->bitContainer)*8 - 16);

	movzx	eax, BYTE PTR [rdx+6]
	shl	rax, 48					; 00000030H
	add	rcx, rax
	mov	QWORD PTR [r9], rcx
$LN9@BIT_initDS:

; 291  :                 /* fall-through */
; 292  : 
; 293  :         case 6: bitD->bitContainer += (size_t)(((const BYTE*)(srcBuffer))[5]) << (sizeof(bitD->bitContainer)*8 - 24);

	movzx	eax, BYTE PTR [rdx+5]
	shl	rax, 40					; 00000028H
	add	rcx, rax
	mov	QWORD PTR [r9], rcx
$LN10@BIT_initDS:

; 294  :                 /* fall-through */
; 295  : 
; 296  :         case 5: bitD->bitContainer += (size_t)(((const BYTE*)(srcBuffer))[4]) << (sizeof(bitD->bitContainer)*8 - 32);

	movzx	eax, BYTE PTR [rdx+4]
	shl	rax, 32					; 00000020H
	add	rcx, rax
	mov	QWORD PTR [r9], rcx
$LN11@BIT_initDS:

; 297  :                 /* fall-through */
; 298  : 
; 299  :         case 4: bitD->bitContainer += (size_t)(((const BYTE*)(srcBuffer))[3]) << 24;

	movzx	eax, BYTE PTR [rdx+3]
	shl	rax, 24
	add	rcx, rax
	mov	QWORD PTR [r9], rcx
$LN12@BIT_initDS:

; 300  :                 /* fall-through */
; 301  : 
; 302  :         case 3: bitD->bitContainer += (size_t)(((const BYTE*)(srcBuffer))[2]) << 16;

	movzx	eax, BYTE PTR [rdx+2]
	shl	rax, 16
	add	rcx, rax
	mov	QWORD PTR [r9], rcx
$LN13@BIT_initDS:

; 303  :                 /* fall-through */
; 304  : 
; 305  :         case 2: bitD->bitContainer += (size_t)(((const BYTE*)(srcBuffer))[1]) <<  8;

	movzx	eax, BYTE PTR [rdx+1]
	shl	rax, 8
	add	rax, rcx
	mov	QWORD PTR [r9], rax
$LN14@BIT_initDS:

; 306  :                 /* fall-through */
; 307  : 
; 308  :         default: break;
; 309  :         }
; 310  :         {   BYTE const lastByte = ((const BYTE*)srcBuffer)[srcSize-1];

	movzx	eax, BYTE PTR [rdx+r8-1]

; 311  :             bitD->bitsConsumed = lastByte ? 8 - BIT_highbit32(lastByte) : 0;

	xor	edx, edx
	test	al, al
	je	SHORT $LN19@BIT_initDS

; 145  :         return _BitScanReverse ( &r, val ) ? (unsigned)r : 0;

	bsr	ecx, eax
	cmovne	edx, ecx

; 311  :             bitD->bitsConsumed = lastByte ? 8 - BIT_highbit32(lastByte) : 0;

	mov	ecx, 8
	mov	eax, ecx
	sub	eax, edx

; 313  :         }
; 314  :         bitD->bitsConsumed += (U32)(sizeof(bitD->bitContainer) - srcSize)*8;

	sub	ecx, r8d
	lea	eax, DWORD PTR [rax+rcx*8]
	mov	DWORD PTR [r9+8], eax

; 315  :     }
; 316  : 
; 317  :     return srcSize;

	mov	rax, r8

; 318  : }

	ret	0
$LN19@BIT_initDS:

; 311  :             bitD->bitsConsumed = lastByte ? 8 - BIT_highbit32(lastByte) : 0;

	mov	DWORD PTR [r9+8], edx

; 312  :             if (lastByte == 0) return ERROR(corruption_detected);  /* endMark not present */

	mov	rax, -20

; 318  : }

	ret	0
	npad	3
$LN27@BIT_initDS:
	DD	$LN13@BIT_initDS
	DD	$LN12@BIT_initDS
	DD	$LN11@BIT_initDS
	DD	$LN10@BIT_initDS
	DD	$LN9@BIT_initDS
	DD	$LN8@BIT_initDS
BIT_initDStream ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\common\bitstream.h
_TEXT	SEGMENT
bitD$ = 8
nbBits$ = 16
BIT_lookBitsFast PROC

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;
; 364  :     assert(nbBits >= 1);
; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rax, QWORD PTR [rcx]
	neg	edx
	mov	ecx, DWORD PTR [rcx+8]
	and	edx, 63					; 0000003fH
	and	ecx, 63					; 0000003fH
	shl	rax, cl
	movzx	ecx, dl
	shr	rax, cl

; 366  : }

	ret	0
BIT_lookBitsFast ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\common\bitstream.h
_TEXT	SEGMENT
bitD$ = 8
nbBits$ = 16
BIT_skipBits PROC

; 370  :     bitD->bitsConsumed += nbBits;

	add	DWORD PTR [rcx+8], edx

; 371  : }

	ret	0
BIT_skipBits ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\common\bitstream.h
_TEXT	SEGMENT
bitD$ = 8
BIT_reloadDStreamFast PROC

; 402  :     if (UNLIKELY(bitD->ptr < bitD->limitPtr))

	mov	r8, QWORD PTR [rcx+16]
	mov	rdx, rcx
	cmp	r8, QWORD PTR [rcx+32]
	jae	SHORT $LN2@BIT_reload

; 403  :         return BIT_DStream_overflow;

	mov	eax, 3

; 409  : }

	ret	0
$LN2@BIT_reload:

; 404  :     assert(bitD->bitsConsumed <= sizeof(bitD->bitContainer)*8);
; 405  :     bitD->ptr -= bitD->bitsConsumed >> 3;

	mov	ecx, DWORD PTR [rcx+8]
	mov	eax, ecx

; 406  :     bitD->bitsConsumed &= 7;

	and	ecx, 7
	shr	rax, 3
	sub	r8, rax
	mov	DWORD PTR [rdx+8], ecx
	mov	QWORD PTR [rdx+16], r8

; 407  :     bitD->bitContainer = MEM_readLEST(bitD->ptr);

	mov	rax, QWORD PTR [r8]
	mov	QWORD PTR [rdx], rax

; 408  :     return BIT_DStream_unfinished;

	xor	eax, eax

; 409  : }

	ret	0
BIT_reloadDStreamFast ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\common\bitstream.h
_TEXT	SEGMENT
bitD$ = 16
BIT_reloadDStream PROC

; 417  : {

	sub	rsp, 8

; 418  :     if (bitD->bitsConsumed > (sizeof(bitD->bitContainer)*8))  /* overflow detected, like end of stream */

	mov	r9d, DWORD PTR [rcx+8]
	mov	r8, rcx
	cmp	r9d, 64					; 00000040H
	jbe	SHORT $LN2@BIT_reload

; 419  :         return BIT_DStream_overflow;

	mov	eax, 3

; 439  :     }
; 440  : }

	add	rsp, 8
	ret	0
$LN2@BIT_reload:

; 420  : 
; 421  :     if (bitD->ptr >= bitD->limitPtr) {

	mov	rdx, QWORD PTR [rcx+16]
	cmp	rdx, QWORD PTR [rcx+32]
	jb	SHORT $LN3@BIT_reload

; 405  :     bitD->ptr -= bitD->bitsConsumed >> 3;

	mov	rax, r9

; 406  :     bitD->bitsConsumed &= 7;

	and	r9d, 7
	shr	rax, 3
	sub	rdx, rax
	mov	DWORD PTR [rcx+8], r9d
	mov	QWORD PTR [rcx+16], rdx

; 407  :     bitD->bitContainer = MEM_readLEST(bitD->ptr);

	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR [rcx], rax

; 422  :         return BIT_reloadDStreamFast(bitD);

	xor	eax, eax

; 439  :     }
; 440  : }

	add	rsp, 8
	ret	0
$LN3@BIT_reload:

; 423  :     }
; 424  :     if (bitD->ptr == bitD->start) {

	mov	r11, QWORD PTR [rcx+24]
	cmp	rdx, r11
	jne	SHORT $LN4@BIT_reload

; 425  :         if (bitD->bitsConsumed < sizeof(bitD->bitContainer)*8) return BIT_DStream_endOfBuffer;

	cmp	r9d, 64					; 00000040H
	sbb	eax, eax
	add	eax, 2

; 439  :     }
; 440  : }

	add	rsp, 8
	ret	0
$LN4@BIT_reload:

; 426  :         return BIT_DStream_completed;
; 427  :     }
; 428  :     /* start < ptr < limitPtr */
; 429  :     {   U32 nbBytes = bitD->bitsConsumed >> 3;

	mov	r10d, r9d
	mov	QWORD PTR [rsp], rbx
	shr	r10d, 3

; 430  :         BIT_DStream_status result = BIT_DStream_unfinished;
; 431  :         if (bitD->ptr - nbBytes < bitD->start) {

	mov	rcx, rdx
	mov	eax, r10d
	xor	ebx, ebx
	sub	rcx, rax
	cmp	rcx, r11
	jae	SHORT $LN6@BIT_reload

; 432  :             nbBytes = (U32)(bitD->ptr - bitD->start);  /* ptr > start */

	mov	r10d, edx

; 433  :             result = BIT_DStream_endOfBuffer;

	mov	ebx, 1
	sub	r10d, r11d
$LN6@BIT_reload:

; 434  :         }
; 435  :         bitD->ptr -= nbBytes;

	mov	ecx, r10d

; 436  :         bitD->bitsConsumed -= nbBytes*8;
; 437  :         bitD->bitContainer = MEM_readLEST(bitD->ptr);   /* reminder : srcSize > sizeof(bitD->bitContainer), otherwise bitD->ptr == bitD->start */
; 438  :         return result;

	mov	eax, ebx
	mov	rbx, QWORD PTR [rsp]
	sub	rdx, rcx
	lea	ecx, DWORD PTR [r10*8]
	mov	QWORD PTR [r8+16], rdx
	sub	r9d, ecx
	mov	DWORD PTR [r8+8], r9d
	mov	rcx, QWORD PTR [rdx]
	mov	QWORD PTR [r8], rcx

; 439  :     }
; 440  : }

	add	rsp, 8
	ret	0
BIT_reloadDStream ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\common\bitstream.h
_TEXT	SEGMENT
DStream$ = 8
BIT_endOfDStream PROC

; 447  :     return ((DStream->ptr == DStream->start) && (DStream->bitsConsumed == sizeof(DStream->bitContainer)*8));

	mov	rax, QWORD PTR [rcx+24]
	cmp	QWORD PTR [rcx+16], rax
	jne	SHORT $LN3@BIT_endOfD
	cmp	DWORD PTR [rcx+8], 64			; 00000040H
	jne	SHORT $LN3@BIT_endOfD
	mov	eax, 1

; 448  : }

	ret	0
$LN3@BIT_endOfD:

; 447  :     return ((DStream->ptr == DStream->start) && (DStream->bitsConsumed == sizeof(DStream->bitContainer)*8));

	xor	eax, eax

; 448  : }

	ret	0
BIT_endOfDStream ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
_TEXT	SEGMENT
table$ = 8
HUF_getDTableDesc PROC

; 105  :     DTableDesc dtd;
; 106  :     memcpy(&dtd, table, sizeof(dtd));
; 107  :     return dtd;

	mov	eax, DWORD PTR [rcx]

; 108  : }

	ret	0
HUF_getDTableDesc ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\error_private.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
_TEXT	SEGMENT
D$1 = 112
dtd$2 = 112
DTable$ = 112
src$ = 120
srcSize$ = 128
tableLog$ = 136
workSpace$ = 136
wkspSize$dead$ = 144
nbSymbols$ = 144
HUF_readDTableX1_wksp PROC

; 119  : {

$LN44:
	mov	r11, rsp
	mov	QWORD PTR [r11+16], rbx
	push	rbp
	push	rsi
	push	rdi
	push	r14
	push	r15
	sub	rsp, 64					; 00000040H
	mov	r14, r9

; 120  :     U32 tableLog = 0;
; 121  :     U32 nbSymbols = 0;
; 122  :     size_t iSize;
; 123  :     void* const dtPtr = DTable + 1;
; 124  :     HUF_DEltX1* const dt = (HUF_DEltX1*)dtPtr;
; 125  : 
; 126  :     U32* rankVal;
; 127  :     BYTE* huffWeight;
; 128  :     size_t spaceUsed32 = 0;
; 129  : 
; 130  :     rankVal = (U32 *)workSpace + spaceUsed32;
; 131  :     spaceUsed32 += HUF_TABLELOG_ABSOLUTEMAX + 1;
; 132  :     huffWeight = (BYTE *)((U32 *)workSpace + spaceUsed32);
; 133  :     spaceUsed32 += HUF_ALIGN(HUF_SYMBOLVALUE_MAX + 1, sizeof(U32)) >> 2;
; 134  : 
; 135  :     if ((spaceUsed32 << 2) > wkspSize) return ERROR(tableLog_tooLarge);
; 136  : 
; 137  :     DEBUG_STATIC_ASSERT(sizeof(DTableDesc) == sizeof(HUF_DTable));
; 138  :     /* memset(huffWeight, 0, sizeof(huffWeight)); */   /* is not necessary, even though some analyzer complain ... */
; 139  : 
; 140  :     iSize = HUF_readStats(huffWeight, HUF_SYMBOLVALUE_MAX + 1, rankVal, &nbSymbols, &tableLog, src, srcSize);

	mov	QWORD PTR [r11-56], r8
	mov	rdi, rcx
	mov	QWORD PTR [r11-64], rdx
	xor	ebx, ebx
	lea	rsi, QWORD PTR [rcx+4]
	lea	rax, QWORD PTR [r11+32]
	mov	DWORD PTR [r11+32], ebx
	lea	rcx, QWORD PTR [r14+64]
	mov	DWORD PTR [r11+40], ebx
	lea	r9, QWORD PTR [r11+40]
	mov	QWORD PTR [r11-72], rax
	mov	r8, r14
	call	HUF_readStats
	mov	r15, rax
; File E:\dev\pyzstd\lib\common\error_private.h

; 56   : ERR_STATIC unsigned ERR_isError(size_t code) { return (code > ERROR(maxCode)); }

	cmp	rax, -120				; ffffffffffffff88H
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 141  :     if (HUF_isError(iSize)) return iSize;

	ja	$LN6@HUF_readDT

; 142  : 
; 143  :     /* Table header */
; 144  :     {   DTableDesc dtd = HUF_getDTableDesc(DTable);

	mov	ecx, DWORD PTR [rdi]

; 145  :         if (tableLog > (U32)(dtd.maxTableLog+1)) return ERROR(tableLog_tooLarge);   /* DTable too small, Huffman tree cannot fit in */

	mov	r11d, DWORD PTR tableLog$[rsp]
	movzx	edx, cl
	inc	edx
	mov	DWORD PTR dtd$2[rsp], ecx
	cmp	r11d, edx
	jbe	SHORT $LN16@HUF_readDT
	lea	rax, QWORD PTR [rbx-44]

; 183  :     }   }   }   }
; 184  :     return iSize;
; 185  : }

	mov	rbx, QWORD PTR [rsp+120]
	add	rsp, 64					; 00000040H
	pop	r15
	pop	r14
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
$LN16@HUF_readDT:

; 146  :         dtd.tableType = 0;
; 147  :         dtd.tableLog = (BYTE)tableLog;
; 148  :         memcpy(DTable, &dtd, sizeof(dtd));
; 149  :     }
; 150  : 
; 151  :     /* Calculate starting value for each rank */
; 152  :     {   U32 n, nextRankStart = 0;
; 153  :         for (n=1; n<tableLog+1; n++) {

	lea	r10d, DWORD PTR [r11+1]
	mov	BYTE PTR dtd$2[rsp+1], bl
	mov	r8d, 1
	mov	BYTE PTR dtd$2[rsp+2], r11b
	mov	eax, DWORD PTR dtd$2[rsp]
	mov	r9d, ebx
	mov	DWORD PTR [rdi], eax
	cmp	r10d, r8d
	jbe	SHORT $LN3@HUF_readDT
	lea	rdi, QWORD PTR [r14+4]
	npad	11
$LL32@HUF_readDT:

; 154  :             U32 const current = nextRankStart;
; 155  :             nextRankStart += (rankVal[n] << (n-1));

	mov	eax, DWORD PTR [rdi]
	lea	ecx, DWORD PTR [r8-1]
	shl	eax, cl
	lea	rdi, QWORD PTR [rdi+4]
	mov	edx, r9d
	inc	r8d
	add	r9d, eax

; 156  :             rankVal[n] = current;

	mov	DWORD PTR [rdi-4], edx
	cmp	r8d, r10d
	jb	SHORT $LL32@HUF_readDT
$LN3@HUF_readDT:

; 157  :     }   }
; 158  : 
; 159  :     /* fill DTable */
; 160  :     {   U32 n;
; 161  :         size_t const nEnd = nbSymbols;

	mov	r9d, DWORD PTR nbSymbols$[rsp]

; 162  :         for (n=0; n<nEnd; n++) {

	test	r9, r9
	je	$LN6@HUF_readDT
	mov	rax, rbx
$LL7@HUF_readDT:

; 163  :             size_t const w = huffWeight[n];

	movzx	ecx, BYTE PTR [rax+r14+64]

; 164  :             size_t const length = (1 << w) >> 1;

	mov	eax, 1
	shl	eax, cl
	sar	eax, 1
	movsxd	rdx, eax

; 165  :             size_t const uStart = rankVal[w];
; 166  :             size_t const uEnd = uStart + length;
; 167  :             size_t u;
; 168  :             HUF_DEltX1 D;
; 169  :             D.byte = (BYTE)n;
; 170  :             D.nbBits = (BYTE)(tableLog + 1 - w);

	movzx	eax, r11b
	mov	edi, DWORD PTR [r14+rcx*4]
	sub	al, cl
	inc	al
	mov	BYTE PTR D$1[rsp], bl
	mov	BYTE PTR D$1[rsp+1], al
	lea	r8, QWORD PTR [rdi+rdx]

; 171  :             rankVal[w] = (U32)uEnd;

	mov	DWORD PTR [r14+rcx*4], r8d

; 172  :             if (length < 4) {

	cmp	rdx, 4
	jae	SHORT $LN17@HUF_readDT

; 173  :                 /* Use length in the loop bound so the compiler knows it is short. */
; 174  :                 for (u = 0; u < length; ++u)

	test	rdx, rdx
	je	SHORT $LN5@HUF_readDT
	movzx	eax, WORD PTR D$1[rsp]

; 175  :                     dt[uStart + u] = D;

	lea	rdi, QWORD PTR [rsi+rdi*2]
	mov	rcx, rdx
	rep stosw

; 176  :             } else {

	jmp	SHORT $LN5@HUF_readDT
$LN17@HUF_readDT:

; 177  :                 /* Unroll the loop 4 times, we know it is a power of 2. */
; 178  :                 for (u = uStart; u < uEnd; u += 4) {

	cmp	rdi, r8
	jae	SHORT $LN5@HUF_readDT
	movzx	eax, WORD PTR D$1[rsp]
	lea	rcx, QWORD PTR [rsi+4]
	dec	rdx
	lea	rcx, QWORD PTR [rcx+rdi*2]
	shr	rdx, 2
	inc	rdx
	npad	9
$LL13@HUF_readDT:

; 179  :                     dt[u + 0] = D;

	mov	WORD PTR [rcx-4], ax

; 180  :                     dt[u + 1] = D;

	mov	WORD PTR [rcx-2], ax

; 181  :                     dt[u + 2] = D;

	mov	WORD PTR [rcx], ax

; 182  :                     dt[u + 3] = D;

	mov	WORD PTR [rcx+2], ax
	lea	rcx, QWORD PTR [rcx+8]
	sub	rdx, 1
	jne	SHORT $LL13@HUF_readDT
$LN5@HUF_readDT:

; 162  :         for (n=0; n<nEnd; n++) {

	inc	ebx
	mov	eax, ebx
	cmp	rax, r9
	jb	$LL7@HUF_readDT
$LN6@HUF_readDT:

; 183  :     }   }   }   }
; 184  :     return iSize;
; 185  : }

	mov	rbx, QWORD PTR [rsp+120]
	mov	rax, r15
	add	rsp, 64					; 00000040H
	pop	r15
	pop	r14
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
HUF_readDTableX1_wksp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
_TEXT	SEGMENT
Dstream$ = 8
dt$ = 16
dtLog$ = 24
HUF_decodeSymbolX1 PROC

; 196  : {

	mov	r10, rcx

; 197  :     size_t const val = BIT_lookBitsFast(Dstream, dtLog); /* note : dtLog >= 1 */

	neg	r8d
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, DWORD PTR [rcx+8]
	and	r8d, 63					; 0000003fH
	and	ecx, 63					; 0000003fH
	mov	rax, QWORD PTR [r10]
	shl	rax, cl
	movzx	ecx, r8b
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	ecx, BYTE PTR [rdx+rax*2+1]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	DWORD PTR [r10+8], ecx
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 200  :     return c;

	movzx	eax, BYTE PTR [rdx+rax*2]

; 201  : }

	ret	0
HUF_decodeSymbolX1 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
_TEXT	SEGMENT
p$ = 32
bitDPtr$ = 40
pEnd$ = 48
dt$ = 56
dtLog$ = 64
HUF_decodeStreamX1 PROC

; 216  : {

	mov	QWORD PTR [rsp+24], rbx
	mov	QWORD PTR [rsp+32], rbp
	push	rsi
	push	r12
	push	r14

; 217  :     BYTE* const pStart = p;

	mov	ebp, DWORD PTR dtLog$[rsp]
	mov	r14, r9
	mov	QWORD PTR [rsp+40], r15
	mov	rsi, r8
	lea	r15, QWORD PTR [r8-3]
	mov	QWORD PTR [rsp+32], rdi
	mov	r10, rdx
	mov	rbx, rcx
	mov	r12, rcx
$LL2@HUF_decode:
; File E:\dev\pyzstd\lib\common\bitstream.h

; 418  :     if (bitD->bitsConsumed > (sizeof(bitD->bitContainer)*8))  /* overflow detected, like end of stream */

	mov	eax, DWORD PTR [r10+8]
	cmp	eax, 64					; 00000040H
	jbe	SHORT $LN15@HUF_decode

; 419  :         return BIT_DStream_overflow;

	mov	r11d, 3
	jmp	SHORT $LN14@HUF_decode
$LN15@HUF_decode:

; 420  : 
; 421  :     if (bitD->ptr >= bitD->limitPtr) {

	mov	r8, QWORD PTR [r10+16]
	cmp	r8, QWORD PTR [r10+32]
	jb	SHORT $LN16@HUF_decode

; 405  :     bitD->ptr -= bitD->bitsConsumed >> 3;

	mov	rcx, rax

; 406  :     bitD->bitsConsumed &= 7;

	and	eax, 7
	shr	rcx, 3
	sub	r8, rcx

; 422  :         return BIT_reloadDStreamFast(bitD);

	xor	r11d, r11d
	jmp	SHORT $LN77@HUF_decode
$LN16@HUF_decode:

; 423  :     }
; 424  :     if (bitD->ptr == bitD->start) {

	mov	rdi, QWORD PTR [r10+24]
	cmp	r8, rdi
	jne	SHORT $LN17@HUF_decode

; 425  :         if (bitD->bitsConsumed < sizeof(bitD->bitContainer)*8) return BIT_DStream_endOfBuffer;

	cmp	eax, 64					; 00000040H
	jae	SHORT $LN18@HUF_decode
	mov	r11d, 1
	jmp	SHORT $LN14@HUF_decode
$LN18@HUF_decode:

; 426  :         return BIT_DStream_completed;

	mov	r11d, 2
	jmp	SHORT $LN14@HUF_decode
$LN17@HUF_decode:

; 427  :     }
; 428  :     /* start < ptr < limitPtr */
; 429  :     {   U32 nbBytes = bitD->bitsConsumed >> 3;

	mov	r9d, eax

; 430  :         BIT_DStream_status result = BIT_DStream_unfinished;
; 431  :         if (bitD->ptr - nbBytes < bitD->start) {

	mov	rdx, r8
	shr	r9d, 3
	xor	r11d, r11d
	mov	ecx, r9d
	sub	rdx, rcx
	cmp	rdx, rdi
	jae	SHORT $LN19@HUF_decode

; 432  :             nbBytes = (U32)(bitD->ptr - bitD->start);  /* ptr > start */

	mov	r9d, r8d

; 433  :             result = BIT_DStream_endOfBuffer;

	mov	r11d, 1
	sub	r9d, edi
$LN19@HUF_decode:

; 434  :         }
; 435  :         bitD->ptr -= nbBytes;

	mov	ecx, r9d
	sub	r8, rcx

; 436  :         bitD->bitsConsumed -= nbBytes*8;

	lea	ecx, DWORD PTR [r9*8]
	sub	eax, ecx
$LN77@HUF_decode:
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 220  :     while ((BIT_reloadDStream(bitDPtr) == BIT_DStream_unfinished) & (p < pEnd-3)) {

	mov	QWORD PTR [r10+16], r8
	mov	DWORD PTR [r10+8], eax
	mov	rcx, QWORD PTR [r8]
	mov	QWORD PTR [r10], rcx
$LN14@HUF_decode:
	xor	edx, edx
	cmp	rbx, r15
	setb	dl
	xor	ecx, ecx
	test	r11d, r11d
	sete	cl
	test	edx, ecx
	je	$LN3@HUF_decode
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	r8, QWORD PTR [r10]
	mov	ecx, eax
	and	ecx, 63					; 0000003fH
	mov	r9d, ebp
	shl	r8, cl
	neg	r9d
	and	r9d, 63					; 0000003fH
	mov	ecx, r9d
	shr	r8, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	ecx, BYTE PTR [r14+r8*2+1]
	movzx	edx, BYTE PTR [r14+r8*2]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	ecx, eax
	mov	DWORD PTR [r10+8], ecx
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 221  :         HUF_DECODE_SYMBOLX1_2(p, bitDPtr);

	mov	BYTE PTR [rbx], dl
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, DWORD PTR [r10+8]
	mov	rax, QWORD PTR [r10]
	and	ecx, 63					; 0000003fH
	shl	rax, cl
	mov	ecx, r9d
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 198  :     BYTE const c = dt[val].byte;

	movzx	ecx, BYTE PTR [r14+rax*2]

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [r14+rax*2+1]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	DWORD PTR [r10+8], eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 222  :         HUF_DECODE_SYMBOLX1_1(p, bitDPtr);

	mov	BYTE PTR [rbx+1], cl
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, DWORD PTR [r10+8]
	mov	rax, QWORD PTR [r10]
	and	ecx, 63					; 0000003fH
	shl	rax, cl
	mov	ecx, r9d
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 198  :     BYTE const c = dt[val].byte;

	movzx	edx, BYTE PTR [r14+rax*2]

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [r14+rax*2+1]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	DWORD PTR [r10+8], eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 223  :         HUF_DECODE_SYMBOLX1_2(p, bitDPtr);

	mov	BYTE PTR [rbx+2], dl
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, DWORD PTR [r10+8]
	mov	rax, QWORD PTR [r10]
	and	ecx, 63					; 0000003fH
	shl	rax, cl
	mov	ecx, r9d
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 198  :     BYTE const c = dt[val].byte;

	movzx	ecx, BYTE PTR [r14+rax*2]

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [r14+rax*2+1]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	DWORD PTR [r10+8], eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 224  :         HUF_DECODE_SYMBOLX1_0(p, bitDPtr);

	mov	BYTE PTR [rbx+3], cl
	add	rbx, 4

; 225  :     }

	jmp	$LL2@HUF_decode
$LN3@HUF_decode:
	mov	r15, QWORD PTR [rsp+40]

; 226  : 
; 227  :     /* [0-3] symbols remaining */
; 228  :     if (MEM_32bits())
; 229  :         while ((BIT_reloadDStream(bitDPtr) == BIT_DStream_unfinished) & (p < pEnd))
; 230  :             HUF_DECODE_SYMBOLX1_0(p, bitDPtr);
; 231  : 
; 232  :     /* no more data to retrieve from bitstream, no need to reload */
; 233  :     while (p < pEnd)

	mov	rdi, QWORD PTR [rsp+32]
	cmp	rbx, rsi
	jae	SHORT $LN7@HUF_decode
	neg	ebp
	and	ebp, 63					; 0000003fH
	npad	1
$LL6@HUF_decode:
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, DWORD PTR [r10+8]
	mov	rax, QWORD PTR [r10]
	and	ecx, 63					; 0000003fH
	shl	rax, cl
	mov	ecx, ebp
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 198  :     BYTE const c = dt[val].byte;

	movzx	ecx, BYTE PTR [r14+rax*2]

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [r14+rax*2+1]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	DWORD PTR [r10+8], eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 234  :         HUF_DECODE_SYMBOLX1_0(p, bitDPtr);

	mov	BYTE PTR [rbx], cl
	inc	rbx
	cmp	rbx, rsi
	jb	SHORT $LL6@HUF_decode
$LN7@HUF_decode:

; 235  : 
; 236  :     return pEnd-pStart;
; 237  : }

	mov	rbx, QWORD PTR [rsp+48]
	sub	rsi, r12
	mov	rbp, QWORD PTR [rsp+56]
	mov	rax, rsi
	pop	r14
	pop	r12
	pop	rsi
	ret	0
HUF_decodeStreamX1 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\error_private.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
_TEXT	SEGMENT
bitD$ = 32
oend$1$ = 144
dst$ = 144
dstSize$ = 152
cSrc$ = 160
cSrcSize$ = 168
tv581 = 176
DTable$ = 176
HUF_decompress1X1_usingDTable_internal_body PROC

; 244  : {

	mov	QWORD PTR [rsp+16], rdx
	push	rbx
	push	rbp
	push	r14
	push	r15
	sub	rsp, 104				; 00000068H

; 245  :     BYTE* op = (BYTE*)dst;
; 246  :     BYTE* const oend = op + dstSize;
; 247  :     const void* dtPtr = DTable + 1;

	mov	rax, QWORD PTR DTable$[rsp]
	lea	r14, QWORD PTR [rcx+rdx]
	mov	r11, r8
	mov	QWORD PTR oend$1$[rsp], r14
	mov	rbx, rcx

; 253  :     CHECK_F( BIT_initDStream(&bitD, cSrc, cSrcSize) );

	mov	r8, r9
	mov	rdx, r11
	lea	rcx, QWORD PTR bitD$[rsp]
	mov	r10d, DWORD PTR [rax]
	lea	r15, QWORD PTR [rax+4]
	shr	r10d, 16
	movzx	ebp, r10b
	call	BIT_initDStream
; File E:\dev\pyzstd\lib\common\error_private.h

; 56   : ERR_STATIC unsigned ERR_isError(size_t code) { return (code > ERROR(maxCode)); }

	cmp	rax, -120				; ffffffffffffff88H
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 253  :     CHECK_F( BIT_initDStream(&bitD, cSrc, cSrcSize) );

	ja	$LN1@HUF_decomp

; 254  : 
; 255  :     HUF_decodeStreamX1(op, &bitD, oend, dt, dtLog);

	mov	r11, QWORD PTR bitD$[rsp+16]
	lea	rax, QWORD PTR [r14-3]
	mov	r10d, DWORD PTR bitD$[rsp+8]
	mov	r14, rax
	mov	QWORD PTR [rsp+160], rsi
	mov	rsi, QWORD PTR bitD$[rsp+24]
	mov	QWORD PTR [rsp+96], rdi
	mov	rdi, QWORD PTR bitD$[rsp]
	mov	QWORD PTR [rsp+88], r12
	mov	r12, QWORD PTR bitD$[rsp+32]
	mov	QWORD PTR [rsp+80], r13
	mov	r13d, esi
	npad	4
$LL10@HUF_decomp:
; File E:\dev\pyzstd\lib\common\bitstream.h

; 418  :     if (bitD->bitsConsumed > (sizeof(bitD->bitContainer)*8))  /* overflow detected, like end of stream */

	cmp	r10d, 64				; 00000040H
	jbe	SHORT $LN23@HUF_decomp

; 419  :         return BIT_DStream_overflow;

	mov	r8d, 3
	jmp	SHORT $LN22@HUF_decomp
$LN23@HUF_decomp:

; 420  : 
; 421  :     if (bitD->ptr >= bitD->limitPtr) {

	cmp	r11, r12
	jb	SHORT $LN24@HUF_decomp

; 405  :     bitD->ptr -= bitD->bitsConsumed >> 3;

	mov	eax, r10d

; 406  :     bitD->bitsConsumed &= 7;

	and	r10d, 7
	shr	rax, 3
	sub	r11, rax

; 422  :         return BIT_reloadDStreamFast(bitD);

	xor	r8d, r8d
	jmp	SHORT $LN90@HUF_decomp
$LN24@HUF_decomp:

; 423  :     }
; 424  :     if (bitD->ptr == bitD->start) {

	cmp	r11, rsi
	jne	SHORT $LN25@HUF_decomp

; 425  :         if (bitD->bitsConsumed < sizeof(bitD->bitContainer)*8) return BIT_DStream_endOfBuffer;

	cmp	r10d, 64				; 00000040H
	sbb	r8d, r8d
	add	r8d, 2

; 426  :         return BIT_DStream_completed;

	jmp	SHORT $LN22@HUF_decomp
$LN25@HUF_decomp:

; 427  :     }
; 428  :     /* start < ptr < limitPtr */
; 429  :     {   U32 nbBytes = bitD->bitsConsumed >> 3;

	mov	eax, r10d

; 430  :         BIT_DStream_status result = BIT_DStream_unfinished;
; 431  :         if (bitD->ptr - nbBytes < bitD->start) {

	mov	rdx, r11
	shr	eax, 3
	xor	r8d, r8d
	mov	ecx, eax
	sub	rdx, rcx
	cmp	rdx, rsi
	jae	SHORT $LN27@HUF_decomp

; 432  :             nbBytes = (U32)(bitD->ptr - bitD->start);  /* ptr > start */

	mov	eax, DWORD PTR bitD$[rsp+16]

; 433  :             result = BIT_DStream_endOfBuffer;

	mov	r8d, 1
	sub	eax, r13d
$LN27@HUF_decomp:

; 434  :         }
; 435  :         bitD->ptr -= nbBytes;

	mov	ecx, eax
	sub	r11, rcx

; 436  :         bitD->bitsConsumed -= nbBytes*8;

	imul	ecx, eax, -8				; fffffff8H
	add	r10d, ecx
$LN90@HUF_decomp:
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 220  :     while ((BIT_reloadDStream(bitDPtr) == BIT_DStream_unfinished) & (p < pEnd-3)) {

	mov	rdi, QWORD PTR [r11]
	mov	QWORD PTR bitD$[rsp+16], r11
$LN22@HUF_decomp:
	xor	ecx, ecx
	cmp	rbx, r14
	setb	cl
	xor	eax, eax
	test	r8d, r8d
	sete	al
	test	ecx, eax
	je	$LN11@HUF_decomp
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, r10d
	mov	r9d, ebp
	and	ecx, 63					; 0000003fH
	neg	r9d
	and	r9d, 63					; 0000003fH
	mov	rdx, rdi
	shl	rdx, cl
	mov	ecx, r9d
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [r15+rdx*2+1]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r10d, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 221  :         HUF_DECODE_SYMBOLX1_2(p, bitDPtr);

	movzx	eax, BYTE PTR [r15+rdx*2]
	mov	BYTE PTR [rbx], al
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, r10d
	and	ecx, 63					; 0000003fH

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, rdi
	shl	rdx, cl
	mov	ecx, r9d
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [r15+rdx*2+1]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r10d, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 222  :         HUF_DECODE_SYMBOLX1_1(p, bitDPtr);

	movzx	eax, BYTE PTR [r15+rdx*2]
	mov	BYTE PTR [rbx+1], al
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, r10d
	and	ecx, 63					; 0000003fH

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, rdi
	shl	rdx, cl
	mov	ecx, r9d
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	r8d, BYTE PTR [r15+rdx*2+1]

; 223  :         HUF_DECODE_SYMBOLX1_2(p, bitDPtr);

	movzx	eax, BYTE PTR [r15+rdx*2]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r8d, r10d
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 223  :         HUF_DECODE_SYMBOLX1_2(p, bitDPtr);

	mov	BYTE PTR [rbx+2], al
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, r8d
	and	ecx, 63					; 0000003fH

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rax, rdi
	shl	rax, cl
	mov	ecx, r9d
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	r10d, BYTE PTR [r15+rax*2+1]

; 224  :         HUF_DECODE_SYMBOLX1_0(p, bitDPtr);

	movzx	eax, BYTE PTR [r15+rax*2]

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	add	r10d, r8d

; 224  :         HUF_DECODE_SYMBOLX1_0(p, bitDPtr);

	mov	BYTE PTR [rbx+3], al
	add	rbx, 4

; 225  :     }

	jmp	$LL10@HUF_decomp
$LN11@HUF_decomp:

; 226  : 
; 227  :     /* [0-3] symbols remaining */
; 228  :     if (MEM_32bits())
; 229  :         while ((BIT_reloadDStream(bitDPtr) == BIT_DStream_unfinished) & (p < pEnd))
; 230  :             HUF_DECODE_SYMBOLX1_0(p, bitDPtr);
; 231  : 
; 232  :     /* no more data to retrieve from bitstream, no need to reload */
; 233  :     while (p < pEnd)

	mov	r14, QWORD PTR oend$1$[rsp]
	mov	r13, QWORD PTR [rsp+80]
	mov	r12, QWORD PTR [rsp+88]
	cmp	rbx, r14
	jae	SHORT $LN15@HUF_decomp
	neg	ebp
	and	ebp, 63					; 0000003fH
$LL14@HUF_decomp:
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, r10d
	mov	rdx, rdi
	and	ecx, 63					; 0000003fH
	shl	rdx, cl
	mov	ecx, ebp
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [r15+rdx*2+1]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r10d, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 234  :         HUF_DECODE_SYMBOLX1_0(p, bitDPtr);

	movzx	eax, BYTE PTR [r15+rdx*2]
	mov	BYTE PTR [rbx], al
	inc	rbx
	cmp	rbx, r14
	jb	SHORT $LL14@HUF_decomp
$LN15@HUF_decomp:
	mov	rdi, QWORD PTR [rsp+96]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 447  :     return ((DStream->ptr == DStream->start) && (DStream->bitsConsumed == sizeof(DStream->bitContainer)*8));

	cmp	r11, rsi
	mov	rsi, QWORD PTR [rsp+160]
	jne	SHORT $LN80@HUF_decomp
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 259  :     return dstSize;

	mov	rax, QWORD PTR dstSize$[rsp]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 447  :     return ((DStream->ptr == DStream->start) && (DStream->bitsConsumed == sizeof(DStream->bitContainer)*8));

	cmp	r10d, 64				; 00000040H
	je	SHORT $LN1@HUF_decomp
$LN80@HUF_decomp:
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 257  :     if (!BIT_endOfDStream(&bitD)) return ERROR(corruption_detected);

	mov	rax, -20
$LN1@HUF_decomp:

; 260  : }

	add	rsp, 104				; 00000068H
	pop	r15
	pop	r14
	pop	rbp
	pop	rbx
	ret	0
HUF_decompress1X1_usingDTable_internal_body ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\error_private.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\error_private.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\error_private.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\error_private.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
_TEXT	SEGMENT
bitD4$1$ = 32
$T1 = 32
$T2 = 32
$T3 = 32
endSignal$2$ = 32
bitD2$1$ = 36
tv3339 = 36
dtLog$1$ = 40
p$1$ = 48
bitD4$2$ = 56
istart2$1$ = 56
bitD1$2$ = 64
p$1$ = 72
bitD2$2$ = 80
bitD3$2$ = 88
opStart2$1$ = 96
tv2842 = 96
tv2833 = 96
p$1$ = 104
opStart3$1$ = 112
bitD4$4 = 120
bitD2$5 = 160
opStart4$1$ = 200
tv2894 = 208
bitD3$6 = 216
bitD1$7 = 256
oend$1$ = 296
dst$ = 368
dstSize$ = 376
cSrc$ = 384
$T8 = 392
bitD1$1$ = 392
tv2911 = 392
tv2851 = 392
istart1$1$ = 392
cSrcSize$ = 392
DTable$ = 400
HUF_decompress4X1_usingDTable_internal_body PROC

; 267  : {

	mov	QWORD PTR [rsp+24], rbx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	lea	rbp, QWORD PTR [rsp-48]
	sub	rsp, 304				; 00000130H

; 268  :     /* Check */
; 269  :     if (cSrcSize < 10) return ERROR(corruption_detected);  /* strict minimum : jump table + 1 byte per stream */

	cmp	r9, 10
	jb	$LN477@HUF_decomp

; 270  : 
; 271  :     {   const BYTE* const istart = (const BYTE*) cSrc;
; 272  :         BYTE* const ostart = (BYTE*) dst;
; 273  :         BYTE* const oend = ostart + dstSize;
; 274  :         BYTE* const olimit = oend - 3;
; 275  :         const void* const dtPtr = DTable + 1;
; 276  :         const HUF_DEltX1* const dt = (const HUF_DEltX1*)dtPtr;
; 277  : 
; 278  :         /* Init */
; 279  :         BIT_DStream_t bitD1;
; 280  :         BIT_DStream_t bitD2;
; 281  :         BIT_DStream_t bitD3;
; 282  :         BIT_DStream_t bitD4;
; 283  :         size_t const length1 = MEM_readLE16(istart);

	movzx	r10d, WORD PTR [r8]
	lea	rax, QWORD PTR [rcx+rdx]

; 284  :         size_t const length2 = MEM_readLE16(istart+2);

	movzx	r14d, WORD PTR [r8+2]

; 285  :         size_t const length3 = MEM_readLE16(istart+4);
; 286  :         size_t const length4 = cSrcSize - (length1 + length2 + length3 + 6);

	mov	rdi, r9
	mov	r11, QWORD PTR DTable$[rbp-256]
	movzx	esi, WORD PTR [r8+4]
	mov	QWORD PTR oend$1$[rbp-256], rax
	sub	rdi, rsi
	add	rax, -3

; 287  :         const BYTE* const istart1 = istart + 6;  /* jumpTable */
; 288  :         const BYTE* const istart2 = istart1 + length1;
; 289  :         const BYTE* const istart3 = istart2 + length2;
; 290  :         const BYTE* const istart4 = istart3 + length3;
; 291  :         const size_t segmentSize = (dstSize+3) / 4;
; 292  :         BYTE* const opStart2 = ostart + segmentSize;
; 293  :         BYTE* const opStart3 = opStart2 + segmentSize;
; 294  :         BYTE* const opStart4 = opStart3 + segmentSize;
; 295  :         BYTE* op1 = ostart;
; 296  :         BYTE* op2 = opStart2;
; 297  :         BYTE* op3 = opStart3;
; 298  :         BYTE* op4 = opStart4;
; 299  :         DTableDesc const dtd = HUF_getDTableDesc(DTable);
; 300  :         U32 const dtLog = dtd.tableLog;
; 301  :         U32 endSignal = 1;

	mov	DWORD PTR endSignal$2$[rsp], 1
	mov	QWORD PTR tv2894[rbp-256], rax
	sub	rdi, r14
	lea	rax, QWORD PTR [r8+6]
	sub	rdi, r10
	mov	QWORD PTR istart1$1$[rbp-256], rax
	sub	rdi, 6
	add	rax, r10
	mov	QWORD PTR istart2$1$[rsp], rax
	lea	r13, QWORD PTR [rax+r14]
	lea	rax, QWORD PTR [rdx+3]
	shr	rax, 2
	add	rcx, rax
	mov	QWORD PTR opStart2$1$[rsp], rcx
	mov	QWORD PTR p$1$[rsp], rcx
	lea	rdx, QWORD PTR [rcx+rax]
	lea	r15, QWORD PTR [rdx+rax]
	mov	QWORD PTR opStart3$1$[rsp], rdx
	mov	eax, DWORD PTR [r11]
	mov	r12, r15
	shr	eax, 16
	movzx	ebx, al
	mov	DWORD PTR dtLog$1$[rsp], ebx
	mov	QWORD PTR opStart4$1$[rbp-256], r15
	mov	QWORD PTR p$1$[rsp], rdx
	mov	QWORD PTR p$1$[rsp], r15

; 302  : 
; 303  :         if (length4 > cSrcSize) return ERROR(corruption_detected);   /* overflow */

	cmp	rdi, r9
	ja	$LN477@HUF_decomp

; 304  :         CHECK_F( BIT_initDStream(&bitD1, istart1, length1) );

	mov	rdx, QWORD PTR istart1$1$[rbp-256]
	lea	rcx, QWORD PTR bitD1$7[rbp-256]
	mov	r8d, r10d
	call	BIT_initDStream
; File E:\dev\pyzstd\lib\common\error_private.h

; 56   : ERR_STATIC unsigned ERR_isError(size_t code) { return (code > ERROR(maxCode)); }

	cmp	rax, -120				; ffffffffffffff88H
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 304  :         CHECK_F( BIT_initDStream(&bitD1, istart1, length1) );

	ja	$LN1@HUF_decomp

; 305  :         CHECK_F( BIT_initDStream(&bitD2, istart2, length2) );

	mov	rdx, QWORD PTR istart2$1$[rsp]
	lea	rcx, QWORD PTR bitD2$5[rbp-256]
	mov	r8d, r14d
	call	BIT_initDStream
; File E:\dev\pyzstd\lib\common\error_private.h

; 56   : ERR_STATIC unsigned ERR_isError(size_t code) { return (code > ERROR(maxCode)); }

	cmp	rax, -120				; ffffffffffffff88H
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 305  :         CHECK_F( BIT_initDStream(&bitD2, istart2, length2) );

	ja	$LN1@HUF_decomp

; 306  :         CHECK_F( BIT_initDStream(&bitD3, istart3, length3) );

	mov	r8d, esi
	lea	rcx, QWORD PTR bitD3$6[rbp-256]
	mov	rdx, r13
	call	BIT_initDStream
; File E:\dev\pyzstd\lib\common\error_private.h

; 56   : ERR_STATIC unsigned ERR_isError(size_t code) { return (code > ERROR(maxCode)); }

	cmp	rax, -120				; ffffffffffffff88H
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 306  :         CHECK_F( BIT_initDStream(&bitD3, istart3, length3) );

	ja	$LN1@HUF_decomp

; 307  :         CHECK_F( BIT_initDStream(&bitD4, istart4, length4) );

	lea	rdx, QWORD PTR [rsi+r13]
	mov	r8, rdi
	lea	rcx, QWORD PTR bitD4$4[rsp]
	call	BIT_initDStream
; File E:\dev\pyzstd\lib\common\error_private.h

; 56   : ERR_STATIC unsigned ERR_isError(size_t code) { return (code > ERROR(maxCode)); }

	cmp	rax, -120				; ffffffffffffff88H
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 307  :         CHECK_F( BIT_initDStream(&bitD4, istart4, length4) );

	ja	$LN1@HUF_decomp

; 310  :         for ( ; (endSignal) & (op4 < olimit) ; ) {

	mov	edi, DWORD PTR bitD1$7[rbp-248]
	mov	r10d, DWORD PTR bitD3$6[rbp-248]
	mov	esi, DWORD PTR bitD4$4[rbp-248]
	mov	r8, QWORD PTR dst$[rbp-256]
	mov	r9, QWORD PTR p$1$[rsp]
	cmp	r15, QWORD PTR tv2894[rbp-256]
	jae	$LN478@HUF_decomp
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	r13, QWORD PTR bitD2$5[rbp-240]
	mov	eax, ebx
	mov	ebx, DWORD PTR bitD2$5[rbp-248]
	neg	eax
	mov	r15, QWORD PTR bitD3$6[rbp-240]
	and	eax, 63					; 0000003fH
	mov	r14, QWORD PTR bitD4$4[rbp-240]
	mov	DWORD PTR tv2911[rbp-256], eax
	mov	rax, QWORD PTR bitD1$7[rbp-256]
	mov	QWORD PTR bitD1$2$[rsp], rax
	mov	rax, QWORD PTR bitD2$5[rbp-256]
	mov	QWORD PTR bitD2$2$[rsp], rax
	mov	rax, QWORD PTR bitD3$6[rbp-256]
	mov	QWORD PTR bitD3$2$[rsp], rax
	mov	rax, QWORD PTR bitD4$4[rsp]
	mov	QWORD PTR bitD4$2$[rsp], rax
	npad	9
$LL2@HUF_decomp:
	mov	rdx, QWORD PTR bitD1$2$[rsp]
	mov	ecx, edi
	and	ecx, 63					; 0000003fH
	shl	rdx, cl
	mov	ecx, DWORD PTR tv2911[rbp-256]
	shr	rdx, cl
	mov	ecx, ebx
	and	ecx, 63					; 0000003fH
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [r11+rdx*2+5]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	edi, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 311  :             HUF_DECODE_SYMBOLX1_2(op1, &bitD1);

	movzx	eax, BYTE PTR [r11+rdx*2+4]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, QWORD PTR bitD2$2$[rsp]
	shl	rdx, cl
	mov	ecx, DWORD PTR tv2911[rbp-256]
	shr	rdx, cl
	mov	ecx, r10d
	and	ecx, 63					; 0000003fH
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 311  :             HUF_DECODE_SYMBOLX1_2(op1, &bitD1);

	mov	BYTE PTR [r8], al

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [r11+rdx*2+5]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	ebx, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 312  :             HUF_DECODE_SYMBOLX1_2(op2, &bitD2);

	movzx	eax, BYTE PTR [r11+rdx*2+4]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, QWORD PTR bitD3$2$[rsp]
	shl	rdx, cl
	mov	ecx, DWORD PTR tv2911[rbp-256]
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 313  :             HUF_DECODE_SYMBOLX1_2(op3, &bitD3);

	mov	rcx, QWORD PTR p$1$[rsp]
	mov	BYTE PTR [r9], al

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [r11+rdx*2+5]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r10d, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 313  :             HUF_DECODE_SYMBOLX1_2(op3, &bitD3);

	movzx	eax, BYTE PTR [r11+rdx*2+4]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, QWORD PTR bitD4$2$[rsp]
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 313  :             HUF_DECODE_SYMBOLX1_2(op3, &bitD3);

	mov	BYTE PTR [rcx], al
	inc	rcx
	mov	QWORD PTR p$1$[rsp], rcx
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, esi
	and	ecx, 63					; 0000003fH
	shl	rdx, cl
	mov	ecx, DWORD PTR tv2911[rbp-256]
	shr	rdx, cl

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, edi
	and	ecx, 63					; 0000003fH
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [r11+rdx*2+5]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	esi, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 314  :             HUF_DECODE_SYMBOLX1_2(op4, &bitD4);

	movzx	eax, BYTE PTR [r11+rdx*2+4]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, QWORD PTR bitD1$2$[rsp]
	shl	rdx, cl
	mov	ecx, DWORD PTR tv2911[rbp-256]
	shr	rdx, cl

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, ebx
	and	ecx, 63					; 0000003fH
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 314  :             HUF_DECODE_SYMBOLX1_2(op4, &bitD4);

	mov	BYTE PTR [r12], al

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [r11+rdx*2+5]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	edi, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 315  :             HUF_DECODE_SYMBOLX1_1(op1, &bitD1);

	movzx	eax, BYTE PTR [r11+rdx*2+4]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, QWORD PTR bitD2$2$[rsp]
	shl	rdx, cl
	mov	ecx, DWORD PTR tv2911[rbp-256]
	shr	rdx, cl

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, r10d
	and	ecx, 63					; 0000003fH
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 315  :             HUF_DECODE_SYMBOLX1_1(op1, &bitD1);

	mov	BYTE PTR [r8+1], al

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [r11+rdx*2+5]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	ebx, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 316  :             HUF_DECODE_SYMBOLX1_1(op2, &bitD2);

	movzx	eax, BYTE PTR [r11+rdx*2+4]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, QWORD PTR bitD3$2$[rsp]
	shl	rdx, cl
	mov	ecx, DWORD PTR tv2911[rbp-256]
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 317  :             HUF_DECODE_SYMBOLX1_1(op3, &bitD3);

	mov	rcx, QWORD PTR p$1$[rsp]
	mov	BYTE PTR [r9+1], al

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [r11+rdx*2+5]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r10d, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 317  :             HUF_DECODE_SYMBOLX1_1(op3, &bitD3);

	movzx	eax, BYTE PTR [r11+rdx*2+4]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, QWORD PTR bitD4$2$[rsp]
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 317  :             HUF_DECODE_SYMBOLX1_1(op3, &bitD3);

	mov	BYTE PTR [rcx], al
	inc	rcx
	mov	QWORD PTR p$1$[rsp], rcx
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, esi
	and	ecx, 63					; 0000003fH

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	shl	rdx, cl
	mov	ecx, DWORD PTR tv2911[rbp-256]
	shr	rdx, cl

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, edi
	and	ecx, 63					; 0000003fH
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [r11+rdx*2+5]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	esi, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 318  :             HUF_DECODE_SYMBOLX1_1(op4, &bitD4);

	movzx	eax, BYTE PTR [r11+rdx*2+4]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, QWORD PTR bitD1$2$[rsp]
	shl	rdx, cl
	mov	ecx, DWORD PTR tv2911[rbp-256]
	shr	rdx, cl

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, ebx
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 318  :             HUF_DECODE_SYMBOLX1_1(op4, &bitD4);

	mov	BYTE PTR [r12+1], al
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	and	ecx, 63					; 0000003fH
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [r11+rdx*2+5]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	edi, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 319  :             HUF_DECODE_SYMBOLX1_2(op1, &bitD1);

	movzx	eax, BYTE PTR [r11+rdx*2+4]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, QWORD PTR bitD2$2$[rsp]
	shl	rdx, cl
	mov	ecx, DWORD PTR tv2911[rbp-256]
	shr	rdx, cl

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, r10d
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 319  :             HUF_DECODE_SYMBOLX1_2(op1, &bitD1);

	mov	BYTE PTR [r8+2], al
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	and	ecx, 63					; 0000003fH
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [r11+rdx*2+5]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	ebx, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 320  :             HUF_DECODE_SYMBOLX1_2(op2, &bitD2);

	movzx	eax, BYTE PTR [r11+rdx*2+4]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, QWORD PTR bitD3$2$[rsp]
	shl	rdx, cl
	mov	ecx, DWORD PTR tv2911[rbp-256]
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 321  :             HUF_DECODE_SYMBOLX1_2(op3, &bitD3);

	mov	rcx, QWORD PTR p$1$[rsp]
	mov	BYTE PTR [r9+2], al

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [r11+rdx*2+5]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r10d, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 321  :             HUF_DECODE_SYMBOLX1_2(op3, &bitD3);

	movzx	eax, BYTE PTR [r11+rdx*2+4]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, QWORD PTR bitD4$2$[rsp]
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 321  :             HUF_DECODE_SYMBOLX1_2(op3, &bitD3);

	mov	BYTE PTR [rcx], al
	inc	rcx
	mov	QWORD PTR p$1$[rsp], rcx
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, esi
	and	ecx, 63					; 0000003fH

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	shl	rdx, cl
	mov	ecx, DWORD PTR tv2911[rbp-256]
	shr	rdx, cl

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, edi
	and	ecx, 63					; 0000003fH
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [r11+rdx*2+5]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	esi, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 322  :             HUF_DECODE_SYMBOLX1_2(op4, &bitD4);

	movzx	eax, BYTE PTR [r11+rdx*2+4]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, QWORD PTR bitD1$2$[rsp]
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 322  :             HUF_DECODE_SYMBOLX1_2(op4, &bitD4);

	mov	BYTE PTR [r12+2], al
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	shl	rdx, cl
	mov	ecx, DWORD PTR tv2911[rbp-256]
	shr	rdx, cl

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, ebx
	and	ecx, 63					; 0000003fH
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [r11+rdx*2+5]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	edi, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 323  :             HUF_DECODE_SYMBOLX1_0(op1, &bitD1);

	movzx	eax, BYTE PTR [r11+rdx*2+4]
	mov	BYTE PTR [r8+3], al
	add	r8, 4
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rax, QWORD PTR bitD2$2$[rsp]
	shl	rax, cl
	mov	ecx, DWORD PTR tv2911[rbp-256]
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	lea	rcx, QWORD PTR [r11+rax*2]
	movzx	eax, BYTE PTR [r11+rax*2+5]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	ebx, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 324  :             HUF_DECODE_SYMBOLX1_0(op2, &bitD2);

	movzx	eax, BYTE PTR [rcx+4]
	mov	BYTE PTR [r9+3], al
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, r10d

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rax, QWORD PTR bitD3$2$[rsp]
	and	ecx, 63					; 0000003fH
	shl	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 324  :             HUF_DECODE_SYMBOLX1_0(op2, &bitD2);

	add	r9, 4
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, DWORD PTR tv2911[rbp-256]
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	lea	rcx, QWORD PTR [r11+rax*2]
	movzx	eax, BYTE PTR [r11+rax*2+5]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r10d, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 325  :             HUF_DECODE_SYMBOLX1_0(op3, &bitD3);

	movzx	eax, BYTE PTR [rcx+4]
	mov	rcx, QWORD PTR p$1$[rsp]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, QWORD PTR bitD4$2$[rsp]
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 325  :             HUF_DECODE_SYMBOLX1_0(op3, &bitD3);

	mov	BYTE PTR [rcx], al
	inc	rcx
	mov	QWORD PTR p$1$[rsp], rcx
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, esi
	and	ecx, 63					; 0000003fH

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	shl	rdx, cl
	mov	ecx, DWORD PTR tv2911[rbp-256]
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [r11+rdx*2+5]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	esi, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 326  :             HUF_DECODE_SYMBOLX1_0(op4, &bitD4);

	movzx	eax, BYTE PTR [r11+rdx*2+4]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 402  :     if (UNLIKELY(bitD->ptr < bitD->limitPtr))

	mov	rdx, QWORD PTR bitD1$7[rbp-240]
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 326  :             HUF_DECODE_SYMBOLX1_0(op4, &bitD4);

	mov	BYTE PTR [r12+3], al
	add	r12, 4
; File E:\dev\pyzstd\lib\common\bitstream.h

; 402  :     if (UNLIKELY(bitD->ptr < bitD->limitPtr))

	cmp	rdx, QWORD PTR bitD1$7[rbp-224]
	jae	SHORT $LN139@HUF_decomp

; 403  :         return BIT_DStream_overflow;

	mov	eax, 3
	jmp	SHORT $LN138@HUF_decomp
$LN139@HUF_decomp:

; 405  :     bitD->ptr -= bitD->bitsConsumed >> 3;

	mov	eax, edi
	and	edi, 7
	shr	rax, 3
	sub	rdx, rax
	mov	QWORD PTR bitD1$7[rbp-240], rdx

; 407  :     bitD->bitContainer = MEM_readLEST(bitD->ptr);

	mov	rax, QWORD PTR [rdx]
	mov	QWORD PTR bitD1$2$[rsp], rax

; 408  :     return BIT_DStream_unfinished;

	xor	eax, eax
$LN138@HUF_decomp:
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 327  :             endSignal &= BIT_reloadDStreamFast(&bitD1) == BIT_DStream_unfinished;

	xor	ecx, ecx
	test	eax, eax
	cmove	ecx, DWORD PTR endSignal$2$[rsp]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 402  :     if (UNLIKELY(bitD->ptr < bitD->limitPtr))

	cmp	r13, QWORD PTR bitD2$5[rbp-224]
	jae	SHORT $LN142@HUF_decomp

; 403  :         return BIT_DStream_overflow;

	mov	DWORD PTR $T3[rsp], 3
	jmp	SHORT $LN141@HUF_decomp
$LN142@HUF_decomp:

; 405  :     bitD->ptr -= bitD->bitsConsumed >> 3;

	mov	eax, ebx
	shr	rax, 3
	sub	r13, rax

; 408  :     return BIT_DStream_unfinished;

	mov	DWORD PTR $T3[rsp], 0
	and	ebx, 7
	mov	rax, QWORD PTR [r13]
	mov	QWORD PTR bitD2$2$[rsp], rax
$LN141@HUF_decomp:
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 328  :             endSignal &= BIT_reloadDStreamFast(&bitD2) == BIT_DStream_unfinished;

	xor	eax, eax
	cmp	DWORD PTR $T3[rsp], eax
	sete	al
	and	eax, ecx
	mov	DWORD PTR tv3339[rsp], eax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 402  :     if (UNLIKELY(bitD->ptr < bitD->limitPtr))

	cmp	r15, QWORD PTR bitD3$6[rbp-224]
	jae	SHORT $LN145@HUF_decomp

; 403  :         return BIT_DStream_overflow;

	mov	DWORD PTR $T2[rsp], 3
	jmp	SHORT $LN144@HUF_decomp
$LN145@HUF_decomp:

; 405  :     bitD->ptr -= bitD->bitsConsumed >> 3;

	mov	eax, r10d
	shr	rax, 3
	sub	r15, rax

; 408  :     return BIT_DStream_unfinished;

	mov	DWORD PTR $T2[rsp], 0
	and	r10d, 7
	mov	rax, QWORD PTR [r15]
	mov	QWORD PTR bitD3$2$[rsp], rax
	mov	eax, DWORD PTR tv3339[rsp]
$LN144@HUF_decomp:
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 329  :             endSignal &= BIT_reloadDStreamFast(&bitD3) == BIT_DStream_unfinished;

	xor	ecx, ecx
	cmp	DWORD PTR $T2[rsp], ecx
	cmove	ecx, eax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 402  :     if (UNLIKELY(bitD->ptr < bitD->limitPtr))

	cmp	r14, QWORD PTR bitD4$4[rbp-224]
	jae	SHORT $LN148@HUF_decomp

; 403  :         return BIT_DStream_overflow;

	mov	DWORD PTR $T1[rsp], 3
	jmp	SHORT $LN147@HUF_decomp
$LN148@HUF_decomp:

; 405  :     bitD->ptr -= bitD->bitsConsumed >> 3;

	mov	eax, esi
	shr	rax, 3
	sub	r14, rax

; 408  :     return BIT_DStream_unfinished;

	mov	DWORD PTR $T1[rsp], 0
	and	esi, 7
	mov	rax, QWORD PTR [r14]
	mov	QWORD PTR bitD4$2$[rsp], rax
$LN147@HUF_decomp:
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 330  :             endSignal &= BIT_reloadDStreamFast(&bitD4) == BIT_DStream_unfinished;

	xor	eax, eax
	cmp	DWORD PTR $T1[rsp], eax
	sete	al
	and	ecx, eax
	xor	eax, eax
	cmp	r12, QWORD PTR tv2894[rbp-256]
	mov	DWORD PTR endSignal$2$[rsp], ecx
	cmovb	eax, ecx
	test	eax, eax
	jne	$LL2@HUF_decomp
; File E:\dev\pyzstd\lib\common\bitstream.h

; 405  :     bitD->ptr -= bitD->bitsConsumed >> 3;

	mov	QWORD PTR bitD4$4[rbp-240], r14
	mov	QWORD PTR bitD3$6[rbp-240], r15
	mov	QWORD PTR bitD2$5[rbp-240], r13
	mov	QWORD PTR p$1$[rsp], r9
	mov	QWORD PTR p$1$[rsp], r12
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 310  :         for ( ; (endSignal) & (op4 < olimit) ; ) {

	jmp	SHORT $LN479@HUF_decomp
$LN478@HUF_decomp:
	mov	rax, QWORD PTR bitD1$7[rbp-256]
	mov	ebx, DWORD PTR bitD2$5[rbp-248]
	mov	rdx, QWORD PTR bitD1$7[rbp-240]
	mov	QWORD PTR bitD1$2$[rsp], rax
	mov	rax, QWORD PTR bitD2$5[rbp-256]
	mov	QWORD PTR bitD2$2$[rsp], rax
	mov	rax, QWORD PTR bitD3$6[rbp-256]
	mov	QWORD PTR bitD3$2$[rsp], rax
	mov	rax, QWORD PTR bitD4$4[rsp]
	mov	QWORD PTR bitD4$2$[rsp], rax
$LN479@HUF_decomp:

; 331  :         }
; 332  : 
; 333  :         /* check corruption */
; 334  :         /* note : should not be necessary : op# advance in lock step, and we control op4.
; 335  :          *        but curiously, binary generated by gcc 7.2 & 7.3 with -mbmi2 runs faster when >=1 test is present */
; 336  :         if (op1 > opStart2) return ERROR(corruption_detected);

	mov	rax, QWORD PTR opStart2$1$[rsp]
	mov	DWORD PTR bitD4$1$[rsp], esi
	mov	DWORD PTR bitD2$1$[rsp], ebx
	mov	DWORD PTR bitD1$1$[rbp-256], edi
	cmp	r8, rax
	ja	$LN477@HUF_decomp

; 337  :         if (op2 > opStart3) return ERROR(corruption_detected);

	cmp	r9, QWORD PTR opStart3$1$[rsp]
	ja	$LN477@HUF_decomp

; 338  :         if (op3 > opStart4) return ERROR(corruption_detected);

	mov	rcx, QWORD PTR opStart4$1$[rbp-256]
	cmp	QWORD PTR p$1$[rsp], rcx
	ja	$LN477@HUF_decomp

; 339  :         /* note : op4 supposed already verified within main loop */
; 340  : 
; 341  :         /* finish bitStreams one by one */
; 342  :         HUF_decodeStreamX1(op1, &bitD1, opStart2, dt, dtLog);

	mov	r14, QWORD PTR bitD1$2$[rsp]
	add	rax, -3
	mov	r13d, DWORD PTR dtLog$1$[rsp]
	mov	rsi, rax
	mov	r15, QWORD PTR bitD1$7[rbp-232]
	mov	r12d, 1
$LL151@HUF_decomp:
; File E:\dev\pyzstd\lib\common\bitstream.h

; 418  :     if (bitD->bitsConsumed > (sizeof(bitD->bitContainer)*8))  /* overflow detected, like end of stream */

	cmp	edi, 64					; 00000040H
	jbe	SHORT $LN164@HUF_decomp

; 419  :         return BIT_DStream_overflow;

	mov	edx, 3
	jmp	SHORT $LN163@HUF_decomp
$LN164@HUF_decomp:

; 420  : 
; 421  :     if (bitD->ptr >= bitD->limitPtr) {

	cmp	rdx, QWORD PTR bitD1$7[rbp-224]
	jb	SHORT $LN165@HUF_decomp

; 405  :     bitD->ptr -= bitD->bitsConsumed >> 3;

	mov	eax, edi

; 406  :     bitD->bitsConsumed &= 7;

	and	edi, 7
	shr	rax, 3
	sub	rdx, rax
	mov	QWORD PTR bitD1$7[rbp-240], rdx

; 407  :     bitD->bitContainer = MEM_readLEST(bitD->ptr);

	mov	r14, QWORD PTR [rdx]

; 422  :         return BIT_reloadDStreamFast(bitD);

	xor	edx, edx
	jmp	SHORT $LN163@HUF_decomp
$LN165@HUF_decomp:

; 423  :     }
; 424  :     if (bitD->ptr == bitD->start) {

	cmp	rdx, r15
	jne	SHORT $LN166@HUF_decomp

; 425  :         if (bitD->bitsConsumed < sizeof(bitD->bitContainer)*8) return BIT_DStream_endOfBuffer;

	cmp	edi, 64					; 00000040H
	sbb	eax, eax
	lea	edx, DWORD PTR [rax+2]

; 426  :         return BIT_DStream_completed;

	jmp	SHORT $LN163@HUF_decomp
$LN166@HUF_decomp:

; 427  :     }
; 428  :     /* start < ptr < limitPtr */
; 429  :     {   U32 nbBytes = bitD->bitsConsumed >> 3;

	mov	r9d, edi

; 430  :         BIT_DStream_status result = BIT_DStream_unfinished;

	mov	DWORD PTR $T8[rbp-256], 0
	shr	r9d, 3

; 431  :         if (bitD->ptr - nbBytes < bitD->start) {

	mov	rcx, rdx
	mov	eax, r9d
	sub	rcx, rax
	cmp	rcx, r15
	jae	SHORT $LN168@HUF_decomp

; 432  :             nbBytes = (U32)(bitD->ptr - bitD->start);  /* ptr > start */

	mov	r9d, DWORD PTR bitD1$7[rbp-240]
	sub	r9d, DWORD PTR bitD1$7[rbp-232]

; 433  :             result = BIT_DStream_endOfBuffer;

	mov	DWORD PTR $T8[rbp-256], r12d
$LN168@HUF_decomp:

; 434  :         }
; 435  :         bitD->ptr -= nbBytes;

	mov	eax, r9d
	sub	rdx, rax

; 436  :         bitD->bitsConsumed -= nbBytes*8;

	imul	eax, r9d, -8				; fffffff8H
	mov	QWORD PTR bitD1$7[rbp-240], rdx

; 437  :         bitD->bitContainer = MEM_readLEST(bitD->ptr);   /* reminder : srcSize > sizeof(bitD->bitContainer), otherwise bitD->ptr == bitD->start */

	mov	r14, QWORD PTR [rdx]
	mov	edx, DWORD PTR $T8[rbp-256]

; 436  :         bitD->bitsConsumed -= nbBytes*8;

	add	edi, eax
$LN163@HUF_decomp:
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 220  :     while ((BIT_reloadDStream(bitDPtr) == BIT_DStream_unfinished) & (p < pEnd-3)) {

	xor	ecx, ecx
	cmp	r8, rsi
	setb	cl
	xor	eax, eax
	test	edx, edx
	sete	al
	test	ecx, eax
	je	$LN152@HUF_decomp
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, edi
	mov	r9d, r13d
	and	ecx, 63					; 0000003fH
	neg	r9d
	and	r9d, 63					; 0000003fH
	mov	rdx, r14
	shl	rdx, cl
	mov	ecx, r9d
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [r11+rdx*2+5]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	edi, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 221  :         HUF_DECODE_SYMBOLX1_2(p, bitDPtr);

	movzx	eax, BYTE PTR [r11+rdx*2+4]
	mov	BYTE PTR [r8], al
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, edi
	and	ecx, 63					; 0000003fH

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, r14
	shl	rdx, cl
	mov	ecx, r9d
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [r11+rdx*2+5]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	edi, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 222  :         HUF_DECODE_SYMBOLX1_1(p, bitDPtr);

	movzx	eax, BYTE PTR [r11+rdx*2+4]
	mov	BYTE PTR [r8+1], al
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, edi
	and	ecx, 63					; 0000003fH
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 222  :         HUF_DECODE_SYMBOLX1_1(p, bitDPtr);

	add	r8, 2
	mov	QWORD PTR dst$[rbp-256], r8
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, r14
	shl	rdx, cl
	mov	ecx, r9d
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 223  :         HUF_DECODE_SYMBOLX1_2(p, bitDPtr);

	mov	rcx, QWORD PTR dst$[rbp-256]

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	r8d, BYTE PTR [r11+rdx*2+5]

; 223  :         HUF_DECODE_SYMBOLX1_2(p, bitDPtr);

	movzx	eax, BYTE PTR [r11+rdx*2+4]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r8d, edi
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 225  :     }

	mov	rdx, QWORD PTR bitD1$7[rbp-240]
	mov	BYTE PTR [rcx], al
	inc	rcx
	mov	QWORD PTR dst$[rbp-256], rcx
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rax, r14
	mov	ecx, r8d
	and	ecx, 63					; 0000003fH
	shl	rax, cl
	mov	ecx, r9d
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	edi, BYTE PTR [r11+rax*2+5]

; 224  :         HUF_DECODE_SYMBOLX1_0(p, bitDPtr);

	movzx	eax, BYTE PTR [r11+rax*2+4]

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	add	edi, r8d

; 224  :         HUF_DECODE_SYMBOLX1_0(p, bitDPtr);

	mov	r8, QWORD PTR dst$[rbp-256]
	mov	BYTE PTR [r8], al
	inc	r8

; 225  :     }

	jmp	$LL151@HUF_decomp
$LN152@HUF_decomp:

; 226  : 
; 227  :     /* [0-3] symbols remaining */
; 228  :     if (MEM_32bits())
; 229  :         while ((BIT_reloadDStream(bitDPtr) == BIT_DStream_unfinished) & (p < pEnd))
; 230  :             HUF_DECODE_SYMBOLX1_0(p, bitDPtr);
; 231  : 
; 232  :     /* no more data to retrieve from bitstream, no need to reload */
; 233  :     while (p < pEnd)

	mov	r13, QWORD PTR bitD2$5[rbp-240]
	mov	QWORD PTR bitD1$2$[rsp], r14
	mov	DWORD PTR bitD1$1$[rbp-256], edi
	cmp	r8, QWORD PTR opStart2$1$[rsp]
	jae	SHORT $LN465@HUF_decomp
	mov	r9d, DWORD PTR dtLog$1$[rsp]
	mov	r15, QWORD PTR opStart2$1$[rsp]
	neg	r9d
	and	r9d, 63					; 0000003fH
	npad	10
$LL155@HUF_decomp:
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, edi
	mov	rdx, r14
	and	ecx, 63					; 0000003fH
	shl	rdx, cl
	mov	ecx, r9d
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [r11+rdx*2+5]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	edi, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 234  :         HUF_DECODE_SYMBOLX1_0(p, bitDPtr);

	movzx	eax, BYTE PTR [r11+rdx*2+4]
	mov	BYTE PTR [r8], al
	inc	r8
	cmp	r8, r15
	jb	SHORT $LL155@HUF_decomp
	mov	DWORD PTR bitD1$1$[rbp-256], edi
$LN465@HUF_decomp:
	mov	rax, QWORD PTR opStart3$1$[rsp]

; 343  :         HUF_decodeStreamX1(op2, &bitD2, opStart3, dt, dtLog);

	mov	r15d, r12d
	mov	r9, QWORD PTR p$1$[rsp]
	add	rax, -3
	mov	r14, QWORD PTR bitD2$2$[rsp]
	mov	rsi, rax
	mov	r12d, DWORD PTR dtLog$1$[rsp]
	npad	2
$LL220@HUF_decomp:
; File E:\dev\pyzstd\lib\common\bitstream.h

; 418  :     if (bitD->bitsConsumed > (sizeof(bitD->bitContainer)*8))  /* overflow detected, like end of stream */

	cmp	ebx, 64					; 00000040H
	jbe	SHORT $LN233@HUF_decomp

; 419  :         return BIT_DStream_overflow;

	mov	r8d, 3
	jmp	SHORT $LN232@HUF_decomp
$LN233@HUF_decomp:

; 420  : 
; 421  :     if (bitD->ptr >= bitD->limitPtr) {

	cmp	r13, QWORD PTR bitD2$5[rbp-224]
	jb	SHORT $LN234@HUF_decomp

; 405  :     bitD->ptr -= bitD->bitsConsumed >> 3;

	mov	eax, ebx

; 406  :     bitD->bitsConsumed &= 7;

	and	ebx, 7
	shr	rax, 3
	sub	r13, rax

; 422  :         return BIT_reloadDStreamFast(bitD);

	xor	r8d, r8d
	jmp	SHORT $LN480@HUF_decomp
$LN234@HUF_decomp:

; 423  :     }
; 424  :     if (bitD->ptr == bitD->start) {

	cmp	r13, QWORD PTR bitD2$5[rbp-232]
	jne	SHORT $LN235@HUF_decomp

; 425  :         if (bitD->bitsConsumed < sizeof(bitD->bitContainer)*8) return BIT_DStream_endOfBuffer;

	cmp	ebx, 64					; 00000040H
	sbb	r8d, r8d
	add	r8d, 2

; 426  :         return BIT_DStream_completed;

	jmp	SHORT $LN232@HUF_decomp
$LN235@HUF_decomp:

; 427  :     }
; 428  :     /* start < ptr < limitPtr */
; 429  :     {   U32 nbBytes = bitD->bitsConsumed >> 3;

	mov	edx, ebx

; 431  :         if (bitD->ptr - nbBytes < bitD->start) {

	mov	rcx, r13
	shr	edx, 3
	xor	r8d, r8d
	mov	eax, edx
	sub	rcx, rax
	cmp	rcx, QWORD PTR bitD2$5[rbp-232]
	jae	SHORT $LN237@HUF_decomp

; 432  :             nbBytes = (U32)(bitD->ptr - bitD->start);  /* ptr > start */

	mov	edx, DWORD PTR bitD2$5[rbp-240]

; 433  :             result = BIT_DStream_endOfBuffer;

	mov	r8d, r15d
	sub	edx, DWORD PTR bitD2$5[rbp-232]
$LN237@HUF_decomp:

; 434  :         }
; 435  :         bitD->ptr -= nbBytes;

	mov	eax, edx
	sub	r13, rax

; 436  :         bitD->bitsConsumed -= nbBytes*8;

	imul	eax, edx, -8				; fffffff8H
	add	ebx, eax
$LN480@HUF_decomp:
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 220  :     while ((BIT_reloadDStream(bitDPtr) == BIT_DStream_unfinished) & (p < pEnd-3)) {

	mov	r14, QWORD PTR [r13]
	mov	QWORD PTR bitD2$5[rbp-240], r13
$LN232@HUF_decomp:
	xor	ecx, ecx
	cmp	r9, rsi
	setb	cl
	xor	eax, eax
	test	r8d, r8d
	sete	al
	test	ecx, eax
	je	$LN221@HUF_decomp

; 221  :         HUF_DECODE_SYMBOLX1_2(p, bitDPtr);

	mov	r8, QWORD PTR p$1$[rsp]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, ebx
	and	ecx, 63					; 0000003fH
	mov	r9d, r12d
	neg	r9d
	mov	rdx, r14
	shl	rdx, cl
	and	r9d, 63					; 0000003fH
	mov	ecx, r9d
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [r11+rdx*2+5]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	ebx, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 221  :         HUF_DECODE_SYMBOLX1_2(p, bitDPtr);

	movzx	eax, BYTE PTR [r11+rdx*2+4]
	mov	BYTE PTR [r8], al
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, ebx
	and	ecx, 63					; 0000003fH

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, r14
	shl	rdx, cl
	mov	ecx, r9d
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [r11+rdx*2+5]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	ebx, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 222  :         HUF_DECODE_SYMBOLX1_1(p, bitDPtr);

	movzx	eax, BYTE PTR [r11+rdx*2+4]
	mov	BYTE PTR [r8+1], al
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, ebx
	and	ecx, 63					; 0000003fH
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 222  :         HUF_DECODE_SYMBOLX1_1(p, bitDPtr);

	add	r8, 2
	mov	QWORD PTR p$1$[rsp], r8
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, r14
	shl	rdx, cl
	mov	ecx, r9d
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 223  :         HUF_DECODE_SYMBOLX1_2(p, bitDPtr);

	mov	rcx, QWORD PTR p$1$[rsp]
	movzx	eax, BYTE PTR [r11+rdx*2+4]

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	r8d, BYTE PTR [r11+rdx*2+5]

; 223  :         HUF_DECODE_SYMBOLX1_2(p, bitDPtr);

	mov	BYTE PTR [rcx], al
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r8d, ebx
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 223  :         HUF_DECODE_SYMBOLX1_2(p, bitDPtr);

	inc	rcx
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rax, r14
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 223  :         HUF_DECODE_SYMBOLX1_2(p, bitDPtr);

	mov	QWORD PTR p$1$[rsp], rcx
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, r8d
	and	ecx, 63					; 0000003fH

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	shl	rax, cl
	mov	ecx, r9d
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 224  :         HUF_DECODE_SYMBOLX1_0(p, bitDPtr);

	mov	r9, QWORD PTR p$1$[rsp]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	ebx, BYTE PTR [r11+rax*2+5]

; 224  :         HUF_DECODE_SYMBOLX1_0(p, bitDPtr);

	movzx	eax, BYTE PTR [r11+rax*2+4]

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	add	ebx, r8d

; 224  :         HUF_DECODE_SYMBOLX1_0(p, bitDPtr);

	mov	BYTE PTR [r9], al
	inc	r9
	mov	QWORD PTR p$1$[rsp], r9

; 225  :     }

	jmp	$LL220@HUF_decomp
$LN221@HUF_decomp:

; 226  : 
; 227  :     /* [0-3] symbols remaining */
; 228  :     if (MEM_32bits())
; 229  :         while ((BIT_reloadDStream(bitDPtr) == BIT_DStream_unfinished) & (p < pEnd))
; 230  :             HUF_DECODE_SYMBOLX1_0(p, bitDPtr);
; 231  : 
; 232  :     /* no more data to retrieve from bitstream, no need to reload */
; 233  :     while (p < pEnd)

	mov	r15, QWORD PTR bitD3$6[rbp-240]
	mov	QWORD PTR bitD2$2$[rsp], r14
	mov	DWORD PTR bitD2$1$[rsp], ebx
	cmp	r9, QWORD PTR opStart3$1$[rsp]
	jae	SHORT $LN466@HUF_decomp
	mov	rdi, QWORD PTR opStart3$1$[rsp]
	mov	r8d, r12d
	neg	r8d
	and	r8d, 63					; 0000003fH
	npad	12
$LL224@HUF_decomp:
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, ebx
	mov	rdx, r14
	and	ecx, 63					; 0000003fH
	shl	rdx, cl
	mov	ecx, r8d
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [r11+rdx*2+5]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	ebx, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 234  :         HUF_DECODE_SYMBOLX1_0(p, bitDPtr);

	movzx	eax, BYTE PTR [r11+rdx*2+4]
	mov	BYTE PTR [r9], al
	inc	r9
	cmp	r9, rdi
	jb	SHORT $LL224@HUF_decomp
	mov	DWORD PTR bitD2$1$[rsp], ebx
$LN466@HUF_decomp:
	mov	rax, QWORD PTR opStart4$1$[rbp-256]

; 344  :         HUF_decodeStreamX1(op3, &bitD3, opStart4, dt, dtLog);

	mov	r13d, 1
	mov	r14, QWORD PTR p$1$[rsp]
	add	rax, -3
	mov	r12, QWORD PTR bitD3$2$[rsp]
	mov	rsi, rax
	mov	edi, DWORD PTR dtLog$1$[rsp]
$LN482@HUF_decomp:
; File E:\dev\pyzstd\lib\common\bitstream.h

; 418  :     if (bitD->bitsConsumed > (sizeof(bitD->bitContainer)*8))  /* overflow detected, like end of stream */

	mov	r9, QWORD PTR bitD3$6[rbp-232]
	cmp	r10d, 64				; 00000040H
	jbe	SHORT $LN302@HUF_decomp

; 419  :         return BIT_DStream_overflow;

	mov	r8d, 3
	jmp	SHORT $LN301@HUF_decomp
$LN302@HUF_decomp:

; 420  : 
; 421  :     if (bitD->ptr >= bitD->limitPtr) {

	cmp	r15, QWORD PTR bitD3$6[rbp-224]
	jb	SHORT $LN303@HUF_decomp

; 405  :     bitD->ptr -= bitD->bitsConsumed >> 3;

	mov	eax, r10d

; 406  :     bitD->bitsConsumed &= 7;

	and	r10d, 7
	shr	rax, 3
	sub	r15, rax

; 422  :         return BIT_reloadDStreamFast(bitD);

	xor	r8d, r8d
	jmp	SHORT $LN481@HUF_decomp
$LN303@HUF_decomp:

; 423  :     }
; 424  :     if (bitD->ptr == bitD->start) {

	cmp	r15, r9
	jne	SHORT $LN304@HUF_decomp

; 425  :         if (bitD->bitsConsumed < sizeof(bitD->bitContainer)*8) return BIT_DStream_endOfBuffer;

	cmp	r10d, 64				; 00000040H
	sbb	r8d, r8d
	add	r8d, 2

; 426  :         return BIT_DStream_completed;

	jmp	SHORT $LN301@HUF_decomp
$LN304@HUF_decomp:

; 427  :     }
; 428  :     /* start < ptr < limitPtr */
; 429  :     {   U32 nbBytes = bitD->bitsConsumed >> 3;

	mov	edx, r10d

; 431  :         if (bitD->ptr - nbBytes < bitD->start) {

	mov	rcx, r15
	shr	edx, 3
	xor	r8d, r8d
	mov	eax, edx
	sub	rcx, rax
	cmp	rcx, r9
	jae	SHORT $LN306@HUF_decomp

; 432  :             nbBytes = (U32)(bitD->ptr - bitD->start);  /* ptr > start */

	mov	edx, DWORD PTR bitD3$6[rbp-240]

; 433  :             result = BIT_DStream_endOfBuffer;

	mov	r8d, r13d
	sub	edx, DWORD PTR bitD3$6[rbp-232]
$LN306@HUF_decomp:

; 434  :         }
; 435  :         bitD->ptr -= nbBytes;

	mov	eax, edx
	sub	r15, rax

; 436  :         bitD->bitsConsumed -= nbBytes*8;

	imul	eax, edx, -8				; fffffff8H
	add	r10d, eax
$LN481@HUF_decomp:
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 220  :     while ((BIT_reloadDStream(bitDPtr) == BIT_DStream_unfinished) & (p < pEnd-3)) {

	mov	r12, QWORD PTR [r15]
	mov	QWORD PTR bitD3$6[rbp-240], r15
$LN301@HUF_decomp:
	xor	ecx, ecx
	cmp	r14, rsi
	setb	cl
	xor	eax, eax
	test	r8d, r8d
	sete	al
	test	ecx, eax
	je	$LN290@HUF_decomp
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, r10d
	mov	r9d, edi
	and	ecx, 63					; 0000003fH
	neg	r9d
	and	r9d, 63					; 0000003fH
	mov	rdx, r12
	shl	rdx, cl
	mov	ecx, r9d
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [r11+rdx*2+5]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r10d, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 221  :         HUF_DECODE_SYMBOLX1_2(p, bitDPtr);

	movzx	eax, BYTE PTR [r11+rdx*2+4]
	mov	BYTE PTR [r14], al
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, r10d
	and	ecx, 63					; 0000003fH

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, r12
	shl	rdx, cl
	mov	ecx, r9d
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [r11+rdx*2+5]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r10d, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 222  :         HUF_DECODE_SYMBOLX1_1(p, bitDPtr);

	movzx	eax, BYTE PTR [r11+rdx*2+4]
	mov	BYTE PTR [r14+1], al
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, r10d
	and	ecx, 63					; 0000003fH

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, r12
	shl	rdx, cl
	mov	ecx, r9d
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	r8d, BYTE PTR [r11+rdx*2+5]

; 223  :         HUF_DECODE_SYMBOLX1_2(p, bitDPtr);

	movzx	eax, BYTE PTR [r11+rdx*2+4]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r8d, r10d
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 223  :         HUF_DECODE_SYMBOLX1_2(p, bitDPtr);

	mov	BYTE PTR [r14+2], al
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, r8d
	and	ecx, 63					; 0000003fH

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rax, r12
	shl	rax, cl
	mov	ecx, r9d
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	r10d, BYTE PTR [r11+rax*2+5]

; 224  :         HUF_DECODE_SYMBOLX1_0(p, bitDPtr);

	movzx	eax, BYTE PTR [r11+rax*2+4]

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	add	r10d, r8d

; 224  :         HUF_DECODE_SYMBOLX1_0(p, bitDPtr);

	mov	BYTE PTR [r14+3], al
	add	r14, 4

; 225  :     }

	jmp	$LN482@HUF_decomp
$LN290@HUF_decomp:

; 226  : 
; 227  :     /* [0-3] symbols remaining */
; 228  :     if (MEM_32bits())
; 229  :         while ((BIT_reloadDStream(bitDPtr) == BIT_DStream_unfinished) & (p < pEnd))
; 230  :             HUF_DECODE_SYMBOLX1_0(p, bitDPtr);
; 231  : 
; 232  :     /* no more data to retrieve from bitstream, no need to reload */
; 233  :     while (p < pEnd)

	mov	r9, QWORD PTR opStart4$1$[rbp-256]
	mov	esi, DWORD PTR bitD4$1$[rsp]
	cmp	r14, r9
	mov	QWORD PTR bitD3$2$[rsp], r12
	mov	r12, QWORD PTR p$1$[rsp]
	mov	QWORD PTR p$1$[rsp], r14
	mov	r14, QWORD PTR bitD4$4[rbp-240]
	jae	SHORT $LN467@HUF_decomp
	mov	r14, QWORD PTR p$1$[rsp]
	mov	r8d, edi
	mov	r12, QWORD PTR bitD3$2$[rsp]
	neg	r8d
	and	r8d, 63					; 0000003fH
	npad	3
$LL293@HUF_decomp:
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, r10d
	mov	rdx, r12
	and	ecx, 63					; 0000003fH
	shl	rdx, cl
	mov	ecx, r8d
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [r11+rdx*2+5]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r10d, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 234  :         HUF_DECODE_SYMBOLX1_0(p, bitDPtr);

	movzx	eax, BYTE PTR [r11+rdx*2+4]
	mov	BYTE PTR [r14], al
	inc	r14
	cmp	r14, r9
	jb	SHORT $LL293@HUF_decomp
	mov	r14, QWORD PTR bitD4$4[rbp-240]
	mov	r12, QWORD PTR p$1$[rsp]
$LN467@HUF_decomp:
	mov	r13, QWORD PTR bitD4$2$[rsp]

; 345  :         HUF_decodeStreamX1(op4, &bitD4, oend,     dt, dtLog);

	mov	r15d, 1
	mov	rbx, QWORD PTR tv2894[rbp-256]
$LN484@HUF_decomp:
; File E:\dev\pyzstd\lib\common\bitstream.h

; 418  :     if (bitD->bitsConsumed > (sizeof(bitD->bitContainer)*8))  /* overflow detected, like end of stream */

	mov	r9, QWORD PTR bitD4$4[rbp-232]
	cmp	esi, 64					; 00000040H
	jbe	SHORT $LN371@HUF_decomp

; 419  :         return BIT_DStream_overflow;

	mov	r8d, 3
	jmp	SHORT $LN370@HUF_decomp
$LN371@HUF_decomp:

; 420  : 
; 421  :     if (bitD->ptr >= bitD->limitPtr) {

	cmp	r14, QWORD PTR bitD4$4[rbp-224]
	jb	SHORT $LN372@HUF_decomp

; 405  :     bitD->ptr -= bitD->bitsConsumed >> 3;

	mov	eax, esi

; 406  :     bitD->bitsConsumed &= 7;

	and	esi, 7
	shr	rax, 3
	sub	r14, rax

; 422  :         return BIT_reloadDStreamFast(bitD);

	xor	r8d, r8d
	jmp	SHORT $LN483@HUF_decomp
$LN372@HUF_decomp:

; 423  :     }
; 424  :     if (bitD->ptr == bitD->start) {

	cmp	r14, r9
	jne	SHORT $LN373@HUF_decomp

; 425  :         if (bitD->bitsConsumed < sizeof(bitD->bitContainer)*8) return BIT_DStream_endOfBuffer;

	cmp	esi, 64					; 00000040H
	sbb	r8d, r8d
	add	r8d, 2

; 426  :         return BIT_DStream_completed;

	jmp	SHORT $LN370@HUF_decomp
$LN373@HUF_decomp:

; 427  :     }
; 428  :     /* start < ptr < limitPtr */
; 429  :     {   U32 nbBytes = bitD->bitsConsumed >> 3;

	mov	edx, esi

; 431  :         if (bitD->ptr - nbBytes < bitD->start) {

	mov	rcx, r14
	shr	edx, 3
	xor	r8d, r8d
	mov	eax, edx
	sub	rcx, rax
	cmp	rcx, r9
	jae	SHORT $LN375@HUF_decomp

; 432  :             nbBytes = (U32)(bitD->ptr - bitD->start);  /* ptr > start */

	mov	edx, DWORD PTR bitD4$4[rbp-240]

; 433  :             result = BIT_DStream_endOfBuffer;

	mov	r8d, r15d
	sub	edx, DWORD PTR bitD4$4[rbp-232]
$LN375@HUF_decomp:

; 434  :         }
; 435  :         bitD->ptr -= nbBytes;

	mov	eax, edx
	sub	r14, rax

; 436  :         bitD->bitsConsumed -= nbBytes*8;

	imul	eax, edx, -8				; fffffff8H
	add	esi, eax
$LN483@HUF_decomp:
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 220  :     while ((BIT_reloadDStream(bitDPtr) == BIT_DStream_unfinished) & (p < pEnd-3)) {

	mov	r13, QWORD PTR [r14]
	mov	QWORD PTR bitD4$4[rbp-240], r14
$LN370@HUF_decomp:
	xor	ecx, ecx
	cmp	r12, rbx
	setb	cl
	xor	eax, eax
	test	r8d, r8d
	sete	al
	test	ecx, eax
	je	$LN359@HUF_decomp
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, esi
	mov	r9d, edi
	and	ecx, 63					; 0000003fH
	neg	r9d
	and	r9d, 63					; 0000003fH
	mov	rdx, r13
	shl	rdx, cl
	mov	ecx, r9d
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [r11+rdx*2+5]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	esi, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 221  :         HUF_DECODE_SYMBOLX1_2(p, bitDPtr);

	movzx	eax, BYTE PTR [r11+rdx*2+4]
	mov	BYTE PTR [r12], al
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, esi
	and	ecx, 63					; 0000003fH

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, r13
	shl	rdx, cl
	mov	ecx, r9d
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [r11+rdx*2+5]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	esi, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 222  :         HUF_DECODE_SYMBOLX1_1(p, bitDPtr);

	movzx	eax, BYTE PTR [r11+rdx*2+4]
	mov	BYTE PTR [r12+1], al
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, esi
	and	ecx, 63					; 0000003fH

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, r13
	shl	rdx, cl
	mov	ecx, r9d
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	r8d, BYTE PTR [r11+rdx*2+5]

; 223  :         HUF_DECODE_SYMBOLX1_2(p, bitDPtr);

	movzx	eax, BYTE PTR [r11+rdx*2+4]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r8d, esi
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 223  :         HUF_DECODE_SYMBOLX1_2(p, bitDPtr);

	mov	BYTE PTR [r12+2], al
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, r8d
	and	ecx, 63					; 0000003fH

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rax, r13
	shl	rax, cl
	mov	ecx, r9d
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	esi, BYTE PTR [r11+rax*2+5]

; 224  :         HUF_DECODE_SYMBOLX1_0(p, bitDPtr);

	movzx	eax, BYTE PTR [r11+rax*2+4]

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	add	esi, r8d

; 224  :         HUF_DECODE_SYMBOLX1_0(p, bitDPtr);

	mov	BYTE PTR [r12+3], al
	add	r12, 4

; 225  :     }

	jmp	$LN484@HUF_decomp
$LN359@HUF_decomp:

; 226  : 
; 227  :     /* [0-3] symbols remaining */
; 228  :     if (MEM_32bits())
; 229  :         while ((BIT_reloadDStream(bitDPtr) == BIT_DStream_unfinished) & (p < pEnd))
; 230  :             HUF_DECODE_SYMBOLX1_0(p, bitDPtr);
; 231  : 
; 232  :     /* no more data to retrieve from bitstream, no need to reload */
; 233  :     while (p < pEnd)

	mov	ebx, DWORD PTR bitD2$1$[rsp]
	mov	edi, DWORD PTR bitD1$1$[rbp-256]
	mov	r15, QWORD PTR bitD3$6[rbp-240]
	mov	QWORD PTR bitD4$2$[rsp], r13
	mov	r13, QWORD PTR bitD2$5[rbp-240]
	cmp	r12, QWORD PTR oend$1$[rbp-256]
	jae	SHORT $LN363@HUF_decomp
	mov	r8d, DWORD PTR dtLog$1$[rsp]
	mov	r13, QWORD PTR bitD4$2$[rsp]
	neg	r8d
	mov	r9, QWORD PTR oend$1$[rbp-256]
	and	r8d, 63					; 0000003fH
	npad	5
$LL362@HUF_decomp:
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, esi
	mov	rdx, r13
	and	ecx, 63					; 0000003fH
	shl	rdx, cl
	mov	ecx, r8d
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [r11+rdx*2+5]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	esi, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 234  :         HUF_DECODE_SYMBOLX1_0(p, bitDPtr);

	movzx	eax, BYTE PTR [r11+rdx*2+4]
	mov	BYTE PTR [r12], al
	inc	r12
	cmp	r12, r9
	jb	SHORT $LL362@HUF_decomp
	mov	r13, QWORD PTR bitD2$5[rbp-240]
	mov	r9, QWORD PTR bitD4$4[rbp-232]
$LN363@HUF_decomp:
; File E:\dev\pyzstd\lib\common\bitstream.h

; 447  :     return ((DStream->ptr == DStream->start) && (DStream->bitsConsumed == sizeof(DStream->bitContainer)*8));

	mov	rax, QWORD PTR bitD1$7[rbp-232]
	cmp	QWORD PTR bitD1$7[rbp-240], rax
	jne	SHORT $LN428@HUF_decomp
	cmp	edi, 64					; 00000040H
	jne	SHORT $LN428@HUF_decomp
	mov	eax, 1
	mov	r8d, eax
	jmp	SHORT $LN429@HUF_decomp
$LN428@HUF_decomp:
	xor	r8d, r8d
	lea	eax, QWORD PTR [r8+1]
$LN429@HUF_decomp:
	cmp	r13, QWORD PTR bitD2$5[rbp-232]
	jne	SHORT $LN432@HUF_decomp
	cmp	ebx, 64					; 00000040H
	jne	SHORT $LN432@HUF_decomp
	mov	edx, eax
	jmp	SHORT $LN433@HUF_decomp
$LN432@HUF_decomp:
	xor	edx, edx
$LN433@HUF_decomp:
	cmp	r15, QWORD PTR bitD3$6[rbp-232]
	jne	SHORT $LN436@HUF_decomp
	cmp	r10d, 64				; 00000040H
	jne	SHORT $LN436@HUF_decomp
	mov	ecx, eax
	jmp	SHORT $LN437@HUF_decomp
$LN436@HUF_decomp:
	xor	ecx, ecx
$LN437@HUF_decomp:
	cmp	r14, r9
	jne	SHORT $LN440@HUF_decomp
	cmp	esi, 64					; 00000040H
	je	SHORT $LN441@HUF_decomp
$LN440@HUF_decomp:
	xor	eax, eax
$LN441@HUF_decomp:
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 348  :         { U32 const endCheck = BIT_endOfDStream(&bitD1) & BIT_endOfDStream(&bitD2) & BIT_endOfDStream(&bitD3) & BIT_endOfDStream(&bitD4);

	and	eax, ecx
	and	eax, edx
	test	eax, r8d

; 350  : 
; 351  :         /* decoded size */
; 352  :         return dstSize;

	mov	rax, QWORD PTR dstSize$[rbp-256]
	jne	SHORT $LN1@HUF_decomp
$LN477@HUF_decomp:

; 349  :           if (!endCheck) return ERROR(corruption_detected); }

	mov	rax, -20
$LN1@HUF_decomp:

; 353  :     }
; 354  : }

	mov	rbx, QWORD PTR [rsp+384]
	add	rsp, 304				; 00000130H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
HUF_decompress4X1_usingDTable_internal_body ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\error_private.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
_TEXT	SEGMENT
bitD$1 = 32
oend$1$ = 144
dst$ = 144
dstSize$ = 152
cSrc$ = 160
cSrcSize$ = 168
tv620 = 176
DTable$ = 176
bmi2$dead$ = 184
HUF_decompress1X1_usingDTable_internal PROC

; 362  : HUF_DGEN(HUF_decompress1X1_usingDTable_internal)

	mov	QWORD PTR [rsp+16], rdx
	push	rbx
	push	rbp
	push	r14
	push	r15
	sub	rsp, 104				; 00000068H

; 247  :     const void* dtPtr = DTable + 1;

	mov	rax, QWORD PTR DTable$[rsp]
	lea	r14, QWORD PTR [rcx+rdx]

; 362  : HUF_DGEN(HUF_decompress1X1_usingDTable_internal)

	mov	r10, r8

; 246  :     BYTE* const oend = op + dstSize;

	mov	QWORD PTR oend$1$[rsp], r14

; 362  : HUF_DGEN(HUF_decompress1X1_usingDTable_internal)

	mov	rbx, rcx

; 253  :     CHECK_F( BIT_initDStream(&bitD, cSrc, cSrcSize) );

	mov	r8, r9
	lea	rcx, QWORD PTR bitD$1[rsp]
	mov	edx, DWORD PTR [rax]
	lea	r15, QWORD PTR [rax+4]
	shr	edx, 16
	movzx	ebp, dl
	mov	rdx, r10
	call	BIT_initDStream
; File E:\dev\pyzstd\lib\common\error_private.h

; 56   : ERR_STATIC unsigned ERR_isError(size_t code) { return (code > ERROR(maxCode)); }

	cmp	rax, -120				; ffffffffffffff88H
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 253  :     CHECK_F( BIT_initDStream(&bitD, cSrc, cSrcSize) );

	ja	$LN3@HUF_decomp

; 254  : 
; 255  :     HUF_decodeStreamX1(op, &bitD, oend, dt, dtLog);

	mov	r11, QWORD PTR bitD$1[rsp+16]
	lea	rax, QWORD PTR [r14-3]
	mov	r10d, DWORD PTR bitD$1[rsp+8]
	mov	r14, rax
	mov	QWORD PTR [rsp+160], rsi
	mov	rsi, QWORD PTR bitD$1[rsp+24]
	mov	QWORD PTR [rsp+96], rdi
	mov	rdi, QWORD PTR bitD$1[rsp]
	mov	QWORD PTR [rsp+88], r12
	mov	r12, QWORD PTR bitD$1[rsp+32]
	mov	QWORD PTR [rsp+80], r13
	mov	r13d, esi
	npad	7
$LL12@HUF_decomp:
; File E:\dev\pyzstd\lib\common\bitstream.h

; 418  :     if (bitD->bitsConsumed > (sizeof(bitD->bitContainer)*8))  /* overflow detected, like end of stream */

	cmp	r10d, 64				; 00000040H
	jbe	SHORT $LN25@HUF_decomp

; 419  :         return BIT_DStream_overflow;

	mov	r8d, 3
	jmp	SHORT $LN24@HUF_decomp
$LN25@HUF_decomp:

; 420  : 
; 421  :     if (bitD->ptr >= bitD->limitPtr) {

	cmp	r11, r12
	jb	SHORT $LN26@HUF_decomp

; 405  :     bitD->ptr -= bitD->bitsConsumed >> 3;

	mov	eax, r10d

; 406  :     bitD->bitsConsumed &= 7;

	and	r10d, 7
	shr	rax, 3
	sub	r11, rax

; 422  :         return BIT_reloadDStreamFast(bitD);

	xor	r8d, r8d
	jmp	SHORT $LN92@HUF_decomp
$LN26@HUF_decomp:

; 423  :     }
; 424  :     if (bitD->ptr == bitD->start) {

	cmp	r11, rsi
	jne	SHORT $LN27@HUF_decomp

; 425  :         if (bitD->bitsConsumed < sizeof(bitD->bitContainer)*8) return BIT_DStream_endOfBuffer;

	cmp	r10d, 64				; 00000040H
	sbb	r8d, r8d
	add	r8d, 2

; 426  :         return BIT_DStream_completed;

	jmp	SHORT $LN24@HUF_decomp
$LN27@HUF_decomp:

; 427  :     }
; 428  :     /* start < ptr < limitPtr */
; 429  :     {   U32 nbBytes = bitD->bitsConsumed >> 3;

	mov	eax, r10d

; 430  :         BIT_DStream_status result = BIT_DStream_unfinished;
; 431  :         if (bitD->ptr - nbBytes < bitD->start) {

	mov	rdx, r11
	shr	eax, 3
	xor	r8d, r8d
	mov	ecx, eax
	sub	rdx, rcx
	cmp	rdx, rsi
	jae	SHORT $LN29@HUF_decomp

; 432  :             nbBytes = (U32)(bitD->ptr - bitD->start);  /* ptr > start */

	mov	eax, DWORD PTR bitD$1[rsp+16]

; 433  :             result = BIT_DStream_endOfBuffer;

	mov	r8d, 1
	sub	eax, r13d
$LN29@HUF_decomp:

; 434  :         }
; 435  :         bitD->ptr -= nbBytes;

	mov	ecx, eax
	sub	r11, rcx

; 436  :         bitD->bitsConsumed -= nbBytes*8;

	imul	ecx, eax, -8				; fffffff8H
	add	r10d, ecx
$LN92@HUF_decomp:
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 220  :     while ((BIT_reloadDStream(bitDPtr) == BIT_DStream_unfinished) & (p < pEnd-3)) {

	mov	rdi, QWORD PTR [r11]
	mov	QWORD PTR bitD$1[rsp+16], r11
$LN24@HUF_decomp:
	xor	ecx, ecx
	cmp	rbx, r14
	setb	cl
	xor	eax, eax
	test	r8d, r8d
	sete	al
	test	ecx, eax
	je	$LN13@HUF_decomp
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, r10d
	mov	r9d, ebp
	and	ecx, 63					; 0000003fH
	neg	r9d
	and	r9d, 63					; 0000003fH
	mov	rdx, rdi
	shl	rdx, cl
	mov	ecx, r9d
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [r15+rdx*2+1]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r10d, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 221  :         HUF_DECODE_SYMBOLX1_2(p, bitDPtr);

	movzx	eax, BYTE PTR [r15+rdx*2]
	mov	BYTE PTR [rbx], al
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, r10d
	and	ecx, 63					; 0000003fH

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, rdi
	shl	rdx, cl
	mov	ecx, r9d
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [r15+rdx*2+1]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r10d, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 222  :         HUF_DECODE_SYMBOLX1_1(p, bitDPtr);

	movzx	eax, BYTE PTR [r15+rdx*2]
	mov	BYTE PTR [rbx+1], al
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, r10d
	and	ecx, 63					; 0000003fH

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, rdi
	shl	rdx, cl
	mov	ecx, r9d
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	r8d, BYTE PTR [r15+rdx*2+1]

; 223  :         HUF_DECODE_SYMBOLX1_2(p, bitDPtr);

	movzx	eax, BYTE PTR [r15+rdx*2]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r8d, r10d
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 223  :         HUF_DECODE_SYMBOLX1_2(p, bitDPtr);

	mov	BYTE PTR [rbx+2], al
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, r8d
	and	ecx, 63					; 0000003fH

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rax, rdi
	shl	rax, cl
	mov	ecx, r9d
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	r10d, BYTE PTR [r15+rax*2+1]

; 224  :         HUF_DECODE_SYMBOLX1_0(p, bitDPtr);

	movzx	eax, BYTE PTR [r15+rax*2]

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	add	r10d, r8d

; 224  :         HUF_DECODE_SYMBOLX1_0(p, bitDPtr);

	mov	BYTE PTR [rbx+3], al
	add	rbx, 4

; 225  :     }

	jmp	$LL12@HUF_decomp
$LN13@HUF_decomp:

; 226  : 
; 227  :     /* [0-3] symbols remaining */
; 228  :     if (MEM_32bits())
; 229  :         while ((BIT_reloadDStream(bitDPtr) == BIT_DStream_unfinished) & (p < pEnd))
; 230  :             HUF_DECODE_SYMBOLX1_0(p, bitDPtr);
; 231  : 
; 232  :     /* no more data to retrieve from bitstream, no need to reload */
; 233  :     while (p < pEnd)

	mov	r14, QWORD PTR oend$1$[rsp]
	mov	r13, QWORD PTR [rsp+80]
	mov	r12, QWORD PTR [rsp+88]
	cmp	rbx, r14
	jae	SHORT $LN17@HUF_decomp
	neg	ebp
	and	ebp, 63					; 0000003fH
$LL16@HUF_decomp:
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, r10d
	mov	rdx, rdi
	and	ecx, 63					; 0000003fH
	shl	rdx, cl
	mov	ecx, ebp
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [r15+rdx*2+1]

; 234  :         HUF_DECODE_SYMBOLX1_0(p, bitDPtr);

	movzx	ecx, BYTE PTR [r15+rdx*2]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r10d, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 234  :         HUF_DECODE_SYMBOLX1_0(p, bitDPtr);

	mov	BYTE PTR [rbx], cl
	inc	rbx
	cmp	rbx, r14
	jb	SHORT $LL16@HUF_decomp
$LN17@HUF_decomp:
	mov	rdi, QWORD PTR [rsp+96]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 447  :     return ((DStream->ptr == DStream->start) && (DStream->bitsConsumed == sizeof(DStream->bitContainer)*8));

	cmp	r11, rsi
	mov	rsi, QWORD PTR [rsp+160]
	jne	SHORT $LN82@HUF_decomp
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 362  : HUF_DGEN(HUF_decompress1X1_usingDTable_internal)

	mov	rax, QWORD PTR dstSize$[rsp]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 447  :     return ((DStream->ptr == DStream->start) && (DStream->bitsConsumed == sizeof(DStream->bitContainer)*8));

	cmp	r10d, 64				; 00000040H
	je	SHORT $LN3@HUF_decomp
$LN82@HUF_decomp:
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 362  : HUF_DGEN(HUF_decompress1X1_usingDTable_internal)

	mov	rax, -20
$LN3@HUF_decomp:
	add	rsp, 104				; 00000068H
	pop	r15
	pop	r14
	pop	rbp
	pop	rbx
	ret	0
HUF_decompress1X1_usingDTable_internal ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\error_private.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\error_private.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\error_private.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\error_private.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
_TEXT	SEGMENT
p$1$ = 32
endSignal$2$ = 40
dtLog$1$ = 44
opStart4$1$ = 48
oend$1$ = 56
bitD1$1 = 64
bitD2$2 = 104
bitD3$3 = 144
length3$1$ = 184
istart3$1$ = 192
opStart2$1$ = 200
opStart3$1$ = 208
bitD4$4 = 216
length1$1$ = 256
length2$1$ = 264
istart2$1$ = 272
dst$ = 352
dstSize$ = 360
cSrc$ = 368
p$1$ = 376
tv2560 = 376
cSrcSize$ = 376
DTable$ = 384
tv2607 = 392
bmi2$dead$ = 392
HUF_decompress4X1_usingDTable_internal PROC

; 363  : HUF_DGEN(HUF_decompress4X1_usingDTable_internal)

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rbx
	push	rdi
	push	r12
	push	r14
	lea	rbp, QWORD PTR [rsp-48]
	sub	rsp, 304				; 00000130H
	mov	rdi, r9
	mov	rbx, r8
	mov	r14, rdx
	mov	r12, rcx

; 269  :     if (cSrcSize < 10) return ERROR(corruption_detected);  /* strict minimum : jump table + 1 byte per stream */

	cmp	r9, 10
	jae	SHORT $LN7@HUF_decomp
	mov	rax, -20

; 363  : HUF_DGEN(HUF_decompress4X1_usingDTable_internal)

	add	rsp, 304				; 00000130H
	pop	r14
	pop	r12
	pop	rdi
	pop	rbx
	pop	rbp
	ret	0
$LN7@HUF_decomp:
	mov	QWORD PTR [rsp+352], rsi

; 273  :         BYTE* const oend = ostart + dstSize;

	lea	rax, QWORD PTR [rcx+rdx]

; 274  :         BYTE* const olimit = oend - 3;
; 275  :         const void* const dtPtr = DTable + 1;

	mov	rsi, QWORD PTR DTable$[rbp-256]

; 276  :         const HUF_DEltX1* const dt = (const HUF_DEltX1*)dtPtr;
; 277  : 
; 278  :         /* Init */
; 279  :         BIT_DStream_t bitD1;
; 280  :         BIT_DStream_t bitD2;
; 281  :         BIT_DStream_t bitD3;
; 282  :         BIT_DStream_t bitD4;
; 283  :         size_t const length1 = MEM_readLE16(istart);

	mov	rcx, rbx
	mov	QWORD PTR [rsp+296], r13
	mov	QWORD PTR [rsp+288], r15

; 270  : 
; 271  :     {   const BYTE* const istart = (const BYTE*) cSrc;
; 272  :         BYTE* const ostart = (BYTE*) dst;
; 273  :         BYTE* const oend = ostart + dstSize;

	mov	QWORD PTR oend$1$[rsp], rax

; 276  :         const HUF_DEltX1* const dt = (const HUF_DEltX1*)dtPtr;
; 277  : 
; 278  :         /* Init */
; 279  :         BIT_DStream_t bitD1;
; 280  :         BIT_DStream_t bitD2;
; 281  :         BIT_DStream_t bitD3;
; 282  :         BIT_DStream_t bitD4;
; 283  :         size_t const length1 = MEM_readLE16(istart);

	call	MEM_readLE16
	movzx	r15d, ax

; 284  :         size_t const length2 = MEM_readLE16(istart+2);

	lea	rcx, QWORD PTR [rbx+2]
	mov	QWORD PTR length1$1$[rbp-256], r15
	call	MEM_readLE16
	movzx	r13d, ax

; 285  :         size_t const length3 = MEM_readLE16(istart+4);

	lea	rcx, QWORD PTR [rbx+4]
	mov	QWORD PTR length2$1$[rbp-256], r13
	call	MEM_readLE16
	movzx	eax, ax

; 286  :         size_t const length4 = cSrcSize - (length1 + length2 + length3 + 6);
; 287  :         const BYTE* const istart1 = istart + 6;  /* jumpTable */

	lea	rdx, QWORD PTR [rbx+6]
	sub	rdi, rax
	mov	QWORD PTR length3$1$[rbp-256], rax
	sub	rdi, r13

; 288  :         const BYTE* const istart2 = istart1 + length1;
; 289  :         const BYTE* const istart3 = istart2 + length2;
; 290  :         const BYTE* const istart4 = istart3 + length3;
; 291  :         const size_t segmentSize = (dstSize+3) / 4;
; 292  :         BYTE* const opStart2 = ostart + segmentSize;
; 293  :         BYTE* const opStart3 = opStart2 + segmentSize;
; 294  :         BYTE* const opStart4 = opStart3 + segmentSize;
; 295  :         BYTE* op1 = ostart;
; 296  :         BYTE* op2 = opStart2;
; 297  :         BYTE* op3 = opStart3;
; 298  :         BYTE* op4 = opStart4;
; 299  :         DTableDesc const dtd = HUF_getDTableDesc(DTable);
; 300  :         U32 const dtLog = dtd.tableLog;
; 301  :         U32 endSignal = 1;

	mov	DWORD PTR endSignal$2$[rsp], 1
	lea	rax, QWORD PTR [rdx+r15]
	sub	rdi, r15
	mov	QWORD PTR istart2$1$[rbp-256], rax
	sub	rdi, 6
	add	rax, r13
	mov	QWORD PTR istart3$1$[rbp-256], rax
	lea	rax, QWORD PTR [r14+3]
	shr	rax, 2
	lea	rbx, QWORD PTR [rax+r12]
	lea	rcx, QWORD PTR [rbx+rax]
	mov	QWORD PTR opStart2$1$[rbp-256], rbx
	add	rax, rcx
	mov	QWORD PTR opStart3$1$[rbp-256], rcx
	mov	QWORD PTR opStart4$1$[rsp], rax
	mov	r14, rax
	mov	QWORD PTR p$1$[rsp], rax
	mov	r13, rcx
	mov	eax, DWORD PTR [rsi]
	shr	eax, 16
	movzx	r15d, al
	mov	DWORD PTR dtLog$1$[rsp], r15d

; 302  : 
; 303  :         if (length4 > cSrcSize) return ERROR(corruption_detected);   /* overflow */

	cmp	rdi, QWORD PTR cSrcSize$[rbp-256]
	ja	$LN774@HUF_decomp

; 304  :         CHECK_F( BIT_initDStream(&bitD1, istart1, length1) );

	mov	r8, QWORD PTR length1$1$[rbp-256]
	lea	rcx, QWORD PTR bitD1$1[rsp]
	call	BIT_initDStream
; File E:\dev\pyzstd\lib\common\error_private.h

; 56   : ERR_STATIC unsigned ERR_isError(size_t code) { return (code > ERROR(maxCode)); }

	cmp	rax, -120				; ffffffffffffff88H
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 304  :         CHECK_F( BIT_initDStream(&bitD1, istart1, length1) );

	ja	$LN773@HUF_decomp

; 305  :         CHECK_F( BIT_initDStream(&bitD2, istart2, length2) );

	mov	r8, QWORD PTR length2$1$[rbp-256]
	lea	rcx, QWORD PTR bitD2$2[rsp]
	mov	rdx, QWORD PTR istart2$1$[rbp-256]
	call	BIT_initDStream
; File E:\dev\pyzstd\lib\common\error_private.h

; 56   : ERR_STATIC unsigned ERR_isError(size_t code) { return (code > ERROR(maxCode)); }

	cmp	rax, -120				; ffffffffffffff88H
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 305  :         CHECK_F( BIT_initDStream(&bitD2, istart2, length2) );

	ja	$LN773@HUF_decomp

; 306  :         CHECK_F( BIT_initDStream(&bitD3, istart3, length3) );

	mov	r8, QWORD PTR length3$1$[rbp-256]
	lea	rcx, QWORD PTR bitD3$3[rbp-256]
	mov	rdx, QWORD PTR istart3$1$[rbp-256]
	call	BIT_initDStream
; File E:\dev\pyzstd\lib\common\error_private.h

; 56   : ERR_STATIC unsigned ERR_isError(size_t code) { return (code > ERROR(maxCode)); }

	cmp	rax, -120				; ffffffffffffff88H
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 306  :         CHECK_F( BIT_initDStream(&bitD3, istart3, length3) );

	ja	$LN773@HUF_decomp

; 307  :         CHECK_F( BIT_initDStream(&bitD4, istart4, length4) );

	mov	rdx, QWORD PTR istart3$1$[rbp-256]
	lea	rcx, QWORD PTR bitD4$4[rbp-256]
	add	rdx, QWORD PTR length3$1$[rbp-256]
	mov	r8, rdi
	call	BIT_initDStream
; File E:\dev\pyzstd\lib\common\error_private.h

; 56   : ERR_STATIC unsigned ERR_isError(size_t code) { return (code > ERROR(maxCode)); }

	cmp	rax, -120				; ffffffffffffff88H
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 307  :         CHECK_F( BIT_initDStream(&bitD4, istart4, length4) );

	ja	$LN773@HUF_decomp

; 308  : 
; 309  :         /* up to 16 symbols per loop (4 symbols per stream) in 64-bit mode */
; 310  :         for ( ; (endSignal) & (op4 < olimit) ; ) {

	mov	rcx, QWORD PTR oend$1$[rsp]
	mov	rax, r14
	add	rcx, -3
	cmp	rax, rcx
	jae	$LN753@HUF_decomp
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	r11d, r15d
	neg	r11d
	and	r11d, 63				; 0000003fH
	mov	DWORD PTR tv2607[rbp-256], r11d
	npad	4
$LL4@HUF_decomp:
	mov	r8d, DWORD PTR bitD1$1[rsp+8]
	mov	ecx, r8d
	mov	r15, QWORD PTR bitD1$1[rsp]
	and	ecx, 63					; 0000003fH
	mov	r9d, DWORD PTR bitD2$2[rsp+8]
	mov	rdx, r15
	shl	rdx, cl
	mov	ecx, r11d
	shr	rdx, cl
	mov	ecx, r9d
	mov	r14, QWORD PTR bitD2$2[rsp]
	and	ecx, 63					; 0000003fH
	mov	r10d, DWORD PTR bitD3$3[rbp-248]
	mov	rdi, QWORD PTR bitD3$3[rbp-256]
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rsi+rdx*2+5]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r8d, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 311  :             HUF_DECODE_SYMBOLX1_2(op1, &bitD1);

	movzx	eax, BYTE PTR [rsi+rdx*2+4]
	mov	BYTE PTR [r12], al
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, r14
	shl	rdx, cl
	mov	ecx, r11d
	shr	rdx, cl
	mov	ecx, r10d
	and	ecx, 63					; 0000003fH
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rsi+rdx*2+5]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r9d, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 312  :             HUF_DECODE_SYMBOLX1_2(op2, &bitD2);

	movzx	eax, BYTE PTR [rsi+rdx*2+4]
	mov	BYTE PTR [rbx], al
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, rdi
	shl	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 312  :             HUF_DECODE_SYMBOLX1_2(op2, &bitD2);

	inc	rbx
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, r11d
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 312  :             HUF_DECODE_SYMBOLX1_2(op2, &bitD2);

	mov	QWORD PTR p$1$[rbp-256], rbx
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	r11d, DWORD PTR bitD4$4[rbp-248]
	mov	rbx, QWORD PTR bitD4$4[rbp-256]
	shr	rdx, cl
	mov	ecx, r11d
	and	ecx, 63					; 0000003fH
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rsi+rdx*2+5]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r10d, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 313  :             HUF_DECODE_SYMBOLX1_2(op3, &bitD3);

	movzx	eax, BYTE PTR [rsi+rdx*2+4]
	mov	BYTE PTR [r13], al
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, rbx
	shl	rdx, cl
	mov	ecx, DWORD PTR tv2607[rbp-256]
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 314  :             HUF_DECODE_SYMBOLX1_2(op4, &bitD4);

	mov	rcx, QWORD PTR p$1$[rsp]

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rsi+rdx*2+5]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r11d, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 314  :             HUF_DECODE_SYMBOLX1_2(op4, &bitD4);

	movzx	eax, BYTE PTR [rsi+rdx*2+4]
	mov	BYTE PTR [rcx], al
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, r15
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 314  :             HUF_DECODE_SYMBOLX1_2(op4, &bitD4);

	inc	rcx
	mov	QWORD PTR p$1$[rsp], rcx
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, r8d
	and	ecx, 63					; 0000003fH

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	shl	rdx, cl
	mov	ecx, DWORD PTR tv2607[rbp-256]
	shr	rdx, cl

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, r9d
	and	ecx, 63					; 0000003fH
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rsi+rdx*2+5]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r8d, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 315  :             HUF_DECODE_SYMBOLX1_1(op1, &bitD1);

	movzx	eax, BYTE PTR [rsi+rdx*2+4]
	mov	BYTE PTR [r12+1], al
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, r14
	shl	rdx, cl
	mov	ecx, DWORD PTR tv2607[rbp-256]
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 316  :             HUF_DECODE_SYMBOLX1_1(op2, &bitD2);

	mov	rcx, QWORD PTR p$1$[rbp-256]

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rsi+rdx*2+5]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r9d, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 316  :             HUF_DECODE_SYMBOLX1_1(op2, &bitD2);

	movzx	eax, BYTE PTR [rsi+rdx*2+4]
	mov	BYTE PTR [rcx], al
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, rdi
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 316  :             HUF_DECODE_SYMBOLX1_1(op2, &bitD2);

	inc	rcx
	mov	QWORD PTR p$1$[rbp-256], rcx
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, r10d
	and	ecx, 63					; 0000003fH

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	shl	rdx, cl
	mov	ecx, DWORD PTR tv2607[rbp-256]
	shr	rdx, cl

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, r11d
	and	ecx, 63					; 0000003fH
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rsi+rdx*2+5]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r10d, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 317  :             HUF_DECODE_SYMBOLX1_1(op3, &bitD3);

	movzx	eax, BYTE PTR [rsi+rdx*2+4]
	mov	BYTE PTR [r13+1], al
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, rbx
	shl	rdx, cl
	mov	ecx, DWORD PTR tv2607[rbp-256]
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 318  :             HUF_DECODE_SYMBOLX1_1(op4, &bitD4);

	mov	rcx, QWORD PTR p$1$[rsp]

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rsi+rdx*2+5]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r11d, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 318  :             HUF_DECODE_SYMBOLX1_1(op4, &bitD4);

	movzx	eax, BYTE PTR [rsi+rdx*2+4]
	mov	BYTE PTR [rcx], al
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, r15
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 318  :             HUF_DECODE_SYMBOLX1_1(op4, &bitD4);

	inc	rcx
	mov	QWORD PTR p$1$[rsp], rcx
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, r8d
	and	ecx, 63					; 0000003fH

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	shl	rdx, cl
	mov	ecx, DWORD PTR tv2607[rbp-256]
	shr	rdx, cl

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, r9d
	and	ecx, 63					; 0000003fH
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rsi+rdx*2+5]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r8d, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 319  :             HUF_DECODE_SYMBOLX1_2(op1, &bitD1);

	movzx	eax, BYTE PTR [rsi+rdx*2+4]
	mov	BYTE PTR [r12+2], al
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, r14
	shl	rdx, cl
	mov	ecx, DWORD PTR tv2607[rbp-256]
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 320  :             HUF_DECODE_SYMBOLX1_2(op2, &bitD2);

	mov	rcx, QWORD PTR p$1$[rbp-256]

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rsi+rdx*2+5]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r9d, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 320  :             HUF_DECODE_SYMBOLX1_2(op2, &bitD2);

	movzx	eax, BYTE PTR [rsi+rdx*2+4]
	mov	BYTE PTR [rcx], al
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, rdi
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 320  :             HUF_DECODE_SYMBOLX1_2(op2, &bitD2);

	inc	rcx
	mov	QWORD PTR p$1$[rbp-256], rcx
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, r10d
	and	ecx, 63					; 0000003fH

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	shl	rdx, cl
	mov	ecx, DWORD PTR tv2607[rbp-256]
	shr	rdx, cl

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, r11d
	and	ecx, 63					; 0000003fH
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rsi+rdx*2+5]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r10d, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 321  :             HUF_DECODE_SYMBOLX1_2(op3, &bitD3);

	movzx	eax, BYTE PTR [rsi+rdx*2+4]
	mov	BYTE PTR [r13+2], al
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, rbx
	shl	rdx, cl
	mov	ecx, DWORD PTR tv2607[rbp-256]
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 322  :             HUF_DECODE_SYMBOLX1_2(op4, &bitD4);

	mov	rcx, QWORD PTR p$1$[rsp]

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rsi+rdx*2+5]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r11d, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 322  :             HUF_DECODE_SYMBOLX1_2(op4, &bitD4);

	movzx	eax, BYTE PTR [rsi+rdx*2+4]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	edx, DWORD PTR tv2607[rbp-256]
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 322  :             HUF_DECODE_SYMBOLX1_2(op4, &bitD4);

	mov	BYTE PTR [rcx], al
	inc	rcx
	mov	QWORD PTR p$1$[rsp], rcx
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, r8d
	and	ecx, 63					; 0000003fH

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	shl	r15, cl
	mov	ecx, edx
	shr	r15, cl

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, r9d
	and	ecx, 63					; 0000003fH

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	shl	r14, cl
	mov	ecx, edx
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rsi+r15*2+5]
	add	eax, r8d
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	mov	DWORD PTR bitD1$1[rsp+8], eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 323  :             HUF_DECODE_SYMBOLX1_0(op1, &bitD1);

	movzx	eax, BYTE PTR [rsi+r15*2+4]
	mov	BYTE PTR [r12+3], al
	add	r12, 4
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	shr	r14, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rsi+r14*2+5]

; 324  :             HUF_DECODE_SYMBOLX1_0(op2, &bitD2);

	mov	rcx, QWORD PTR p$1$[rbp-256]

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	add	eax, r9d
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	mov	DWORD PTR bitD2$2[rsp+8], eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 324  :             HUF_DECODE_SYMBOLX1_0(op2, &bitD2);

	movzx	eax, BYTE PTR [rsi+r14*2+4]

; 326  :             HUF_DECODE_SYMBOLX1_0(op4, &bitD4);

	mov	r14, QWORD PTR p$1$[rsp]
	mov	BYTE PTR [rcx], al
	inc	rcx
	mov	QWORD PTR p$1$[rbp-256], rcx
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, r10d
	and	ecx, 63					; 0000003fH

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	shl	rdi, cl
	mov	ecx, edx
	shr	rdi, cl

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, r11d
	and	ecx, 63					; 0000003fH

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	shl	rbx, cl
	mov	ecx, edx
	shr	rbx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 327  :             endSignal &= BIT_reloadDStreamFast(&bitD1) == BIT_DStream_unfinished;

	lea	rcx, QWORD PTR bitD1$1[rsp]

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rsi+rdi*2+5]
	add	eax, r10d
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	mov	DWORD PTR bitD3$3[rbp-248], eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 325  :             HUF_DECODE_SYMBOLX1_0(op3, &bitD3);

	movzx	eax, BYTE PTR [rsi+rdi*2+4]
	mov	BYTE PTR [r13+3], al
	add	r13, 4

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rsi+rbx*2+5]
	add	eax, r11d
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	mov	DWORD PTR bitD4$4[rbp-248], eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 326  :             HUF_DECODE_SYMBOLX1_0(op4, &bitD4);

	movzx	eax, BYTE PTR [rsi+rbx*2+4]
	mov	BYTE PTR [r14], al
	inc	r14
	mov	QWORD PTR p$1$[rsp], r14

; 327  :             endSignal &= BIT_reloadDStreamFast(&bitD1) == BIT_DStream_unfinished;

	call	BIT_reloadDStreamFast
	xor	ebx, ebx

; 328  :             endSignal &= BIT_reloadDStreamFast(&bitD2) == BIT_DStream_unfinished;

	lea	rcx, QWORD PTR bitD2$2[rsp]
	test	eax, eax
	cmove	ebx, DWORD PTR endSignal$2$[rsp]
	call	BIT_reloadDStreamFast
	xor	edi, edi

; 329  :             endSignal &= BIT_reloadDStreamFast(&bitD3) == BIT_DStream_unfinished;

	lea	rcx, QWORD PTR bitD3$3[rbp-256]
	test	eax, eax
	sete	dil
	and	edi, ebx
	call	BIT_reloadDStreamFast
	xor	ebx, ebx

; 330  :             endSignal &= BIT_reloadDStreamFast(&bitD4) == BIT_DStream_unfinished;

	lea	rcx, QWORD PTR bitD4$4[rbp-256]
	test	eax, eax
	cmove	ebx, edi
	call	BIT_reloadDStreamFast
	mov	r11d, DWORD PTR tv2607[rbp-256]
	xor	ecx, ecx
	test	eax, eax
	sete	cl
	xor	eax, eax
	and	ebx, ecx
	mov	rcx, QWORD PTR oend$1$[rsp]
	add	rcx, -3
	mov	DWORD PTR endSignal$2$[rsp], ebx
	cmp	r14, rcx
	cmovb	eax, ebx
	mov	rbx, QWORD PTR p$1$[rbp-256]
	test	eax, eax
	jne	$LL4@HUF_decomp
	mov	r15d, DWORD PTR dtLog$1$[rsp]
	mov	rax, QWORD PTR opStart4$1$[rsp]
$LN753@HUF_decomp:

; 331  :         }
; 332  : 
; 333  :         /* check corruption */
; 334  :         /* note : should not be necessary : op# advance in lock step, and we control op4.
; 335  :          *        but curiously, binary generated by gcc 7.2 & 7.3 with -mbmi2 runs faster when >=1 test is present */
; 336  :         if (op1 > opStart2) return ERROR(corruption_detected);

	mov	rdi, QWORD PTR opStart2$1$[rbp-256]
	cmp	r12, rdi
	ja	SHORT $LN774@HUF_decomp

; 337  :         if (op2 > opStart3) return ERROR(corruption_detected);

	cmp	rbx, QWORD PTR opStart3$1$[rbp-256]
	ja	SHORT $LN774@HUF_decomp

; 338  :         if (op3 > opStart4) return ERROR(corruption_detected);

	cmp	r13, rax
	jbe	SHORT $LN31@HUF_decomp
$LN774@HUF_decomp:
	mov	rax, -20
	jmp	$LN773@HUF_decomp
$LN31@HUF_decomp:

; 220  :     while ((BIT_reloadDStream(bitDPtr) == BIT_DStream_unfinished) & (p < pEnd-3)) {

	lea	rax, QWORD PTR [rdi-3]
	lea	rcx, QWORD PTR bitD1$1[rsp]
	mov	QWORD PTR tv2560[rbp-256], rax
	call	BIT_reloadDStream
	xor	ecx, ecx
	lea	rdx, QWORD PTR [rdi-3]
	test	eax, eax
	sete	cl
	xor	eax, eax
	cmp	r12, rdx
	setb	al
	test	ecx, eax
	je	$LN754@HUF_decomp
	mov	r14, QWORD PTR tv2560[rbp-256]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	edi, r15d
	neg	edi
	and	edi, 63					; 0000003fH
	npad	13
$LL483@HUF_decomp:
	mov	r9, QWORD PTR bitD1$1[rsp]
	mov	r8d, DWORD PTR bitD1$1[rsp+8]
	mov	rdx, r9
	mov	ecx, r8d
	and	ecx, 63					; 0000003fH
	shl	rdx, cl
	mov	ecx, edi
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rsi+rdx*2+5]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r8d, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 221  :         HUF_DECODE_SYMBOLX1_2(p, bitDPtr);

	movzx	eax, BYTE PTR [rsi+rdx*2+4]
	mov	BYTE PTR [r12], al
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, r8d
	and	ecx, 63					; 0000003fH

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, r9
	shl	rdx, cl
	mov	ecx, edi
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rsi+rdx*2+5]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r8d, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 222  :         HUF_DECODE_SYMBOLX1_1(p, bitDPtr);

	movzx	eax, BYTE PTR [rsi+rdx*2+4]
	mov	BYTE PTR [r12+1], al
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, r8d
	and	ecx, 63					; 0000003fH

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, r9
	shl	rdx, cl
	mov	ecx, edi
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rsi+rdx*2+5]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r8d, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 223  :         HUF_DECODE_SYMBOLX1_2(p, bitDPtr);

	movzx	eax, BYTE PTR [rsi+rdx*2+4]
	mov	BYTE PTR [r12+2], al
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, r8d
	and	ecx, 63					; 0000003fH

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	shl	r9, cl
	mov	ecx, edi
	shr	r9, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 220  :     while ((BIT_reloadDStream(bitDPtr) == BIT_DStream_unfinished) & (p < pEnd-3)) {

	lea	rcx, QWORD PTR bitD1$1[rsp]

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rsi+r9*2+5]
	add	eax, r8d
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	mov	DWORD PTR bitD1$1[rsp+8], eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 224  :         HUF_DECODE_SYMBOLX1_0(p, bitDPtr);

	movzx	eax, BYTE PTR [rsi+r9*2+4]
	mov	BYTE PTR [r12+3], al
	add	r12, 4
	call	BIT_reloadDStream
	xor	ecx, ecx
	test	eax, eax
	sete	cl
	xor	eax, eax
	cmp	r12, r14
	setb	al
	test	ecx, eax
	jne	$LL483@HUF_decomp
	mov	r14, QWORD PTR p$1$[rsp]
	mov	rdi, QWORD PTR opStart2$1$[rbp-256]
$LN754@HUF_decomp:

; 225  :     }
; 226  : 
; 227  :     /* [0-3] symbols remaining */
; 228  :     if (MEM_32bits())
; 229  :         while ((BIT_reloadDStream(bitDPtr) == BIT_DStream_unfinished) & (p < pEnd))
; 230  :             HUF_DECODE_SYMBOLX1_0(p, bitDPtr);
; 231  : 
; 232  :     /* no more data to retrieve from bitstream, no need to reload */
; 233  :     while (p < pEnd)

	cmp	r12, rdi
	jae	SHORT $LN755@HUF_decomp
	mov	r10, QWORD PTR bitD1$1[rsp]
	mov	r9d, r15d
	mov	r8d, DWORD PTR bitD1$1[rsp+8]
	neg	r9d
	and	r9d, 63					; 0000003fH
	npad	1
$LL487@HUF_decomp:
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, r8d
	mov	rdx, r10
	and	ecx, 63					; 0000003fH
	shl	rdx, cl
	mov	ecx, r9d
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rsi+rdx*2+5]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r8d, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 234  :         HUF_DECODE_SYMBOLX1_0(p, bitDPtr);

	movzx	eax, BYTE PTR [rsi+rdx*2+4]
	mov	BYTE PTR [r12], al
	inc	r12
	cmp	r12, rdi
	jb	SHORT $LL487@HUF_decomp
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	mov	DWORD PTR bitD1$1[rsp+8], r8d
$LN755@HUF_decomp:
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 220  :     while ((BIT_reloadDStream(bitDPtr) == BIT_DStream_unfinished) & (p < pEnd-3)) {

	mov	r12, QWORD PTR opStart3$1$[rbp-256]
	lea	rcx, QWORD PTR bitD2$2[rsp]
	lea	rdi, QWORD PTR [r12-3]
	call	BIT_reloadDStream
	xor	ecx, ecx
	test	eax, eax
	sete	cl
	xor	eax, eax
	cmp	rbx, rdi
	setb	al
	test	ecx, eax
	je	$LN756@HUF_decomp
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	edi, r15d
	lea	r14, QWORD PTR [r12-3]
	neg	edi
	and	edi, 63					; 0000003fH
	npad	9
$LL540@HUF_decomp:
	mov	r9, QWORD PTR bitD2$2[rsp]
	mov	r8d, DWORD PTR bitD2$2[rsp+8]
	mov	rdx, r9
	mov	ecx, r8d
	and	ecx, 63					; 0000003fH
	shl	rdx, cl
	mov	ecx, edi
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rsi+rdx*2+5]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r8d, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 221  :         HUF_DECODE_SYMBOLX1_2(p, bitDPtr);

	movzx	eax, BYTE PTR [rsi+rdx*2+4]
	mov	BYTE PTR [rbx], al
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, r8d
	and	ecx, 63					; 0000003fH

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, r9
	shl	rdx, cl
	mov	ecx, edi
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rsi+rdx*2+5]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r8d, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 222  :         HUF_DECODE_SYMBOLX1_1(p, bitDPtr);

	movzx	eax, BYTE PTR [rsi+rdx*2+4]
	mov	BYTE PTR [rbx+1], al
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, r8d
	and	ecx, 63					; 0000003fH

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, r9
	shl	rdx, cl
	mov	ecx, edi
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rsi+rdx*2+5]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r8d, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 223  :         HUF_DECODE_SYMBOLX1_2(p, bitDPtr);

	movzx	eax, BYTE PTR [rsi+rdx*2+4]
	mov	BYTE PTR [rbx+2], al
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, r8d
	and	ecx, 63					; 0000003fH

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	shl	r9, cl
	mov	ecx, edi
	shr	r9, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 220  :     while ((BIT_reloadDStream(bitDPtr) == BIT_DStream_unfinished) & (p < pEnd-3)) {

	lea	rcx, QWORD PTR bitD2$2[rsp]

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rsi+r9*2+5]
	add	eax, r8d
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	mov	DWORD PTR bitD2$2[rsp+8], eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 224  :         HUF_DECODE_SYMBOLX1_0(p, bitDPtr);

	movzx	eax, BYTE PTR [rsi+r9*2+4]
	mov	BYTE PTR [rbx+3], al
	add	rbx, 4
	call	BIT_reloadDStream
	xor	ecx, ecx
	test	eax, eax
	sete	cl
	xor	eax, eax
	cmp	rbx, r14
	setb	al
	test	ecx, eax
	jne	$LL540@HUF_decomp
	mov	r14, QWORD PTR p$1$[rsp]
$LN756@HUF_decomp:

; 225  :     }
; 226  : 
; 227  :     /* [0-3] symbols remaining */
; 228  :     if (MEM_32bits())
; 229  :         while ((BIT_reloadDStream(bitDPtr) == BIT_DStream_unfinished) & (p < pEnd))
; 230  :             HUF_DECODE_SYMBOLX1_0(p, bitDPtr);
; 231  : 
; 232  :     /* no more data to retrieve from bitstream, no need to reload */
; 233  :     while (p < pEnd)

	cmp	rbx, r12
	jae	SHORT $LN757@HUF_decomp
	mov	r10, QWORD PTR bitD2$2[rsp]
	mov	r9d, r15d
	mov	r8d, DWORD PTR bitD2$2[rsp+8]
	neg	r9d
	and	r9d, 63					; 0000003fH
	npad	13
$LL544@HUF_decomp:
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, r8d
	mov	rdx, r10
	and	ecx, 63					; 0000003fH
	shl	rdx, cl
	mov	ecx, r9d
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rsi+rdx*2+5]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r8d, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 234  :         HUF_DECODE_SYMBOLX1_0(p, bitDPtr);

	movzx	eax, BYTE PTR [rsi+rdx*2+4]
	mov	BYTE PTR [rbx], al
	inc	rbx
	cmp	rbx, r12
	jb	SHORT $LL544@HUF_decomp
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	mov	DWORD PTR bitD2$2[rsp+8], r8d
$LN757@HUF_decomp:
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 220  :     while ((BIT_reloadDStream(bitDPtr) == BIT_DStream_unfinished) & (p < pEnd-3)) {

	mov	rdi, QWORD PTR opStart4$1$[rsp]
	lea	rcx, QWORD PTR bitD3$3[rbp-256]
	lea	r12, QWORD PTR [rdi-3]
	call	BIT_reloadDStream
	xor	ecx, ecx
	test	eax, eax
	sete	cl
	xor	eax, eax
	cmp	r13, r12
	setb	al
	test	ecx, eax
	je	$LN758@HUF_decomp
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ebx, r15d
	neg	ebx
	and	ebx, 63					; 0000003fH
	npad	1
$LL597@HUF_decomp:
	mov	r9, QWORD PTR bitD3$3[rbp-256]
	mov	r8d, DWORD PTR bitD3$3[rbp-248]
	mov	rdx, r9
	mov	ecx, r8d
	and	ecx, 63					; 0000003fH
	shl	rdx, cl
	mov	ecx, ebx
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rsi+rdx*2+5]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r8d, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 221  :         HUF_DECODE_SYMBOLX1_2(p, bitDPtr);

	movzx	eax, BYTE PTR [rsi+rdx*2+4]
	mov	BYTE PTR [r13], al
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, r8d
	and	ecx, 63					; 0000003fH

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, r9
	shl	rdx, cl
	mov	ecx, ebx
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rsi+rdx*2+5]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r8d, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 222  :         HUF_DECODE_SYMBOLX1_1(p, bitDPtr);

	movzx	eax, BYTE PTR [rsi+rdx*2+4]
	mov	BYTE PTR [r13+1], al
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, r8d
	and	ecx, 63					; 0000003fH

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, r9
	shl	rdx, cl
	mov	ecx, ebx
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rsi+rdx*2+5]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r8d, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 223  :         HUF_DECODE_SYMBOLX1_2(p, bitDPtr);

	movzx	eax, BYTE PTR [rsi+rdx*2+4]
	mov	BYTE PTR [r13+2], al
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, r8d
	and	ecx, 63					; 0000003fH

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	shl	r9, cl
	mov	ecx, ebx
	shr	r9, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 220  :     while ((BIT_reloadDStream(bitDPtr) == BIT_DStream_unfinished) & (p < pEnd-3)) {

	lea	rcx, QWORD PTR bitD3$3[rbp-256]

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rsi+r9*2+5]
	add	eax, r8d
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	mov	DWORD PTR bitD3$3[rbp-248], eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 224  :         HUF_DECODE_SYMBOLX1_0(p, bitDPtr);

	movzx	eax, BYTE PTR [rsi+r9*2+4]
	mov	BYTE PTR [r13+3], al
	add	r13, 4
	call	BIT_reloadDStream
	xor	ecx, ecx
	test	eax, eax
	sete	cl
	xor	eax, eax
	cmp	r13, r12
	setb	al
	test	ecx, eax
	jne	$LL597@HUF_decomp
$LN758@HUF_decomp:

; 225  :     }
; 226  : 
; 227  :     /* [0-3] symbols remaining */
; 228  :     if (MEM_32bits())
; 229  :         while ((BIT_reloadDStream(bitDPtr) == BIT_DStream_unfinished) & (p < pEnd))
; 230  :             HUF_DECODE_SYMBOLX1_0(p, bitDPtr);
; 231  : 
; 232  :     /* no more data to retrieve from bitstream, no need to reload */
; 233  :     while (p < pEnd)

	cmp	r13, rdi
	jae	SHORT $LN759@HUF_decomp
	mov	r10, QWORD PTR bitD3$3[rbp-256]
	mov	r9d, r15d
	mov	r8d, DWORD PTR bitD3$3[rbp-248]
	neg	r9d
	and	r9d, 63					; 0000003fH
	npad	3
$LL601@HUF_decomp:
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, r8d
	mov	rdx, r10
	and	ecx, 63					; 0000003fH
	shl	rdx, cl
	mov	ecx, r9d
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rsi+rdx*2+5]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r8d, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 234  :         HUF_DECODE_SYMBOLX1_0(p, bitDPtr);

	movzx	eax, BYTE PTR [rsi+rdx*2+4]
	mov	BYTE PTR [r13], al
	inc	r13
	cmp	r13, rdi
	jb	SHORT $LL601@HUF_decomp
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	mov	DWORD PTR bitD3$3[rbp-248], r8d
$LN759@HUF_decomp:
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 220  :     while ((BIT_reloadDStream(bitDPtr) == BIT_DStream_unfinished) & (p < pEnd-3)) {

	lea	rcx, QWORD PTR bitD4$4[rbp-256]
	call	BIT_reloadDStream
	mov	r13, QWORD PTR oend$1$[rsp]
	xor	ecx, ecx
	test	eax, eax
	sete	cl
	xor	eax, eax
	lea	rdi, QWORD PTR [r13-3]
	cmp	r14, rdi
	setb	al
	test	ecx, eax
	je	$LN760@HUF_decomp
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ebx, r15d
	neg	ebx
	and	ebx, 63					; 0000003fH
$LL654@HUF_decomp:
	mov	r9, QWORD PTR bitD4$4[rbp-256]
	mov	r8d, DWORD PTR bitD4$4[rbp-248]
	mov	rdx, r9
	mov	ecx, r8d
	and	ecx, 63					; 0000003fH
	shl	rdx, cl
	mov	ecx, ebx
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rsi+rdx*2+5]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r8d, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 221  :         HUF_DECODE_SYMBOLX1_2(p, bitDPtr);

	movzx	eax, BYTE PTR [rsi+rdx*2+4]
	mov	BYTE PTR [r14], al
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, r8d
	and	ecx, 63					; 0000003fH

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, r9
	shl	rdx, cl
	mov	ecx, ebx
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rsi+rdx*2+5]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r8d, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 222  :         HUF_DECODE_SYMBOLX1_1(p, bitDPtr);

	movzx	eax, BYTE PTR [rsi+rdx*2+4]
	mov	BYTE PTR [r14+1], al
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, r8d
	and	ecx, 63					; 0000003fH

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, r9
	shl	rdx, cl
	mov	ecx, ebx
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rsi+rdx*2+5]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r8d, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 223  :         HUF_DECODE_SYMBOLX1_2(p, bitDPtr);

	movzx	eax, BYTE PTR [rsi+rdx*2+4]
	mov	BYTE PTR [r14+2], al
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, r8d
	and	ecx, 63					; 0000003fH

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	shl	r9, cl
	mov	ecx, ebx
	shr	r9, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 220  :     while ((BIT_reloadDStream(bitDPtr) == BIT_DStream_unfinished) & (p < pEnd-3)) {

	lea	rcx, QWORD PTR bitD4$4[rbp-256]

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rsi+r9*2+5]
	add	eax, r8d
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	mov	DWORD PTR bitD4$4[rbp-248], eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 224  :         HUF_DECODE_SYMBOLX1_0(p, bitDPtr);

	movzx	eax, BYTE PTR [rsi+r9*2+4]
	mov	BYTE PTR [r14+3], al
	add	r14, 4
	call	BIT_reloadDStream
	xor	ecx, ecx
	test	eax, eax
	sete	cl
	xor	eax, eax
	cmp	r14, rdi
	setb	al
	test	ecx, eax
	jne	$LL654@HUF_decomp
$LN760@HUF_decomp:

; 225  :     }
; 226  : 
; 227  :     /* [0-3] symbols remaining */
; 228  :     if (MEM_32bits())
; 229  :         while ((BIT_reloadDStream(bitDPtr) == BIT_DStream_unfinished) & (p < pEnd))
; 230  :             HUF_DECODE_SYMBOLX1_0(p, bitDPtr);
; 231  : 
; 232  :     /* no more data to retrieve from bitstream, no need to reload */
; 233  :     while (p < pEnd)

	mov	r8d, DWORD PTR bitD4$4[rbp-248]
	cmp	r14, r13
	jae	SHORT $LN659@HUF_decomp
	mov	r9, QWORD PTR bitD4$4[rbp-256]
	neg	r15d
	and	r15d, 63				; 0000003fH
	npad	7
$LL658@HUF_decomp:
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, r8d
	mov	rdx, r9
	and	ecx, 63					; 0000003fH
	shl	rdx, cl
	mov	ecx, r15d
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 199  :     BIT_skipBits(Dstream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rsi+rdx*2+5]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r8d, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 234  :         HUF_DECODE_SYMBOLX1_0(p, bitDPtr);

	movzx	eax, BYTE PTR [rsi+rdx*2+4]
	mov	BYTE PTR [r14], al
	inc	r14
	cmp	r14, r13
	jb	SHORT $LL658@HUF_decomp
$LN659@HUF_decomp:
; File E:\dev\pyzstd\lib\common\bitstream.h

; 447  :     return ((DStream->ptr == DStream->start) && (DStream->bitsConsumed == sizeof(DStream->bitContainer)*8));

	mov	rax, QWORD PTR bitD1$1[rsp+24]
	cmp	QWORD PTR bitD1$1[rsp+16], rax
	jne	SHORT $LN712@HUF_decomp
	cmp	DWORD PTR bitD1$1[rsp+8], 64		; 00000040H
	jne	SHORT $LN712@HUF_decomp
	mov	ecx, 1
	mov	r10d, ecx
	jmp	SHORT $LN713@HUF_decomp
$LN712@HUF_decomp:
	xor	r10d, r10d
	lea	ecx, QWORD PTR [r10+1]
$LN713@HUF_decomp:
	mov	rax, QWORD PTR bitD2$2[rbp-232]
	cmp	QWORD PTR bitD2$2[rsp+16], rax
	jne	SHORT $LN716@HUF_decomp
	cmp	DWORD PTR bitD2$2[rsp+8], 64		; 00000040H
	jne	SHORT $LN716@HUF_decomp
	mov	r9d, ecx
	jmp	SHORT $LN717@HUF_decomp
$LN716@HUF_decomp:
	xor	r9d, r9d
$LN717@HUF_decomp:
	mov	rax, QWORD PTR bitD3$3[rbp-232]
	cmp	QWORD PTR bitD3$3[rbp-240], rax
	jne	SHORT $LN720@HUF_decomp
	cmp	DWORD PTR bitD3$3[rbp-248], 64		; 00000040H
	jne	SHORT $LN720@HUF_decomp
	mov	edx, ecx
	jmp	SHORT $LN721@HUF_decomp
$LN720@HUF_decomp:
	xor	edx, edx
$LN721@HUF_decomp:
	mov	rax, QWORD PTR bitD4$4[rbp-232]
	cmp	QWORD PTR bitD4$4[rbp-240], rax
	jne	SHORT $LN724@HUF_decomp
	cmp	r8d, 64					; 00000040H
	je	SHORT $LN725@HUF_decomp
$LN724@HUF_decomp:
	xor	ecx, ecx
$LN725@HUF_decomp:
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 348  :         { U32 const endCheck = BIT_endOfDStream(&bitD1) & BIT_endOfDStream(&bitD2) & BIT_endOfDStream(&bitD3) & BIT_endOfDStream(&bitD4);

	and	ecx, edx

; 349  :           if (!endCheck) return ERROR(corruption_detected); }

	mov	rax, -20
	and	ecx, r9d
	test	ecx, r10d
	mov	rcx, QWORD PTR dstSize$[rbp-256]
	cmove	rcx, rax
	mov	rax, rcx
$LN773@HUF_decomp:
	mov	r13, QWORD PTR [rsp+296]
	mov	rsi, QWORD PTR [rsp+352]
	mov	r15, QWORD PTR [rsp+288]

; 363  : HUF_DGEN(HUF_decompress4X1_usingDTable_internal)

	add	rsp, 304				; 00000130H
	pop	r14
	pop	r12
	pop	rdi
	pop	rbx
	pop	rbp
	ret	0
HUF_decompress4X1_usingDTable_internal ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\error_private.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
_TEXT	SEGMENT
dctx$ = 64
dst$ = 72
dstSize$ = 80
cSrc$ = 88
cSrcSize$ = 96
workSpace$ = 104
wkspSize$dead$ = 112
bmi2$ = 120
HUF_decompress4X1_DCtx_wksp_bmi2 PROC

; 419  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	sub	rsp, 48					; 00000030H

; 420  :     const BYTE* ip = (const BYTE*) cSrc;
; 421  : 
; 422  :     size_t const hSize = HUF_readDTableX1_wksp (dctx, cSrc, cSrcSize,

	mov	rbx, QWORD PTR cSrcSize$[rsp]
	mov	rdi, r9
	mov	r9, QWORD PTR workSpace$[rsp]
	mov	rbp, r8
	mov	r14, rdx
	mov	r8, rbx
	mov	rdx, rdi
	mov	rsi, rcx
	call	HUF_readDTableX1_wksp
; File E:\dev\pyzstd\lib\common\error_private.h

; 56   : ERR_STATIC unsigned ERR_isError(size_t code) { return (code > ERROR(maxCode)); }

	cmp	rax, -120				; ffffffffffffff88H
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 424  :     if (HUF_isError(hSize)) return hSize;

	ja	SHORT $LN1@HUF_decomp

; 425  :     if (hSize >= cSrcSize) return ERROR(srcSize_wrong);

	cmp	rax, rbx
	jb	SHORT $LN3@HUF_decomp
	mov	rax, -72				; ffffffffffffffb8H
	jmp	SHORT $LN1@HUF_decomp
$LN3@HUF_decomp:

; 426  :     ip += hSize; cSrcSize -= hSize;

	sub	rbx, rax
	lea	r8, QWORD PTR [rax+rdi]

; 427  : 
; 428  :     return HUF_decompress4X1_usingDTable_internal(dst, dstSize, ip, cSrcSize, dctx, bmi2);

	mov	eax, DWORD PTR bmi2$[rsp]
	mov	r9, rbx
	mov	DWORD PTR [rsp+40], eax
	mov	rdx, rbp
	mov	rcx, r14
	mov	QWORD PTR [rsp+32], rsi
	call	HUF_decompress4X1_usingDTable_internal
$LN1@HUF_decomp:

; 429  : }

	mov	rbx, QWORD PTR [rsp+64]
	mov	rbp, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	mov	rdi, QWORD PTR [rsp+88]
	add	rsp, 48					; 00000030H
	pop	r14
	ret	0
HUF_decompress4X1_DCtx_wksp_bmi2 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\error_private.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
_TEXT	SEGMENT
dctx$ = 64
dst$ = 72
dstSize$ = 80
cSrc$ = 88
cSrcSize$ = 96
workSpace$ = 104
wkspSize$dead$ = 112
HUF_decompress4X1_DCtx_wksp PROC

; 434  : {

$LN669:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	sub	rsp, 48					; 00000030H

; 422  :     size_t const hSize = HUF_readDTableX1_wksp (dctx, cSrc, cSrcSize,

	mov	rbx, QWORD PTR cSrcSize$[rsp]

; 434  : {

	mov	rdi, r9

; 422  :     size_t const hSize = HUF_readDTableX1_wksp (dctx, cSrc, cSrcSize,

	mov	r9, QWORD PTR workSpace$[rsp]

; 434  : {

	mov	rbp, r8
	mov	r14, rdx

; 422  :     size_t const hSize = HUF_readDTableX1_wksp (dctx, cSrc, cSrcSize,

	mov	r8, rbx
	mov	rdx, rdi

; 434  : {

	mov	rsi, rcx

; 422  :     size_t const hSize = HUF_readDTableX1_wksp (dctx, cSrc, cSrcSize,

	call	HUF_readDTableX1_wksp
; File E:\dev\pyzstd\lib\common\error_private.h

; 56   : ERR_STATIC unsigned ERR_isError(size_t code) { return (code > ERROR(maxCode)); }

	cmp	rax, -120				; ffffffffffffff88H
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 424  :     if (HUF_isError(hSize)) return hSize;

	ja	SHORT $LN3@HUF_decomp

; 425  :     if (hSize >= cSrcSize) return ERROR(srcSize_wrong);

	cmp	rax, rbx
	jb	SHORT $LN5@HUF_decomp

; 435  :     return HUF_decompress4X1_DCtx_wksp_bmi2(dctx, dst, dstSize, cSrc, cSrcSize, workSpace, wkspSize, 0);

	mov	rax, -72				; ffffffffffffffb8H

; 425  :     if (hSize >= cSrcSize) return ERROR(srcSize_wrong);

	jmp	SHORT $LN3@HUF_decomp
$LN5@HUF_decomp:

; 426  :     ip += hSize; cSrcSize -= hSize;

	sub	rbx, rax

; 427  : 
; 428  :     return HUF_decompress4X1_usingDTable_internal(dst, dstSize, ip, cSrcSize, dctx, bmi2);

	mov	DWORD PTR [rsp+40], 0
	mov	r9, rbx
	mov	QWORD PTR [rsp+32], rsi
	lea	r8, QWORD PTR [rax+rdi]
	mov	rdx, rbp
	mov	rcx, r14
	call	HUF_decompress4X1_usingDTable_internal
$LN3@HUF_decomp:

; 436  : }

	mov	rbx, QWORD PTR [rsp+64]
	mov	rbp, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	mov	rdi, QWORD PTR [rsp+88]
	add	rsp, 48					; 00000030H
	pop	r14
	ret	0
HUF_decompress4X1_DCtx_wksp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\error_private.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
_TEXT	SEGMENT
workSpace$ = 48
__$ArrayPad$ = 2096
dctx$ = 2160
dst$ = 2168
dstSize$ = 2176
cSrc$ = 2184
cSrcSize$ = 2192
HUF_decompress4X1_DCtx PROC

; 440  : {

$LN671:
	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r14
	sub	rsp, 2112				; 00000840H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 422  :     size_t const hSize = HUF_readDTableX1_wksp (dctx, cSrc, cSrcSize,

	mov	rbx, QWORD PTR cSrcSize$[rsp]

; 440  : {

	mov	rsi, r9
	mov	r14, r8

; 422  :     size_t const hSize = HUF_readDTableX1_wksp (dctx, cSrc, cSrcSize,

	lea	r9, QWORD PTR workSpace$[rsp]

; 440  : {

	mov	rbp, rdx

; 422  :     size_t const hSize = HUF_readDTableX1_wksp (dctx, cSrc, cSrcSize,

	mov	r8, rbx
	mov	rdx, rsi

; 440  : {

	mov	rdi, rcx

; 422  :     size_t const hSize = HUF_readDTableX1_wksp (dctx, cSrc, cSrcSize,

	call	HUF_readDTableX1_wksp
; File E:\dev\pyzstd\lib\common\error_private.h

; 56   : ERR_STATIC unsigned ERR_isError(size_t code) { return (code > ERROR(maxCode)); }

	cmp	rax, -120				; ffffffffffffff88H
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 424  :     if (HUF_isError(hSize)) return hSize;

	ja	SHORT $LN5@HUF_decomp

; 425  :     if (hSize >= cSrcSize) return ERROR(srcSize_wrong);

	cmp	rax, rbx
	jb	SHORT $LN7@HUF_decomp

; 441  :     U32 workSpace[HUF_DECOMPRESS_WORKSPACE_SIZE_U32];
; 442  :     return HUF_decompress4X1_DCtx_wksp(dctx, dst, dstSize, cSrc, cSrcSize,

	mov	rax, -72				; ffffffffffffffb8H

; 425  :     if (hSize >= cSrcSize) return ERROR(srcSize_wrong);

	jmp	SHORT $LN5@HUF_decomp
$LN7@HUF_decomp:

; 426  :     ip += hSize; cSrcSize -= hSize;

	sub	rbx, rax

; 427  : 
; 428  :     return HUF_decompress4X1_usingDTable_internal(dst, dstSize, ip, cSrcSize, dctx, bmi2);

	mov	DWORD PTR [rsp+40], 0
	mov	r9, rbx
	mov	QWORD PTR [rsp+32], rdi
	lea	r8, QWORD PTR [rax+rsi]
	mov	rdx, r14
	mov	rcx, rbp
	call	HUF_decompress4X1_usingDTable_internal
$LN5@HUF_decomp:

; 443  :                                        workSpace, sizeof(workSpace));
; 444  : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 2112				; 00000840H
	pop	r14
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
HUF_decompress4X1_DCtx ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\error_private.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
_TEXT	SEGMENT
workSpace$1 = 48
DTable$ = 2096
__$ArrayPad$ = 10304
dst$ = 10368
dstSize$ = 10376
cSrc$ = 10384
cSrcSize$ = 10392
HUF_decompress4X1 PROC

; 446  : {

$LN673:
	push	rbx
	push	rbp
	push	rsi
	push	rdi
	mov	eax, 10328				; 00002858H
	call	__chkstk
	sub	rsp, rax
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	rdi, r8

; 447  :     HUF_CREATE_STATIC_DTABLEX1(DTable, HUF_TABLELOG_MAX);

	mov	DWORD PTR DTable$[rsp], 184549387	; 0b00000bH
	mov	rbp, rdx
	mov	rsi, rcx
	xor	edx, edx
	lea	rcx, QWORD PTR DTable$[rsp+4]
	mov	r8d, 8192				; 00002000H
	mov	rbx, r9
	call	memset

; 422  :     size_t const hSize = HUF_readDTableX1_wksp (dctx, cSrc, cSrcSize,

	lea	r9, QWORD PTR workSpace$1[rsp]
	mov	r8, rbx
	mov	rdx, rdi
	lea	rcx, QWORD PTR DTable$[rsp]
	call	HUF_readDTableX1_wksp
; File E:\dev\pyzstd\lib\common\error_private.h

; 56   : ERR_STATIC unsigned ERR_isError(size_t code) { return (code > ERROR(maxCode)); }

	cmp	rax, -120				; ffffffffffffff88H
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 424  :     if (HUF_isError(hSize)) return hSize;

	ja	SHORT $LN7@HUF_decomp

; 425  :     if (hSize >= cSrcSize) return ERROR(srcSize_wrong);

	cmp	rax, rbx
	jb	SHORT $LN9@HUF_decomp

; 448  :     return HUF_decompress4X1_DCtx(DTable, dst, dstSize, cSrc, cSrcSize);

	mov	rax, -72				; ffffffffffffffb8H

; 425  :     if (hSize >= cSrcSize) return ERROR(srcSize_wrong);

	jmp	SHORT $LN7@HUF_decomp
$LN9@HUF_decomp:

; 426  :     ip += hSize; cSrcSize -= hSize;

	sub	rbx, rax

; 427  : 
; 428  :     return HUF_decompress4X1_usingDTable_internal(dst, dstSize, ip, cSrcSize, dctx, bmi2);

	mov	DWORD PTR [rsp+40], 0
	lea	r8, QWORD PTR [rax+rdi]
	mov	r9, rbx
	lea	rax, QWORD PTR DTable$[rsp]
	mov	rdx, rbp
	mov	rcx, rsi
	mov	QWORD PTR [rsp+32], rax
	call	HUF_decompress4X1_usingDTable_internal
$LN7@HUF_decomp:

; 449  : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 10328				; 00002858H
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
HUF_decompress4X1 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
_TEXT	SEGMENT
DElt$ = 0
rankVal$ = 8
__$ArrayPad$ = 64
DTable$ = 128
sizeLog$ = 136
consumed$ = 144
rankValOrigin$ = 152
minWeight$ = 160
sortedSymbols$ = 168
sortedListSize$ = 176
nbBitsBaseline$ = 184
baseSeq$ = 192
HUF_fillDTableX2Level2 PROC

; 472  : {

	push	rbp
	push	rsi
	push	rdi
	push	r15
	sub	rsp, 88					; 00000058H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 473  :     HUF_DEltX2 DElt;
; 474  :     U32 rankVal[HUF_TABLELOG_MAX + 1];
; 475  : 
; 476  :     /* get pre-calculated rankVal */
; 477  :     memcpy(rankVal, rankValOrigin, sizeof(rankVal));

	movups	xmm0, XMMWORD PTR [r9]
	mov	eax, DWORD PTR [r9+48]
	mov	esi, r8d
	movups	xmm1, XMMWORD PTR [r9+16]
	mov	r11, QWORD PTR sortedSymbols$[rsp]
	mov	r15d, edx

; 478  : 
; 479  :     /* fill skipped values */
; 480  :     if (minWeight>1) {

	movzx	ebp, WORD PTR baseSeq$[rsp]
	mov	r10, rcx
	movups	XMMWORD PTR rankVal$[rsp], xmm0
	mov	DWORD PTR rankVal$[rsp+48], eax
	movups	xmm0, XMMWORD PTR [r9+32]
	movsxd	rax, DWORD PTR minWeight$[rsp]
	movups	XMMWORD PTR rankVal$[rsp+16], xmm1
	movups	XMMWORD PTR rankVal$[rsp+32], xmm0
	cmp	eax, 1
	jle	SHORT $LN3@HUF_fillDT

; 481  :         U32 i, skipSize = rankVal[minWeight];

	mov	ecx, DWORD PTR rankVal$[rsp+rax*4]

; 482  :         MEM_writeLE16(&(DElt.sequence), baseSeq);

	mov	WORD PTR DElt$[rsp], bp

; 483  :         DElt.nbBits   = (BYTE)(consumed);

	mov	BYTE PTR DElt$[rsp+2], sil

; 484  :         DElt.length   = 1;

	mov	BYTE PTR DElt$[rsp+3], 1

; 485  :         for (i = 0; i < skipSize; i++)

	test	ecx, ecx
	je	SHORT $LN3@HUF_fillDT

; 481  :         U32 i, skipSize = rankVal[minWeight];

	mov	eax, DWORD PTR DElt$[rsp]
	mov	rdi, r10
	rep stosd
$LN3@HUF_fillDT:

; 486  :             DTable[i] = DElt;
; 487  :     }
; 488  : 
; 489  :     /* fill DTable */
; 490  :     {   U32 s; for (s=0; s<sortedListSize; s++) {   /* note : sortedSymbols already skipped */

	mov	eax, DWORD PTR sortedListSize$[rsp]
	test	eax, eax
	je	$LN6@HUF_fillDT

; 501  :             DElt.length = 2;

	mov	QWORD PTR [rsp+136], rbx
	mov	r9d, eax
	mov	QWORD PTR [rsp+144], r12
	mov	r12d, 256				; 00000100H
	mov	QWORD PTR [rsp+80], r14
	mov	r14d, DWORD PTR nbBitsBaseline$[rsp]
	mov	BYTE PTR DElt$[rsp+3], 2
	npad	4
$LL7@HUF_fillDT:

; 491  :             const U32 symbol = sortedSymbols[s].symbol;
; 492  :             const U32 weight = sortedSymbols[s].weight;
; 493  :             const U32 nbBits = nbBitsBaseline - weight;
; 494  :             const U32 length = 1 << (sizeLog-nbBits);
; 495  :             const U32 start = rankVal[weight];

	movzx	eax, BYTE PTR [r11+1]
	lea	rbx, QWORD PTR rankVal$[rsp]
	mov	edx, DWORD PTR [rbx+rax*4]
	lea	rbx, QWORD PTR [rbx+rax*4]
	mov	r8d, r14d
	mov	ecx, r15d
	sub	r8d, eax
	mov	edi, 1

; 496  :             U32 i = start;
; 497  :             const U32 end = start + length;
; 498  : 
; 499  :             MEM_writeLE16(&(DElt.sequence), (U16)(baseSeq + (symbol << 8)));

	movzx	eax, BYTE PTR [r11]
	sub	ecx, r8d
	shl	edi, cl
	movzx	ecx, r12w
	add	edi, edx
	imul	eax, ecx
	add	ax, bp

; 500  :             DElt.nbBits = (BYTE)(nbBits + consumed);

	add	r8b, sil
	mov	WORD PTR DElt$[rsp], ax
	mov	BYTE PTR DElt$[rsp+2], r8b
	mov	eax, DWORD PTR DElt$[rsp]
$LL10@HUF_fillDT:

; 502  :             do { DTable[i++] = DElt; } while (i<end);   /* since length >= 1 */

	mov	ecx, edx
	inc	edx
	mov	DWORD PTR [r10+rcx*4], eax
	cmp	edx, edi
	jb	SHORT $LL10@HUF_fillDT

; 503  : 
; 504  :             rankVal[weight] += length;

	add	r11, 2
	mov	DWORD PTR [rbx], edi
	sub	r9, 1
	jne	SHORT $LL7@HUF_fillDT

; 486  :             DTable[i] = DElt;
; 487  :     }
; 488  : 
; 489  :     /* fill DTable */
; 490  :     {   U32 s; for (s=0; s<sortedListSize; s++) {   /* note : sortedSymbols already skipped */

	mov	r14, QWORD PTR [rsp+80]
	mov	r12, QWORD PTR [rsp+144]
	mov	rbx, QWORD PTR [rsp+136]
$LN6@HUF_fillDT:

; 505  :     }   }
; 506  : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 88					; 00000058H
	pop	r15
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
HUF_fillDTableX2Level2 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
_TEXT	SEGMENT
DElt$1 = 0
DElt$2 = 4
targetLog$GSCopy$1$ = 8
scaleLog$1$ = 12
sortedListSize$1$ = 16
length$1$ = 20
start$1$ = 24
minBits$1$ = 28
DTable$GSCopy$1$ = 32
tv702 = 40
rankStart$GSCopy$1$ = 48
sortedList$GSCopy$1$ = 56
rankValOrigin$GSCopy$1$ = 64
tv709 = 72
rankVal$3 = 80
rankVal$ = 136
__$ArrayPad$ = 192
DTable$ = 272
targetLog$ = 280
sortedList$ = 288
sortedListSize$ = 296
rankStart$ = 304
rankValOrigin$ = 312
maxWeight$ = 320
nbBitsBaseline$ = 328
HUF_fillDTableX2 PROC

; 513  : {

	push	rbp
	push	rdi
	lea	rbp, QWORD PTR [rsp-47]
	sub	rsp, 248				; 000000f8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rbp-201], rax
	mov	rax, QWORD PTR rankStart$[rbp-201]
	mov	r11, r8

; 514  :     U32 rankVal[HUF_TABLELOG_MAX + 1];
; 515  :     const int scaleLog = nbBitsBaseline - targetLog;   /* note : targetLog >= srcLog, hence scaleLog <= 1 */

	mov	edi, DWORD PTR nbBitsBaseline$[rbp-201]

; 516  :     const U32 minBits  = nbBitsBaseline - maxWeight;

	mov	r10d, edi
	sub	r10d, DWORD PTR maxWeight$[rbp-201]
	mov	QWORD PTR rankStart$GSCopy$1$[rsp], rax
	mov	rax, QWORD PTR rankValOrigin$[rbp-201]
	mov	QWORD PTR DTable$GSCopy$1$[rsp], rcx
	mov	QWORD PTR sortedList$GSCopy$1$[rsp], r8
	mov	r8, rcx
	mov	ecx, edi
	mov	QWORD PTR rankValOrigin$GSCopy$1$[rsp], rax

; 517  :     U32 s;
; 518  : 
; 519  :     memcpy(rankVal, rankValOrigin, sizeof(rankVal));

	movups	xmm0, XMMWORD PTR [rax]
	sub	ecx, edx
	mov	DWORD PTR sortedListSize$1$[rsp], r9d
	mov	DWORD PTR targetLog$GSCopy$1$[rsp], edx
	mov	DWORD PTR scaleLog$1$[rsp], ecx
	mov	DWORD PTR minBits$1$[rsp], r10d
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR rankVal$[rbp-201], xmm0
	movups	xmm0, XMMWORD PTR [rax+32]
	mov	eax, DWORD PTR [rax+48]
	mov	DWORD PTR rankVal$[rbp-153], eax
	movups	XMMWORD PTR rankVal$[rbp-169], xmm0
	movups	XMMWORD PTR rankVal$[rbp-185], xmm1

; 520  : 
; 521  :     /* fill DTable */
; 522  :     for (s=0; s<sortedListSize; s++) {

	test	r9d, r9d
	je	$LN3@HUF_fillDT
	mov	QWORD PTR [rsp+296], rbx
	mov	QWORD PTR [rsp+240], rsi
	mov	QWORD PTR [rsp+232], r12
	mov	QWORD PTR [rsp+224], r13
	mov	r13, r11
	mov	esi, r9d
	mov	r9d, 1
	mov	QWORD PTR [rsp+216], r14
	mov	QWORD PTR [rsp+208], r15
	mov	QWORD PTR tv702[rsp], rsi
	npad	10
$LL4@HUF_fillDT:

; 523  :         const U16 symbol = sortedList[s].symbol;
; 524  :         const U32 weight = sortedList[s].weight;

	movzx	eax, BYTE PTR [r13+1]

; 525  :         const U32 nbBits = nbBitsBaseline - weight;
; 526  :         const U32 start = rankVal[weight];

	lea	r11, QWORD PTR rankVal$[rbp-201]
	mov	r15d, DWORD PTR [r11+rax*4]
	lea	r11, QWORD PTR [r11+rax*4]
	movzx	r12d, BYTE PTR [r13]
	mov	ebx, edi
	sub	ebx, eax
	mov	DWORD PTR start$1$[rsp], r15d

; 527  :         const U32 length = 1 << (targetLog-nbBits);

	mov	ecx, edx
	mov	QWORD PTR tv709[rsp], r11
	sub	ecx, ebx
	mov	r14d, r9d
	shl	r14d, cl
	mov	DWORD PTR length$1$[rsp], r14d

; 528  : 
; 529  :         if (targetLog-nbBits >= minBits) {   /* enough room for a second symbol */

	cmp	ecx, r10d
	jb	$LN8@HUF_fillDT

; 530  :             U32 sortedRank;
; 531  :             int minWeight = nbBits + scaleLog;

	mov	eax, DWORD PTR scaleLog$1$[rsp]

; 532  :             if (minWeight < 1) minWeight = 1;
; 533  :             sortedRank = rankStart[minWeight];
; 534  :             HUF_fillDTableX2Level2(DTable+start, targetLog-nbBits, nbBits,

	mov	rcx, QWORD PTR sortedList$GSCopy$1$[rsp]
	add	eax, ebx
	cmp	eax, 1
	cmovl	eax, r9d
	mov	edx, eax
	mov	rax, QWORD PTR rankStart$GSCopy$1$[rsp]
	mov	r8d, DWORD PTR [rax+rdx*4]
	mov	eax, ebx
	lea	r10, QWORD PTR [rcx+r8*2]
	mov	rcx, QWORD PTR DTable$GSCopy$1$[rsp]
	lea	r9, QWORD PTR [rcx+r15*4]
	imul	rcx, rax, 52				; 00000034H

; 477  :     memcpy(rankVal, rankValOrigin, sizeof(rankVal));

	mov	rax, QWORD PTR rankValOrigin$GSCopy$1$[rsp]
	movups	xmm0, XMMWORD PTR [rcx+rax]
	movups	xmm1, XMMWORD PTR [rcx+rax+16]
	movups	XMMWORD PTR rankVal$3[rbp-201], xmm0
	movups	xmm0, XMMWORD PTR [rcx+rax+32]
	mov	eax, DWORD PTR [rcx+rax+48]
	mov	DWORD PTR rankVal$3[rbp-153], eax
	movups	XMMWORD PTR rankVal$3[rbp-169], xmm0
	movups	XMMWORD PTR rankVal$3[rbp-185], xmm1

; 478  : 
; 479  :     /* fill skipped values */
; 480  :     if (minWeight>1) {

	cmp	edx, 1
	jbe	SHORT $LN14@HUF_fillDT

; 481  :         U32 i, skipSize = rankVal[minWeight];

	mov	eax, DWORD PTR rankVal$3[rbp+rdx*4-201]

; 482  :         MEM_writeLE16(&(DElt.sequence), baseSeq);

	mov	WORD PTR DElt$1[rsp], r12w

; 483  :         DElt.nbBits   = (BYTE)(consumed);

	mov	BYTE PTR DElt$1[rsp+2], bl

; 484  :         DElt.length   = 1;

	mov	BYTE PTR DElt$1[rsp+3], 1

; 485  :         for (i = 0; i < skipSize; i++)

	test	eax, eax
	je	SHORT $LN14@HUF_fillDT

; 481  :         U32 i, skipSize = rankVal[minWeight];

	mov	ecx, eax
	mov	rdi, r9
	mov	eax, DWORD PTR DElt$1[rsp]
	rep stosd
	mov	edi, DWORD PTR nbBitsBaseline$[rbp-201]
$LN14@HUF_fillDT:

; 532  :             if (minWeight < 1) minWeight = 1;
; 533  :             sortedRank = rankStart[minWeight];
; 534  :             HUF_fillDTableX2Level2(DTable+start, targetLog-nbBits, nbBits,

	mov	eax, DWORD PTR sortedListSize$1$[rsp]
	sub	eax, r8d

; 490  :     {   U32 s; for (s=0; s<sortedListSize; s++) {   /* note : sortedSymbols already skipped */

	je	$LN17@HUF_fillDT
	mov	r15d, DWORD PTR targetLog$GSCopy$1$[rsp]

; 501  :             DElt.length = 2;

	mov	r14d, 256				; 00000100H
	mov	BYTE PTR DElt$1[rsp+3], 2
	mov	r11d, eax
	npad	6
$LL18@HUF_fillDT:

; 491  :             const U32 symbol = sortedSymbols[s].symbol;
; 492  :             const U32 weight = sortedSymbols[s].weight;

	movzx	eax, BYTE PTR [r10+1]

; 493  :             const U32 nbBits = nbBitsBaseline - weight;
; 494  :             const U32 length = 1 << (sizeLog-nbBits);
; 495  :             const U32 start = rankVal[weight];

	lea	rsi, QWORD PTR rankVal$3[rbp-201]
	mov	edx, DWORD PTR [rsi+rax*4]
	lea	rsi, QWORD PTR [rsi+rax*4]
	sub	edi, eax

; 496  :             U32 i = start;
; 497  :             const U32 end = start + length;

	mov	ecx, r15d

; 498  : 
; 499  :             MEM_writeLE16(&(DElt.sequence), (U16)(baseSeq + (symbol << 8)));

	movzx	eax, BYTE PTR [r10]
	sub	ecx, edi
	sub	ecx, ebx
	mov	r8d, 1
	shl	r8d, cl
	movzx	ecx, r14w
	add	r8d, edx
	imul	eax, ecx
	add	ax, r12w

; 500  :             DElt.nbBits = (BYTE)(nbBits + consumed);

	add	dil, bl
	mov	WORD PTR DElt$1[rsp], ax
	mov	BYTE PTR DElt$1[rsp+2], dil
	mov	eax, DWORD PTR DElt$1[rsp]
$LL21@HUF_fillDT:

; 502  :             do { DTable[i++] = DElt; } while (i<end);   /* since length >= 1 */

	mov	ecx, edx
	inc	edx
	mov	DWORD PTR [r9+rcx*4], eax
	cmp	edx, r8d
	jb	SHORT $LL21@HUF_fillDT

; 486  :             DTable[i] = DElt;
; 487  :     }
; 488  : 
; 489  :     /* fill DTable */
; 490  :     {   U32 s; for (s=0; s<sortedListSize; s++) {   /* note : sortedSymbols already skipped */

	mov	edi, DWORD PTR nbBitsBaseline$[rbp-201]
	add	r10, 2

; 503  : 
; 504  :             rankVal[weight] += length;

	mov	DWORD PTR [rsi], r8d
	sub	r11, 1
	jne	SHORT $LL18@HUF_fillDT
	mov	r14d, DWORD PTR length$1$[rsp]
	mov	r15d, DWORD PTR start$1$[rsp]
	mov	r11, QWORD PTR tv709[rsp]
	mov	rsi, QWORD PTR tv702[rsp]
$LN17@HUF_fillDT:

; 535  :                            rankValOrigin[nbBits], minWeight,
; 536  :                            sortedList+sortedRank, sortedListSize-sortedRank,
; 537  :                            nbBitsBaseline, symbol);
; 538  :         } else {

	mov	r8, QWORD PTR DTable$GSCopy$1$[rsp]
	lea	edx, DWORD PTR [r14+r15]
	mov	r10d, DWORD PTR minBits$1$[rsp]
	mov	r9d, 1
	jmp	SHORT $LN44@HUF_fillDT
$LN8@HUF_fillDT:

; 539  :             HUF_DEltX2 DElt;
; 540  :             MEM_writeLE16(&(DElt.sequence), symbol);
; 541  :             DElt.nbBits = (BYTE)(nbBits);
; 542  :             DElt.length = 1;
; 543  :             {   U32 const end = start + length;

	lea	edx, DWORD PTR [r14+r15]
	mov	WORD PTR DElt$2[rsp], r12w
	mov	BYTE PTR DElt$2[rsp+2], bl
	mov	BYTE PTR DElt$2[rsp+3], 1

; 544  :                 U32 u;
; 545  :                 for (u = start; u < end; u++) DTable[u] = DElt;

	cmp	r15d, edx
	jae	SHORT $LN6@HUF_fillDT
	mov	eax, DWORD PTR DElt$2[rsp]
	lea	rdi, QWORD PTR [r8+r15*4]
	mov	ecx, r14d
	rep stosd
$LN44@HUF_fillDT:

; 546  :         }   }
; 547  :         rankVal[weight] += length;

	mov	edi, DWORD PTR nbBitsBaseline$[rbp-201]
$LN6@HUF_fillDT:

; 520  : 
; 521  :     /* fill DTable */
; 522  :     for (s=0; s<sortedListSize; s++) {

	add	r13, 2

; 546  :         }   }
; 547  :         rankVal[weight] += length;

	mov	DWORD PTR [r11], edx
	mov	edx, DWORD PTR targetLog$GSCopy$1$[rsp]
	sub	rsi, 1
	mov	QWORD PTR tv702[rsp], rsi
	jne	$LL4@HUF_fillDT

; 520  : 
; 521  :     /* fill DTable */
; 522  :     for (s=0; s<sortedListSize; s++) {

	mov	r15, QWORD PTR [rsp+208]
	mov	r14, QWORD PTR [rsp+216]
	mov	r13, QWORD PTR [rsp+224]
	mov	r12, QWORD PTR [rsp+232]
	mov	rsi, QWORD PTR [rsp+240]
	mov	rbx, QWORD PTR [rsp+296]
$LN3@HUF_fillDT:

; 548  :     }
; 549  : }

	mov	rcx, QWORD PTR __$ArrayPad$[rbp-201]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 248				; 000000f8H
	pop	rdi
	pop	rbp
	ret	0
HUF_fillDTableX2 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
_TEXT	SEGMENT
op$ = 8
DStream$ = 16
dt$ = 24
dtLog$ = 32
HUF_decodeSymbolX2 PROC

; 661  : {

	mov	QWORD PTR [rsp+8], rbx
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	r10, QWORD PTR [rdx]
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 661  : {

	mov	rbx, rcx
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, DWORD PTR [rdx+8]
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 662  :     size_t const val = BIT_lookBitsFast(DStream, dtLog);   /* note : dtLog >= 1 */

	neg	r9d
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	and	ecx, 63					; 0000003fH
	and	r9d, 63					; 0000003fH
	shl	r10, cl
	movzx	ecx, r9b
	shr	r10, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	movzx	eax, WORD PTR [r8+r10*4]
	mov	WORD PTR [rbx], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [r8+r10*4+2]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	DWORD PTR [rdx+8], eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 665  :     return dt[val].length;

	movzx	eax, BYTE PTR [r8+r10*4+3]

; 666  : }

	mov	rbx, QWORD PTR [rsp+8]
	ret	0
HUF_decodeSymbolX2 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
_TEXT	SEGMENT
op$ = 8
DStream$ = 16
dt$ = 24
dtLog$ = 32
HUF_decodeLastSymbolX2 PROC
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	r11d, DWORD PTR [rdx+8]
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 670  : {

	mov	r10, rcx
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rax, QWORD PTR [rdx]
	mov	ecx, r11d
	and	ecx, 63					; 0000003fH
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 671  :     size_t const val = BIT_lookBitsFast(DStream, dtLog);   /* note : dtLog >= 1 */

	neg	r9d
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	shl	rax, cl
	and	r9d, 63					; 0000003fH
	movzx	ecx, r9b
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 672  :     memcpy(op, dt+val, 1);

	lea	rcx, QWORD PTR [r8+rax*4]
	movzx	eax, BYTE PTR [r8+rax*4]
	mov	BYTE PTR [r10], al

; 673  :     if (dt[val].length==1) BIT_skipBits(DStream, dt[val].nbBits);

	cmp	BYTE PTR [rcx+3], 1
	jne	SHORT $LN2@HUF_decode
	movzx	eax, BYTE PTR [rcx+2]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	eax, r11d
	mov	DWORD PTR [rdx+8], eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 682  : }

	mov	eax, 1
	ret	0
$LN2@HUF_decode:

; 674  :     else {
; 675  :         if (DStream->bitsConsumed < (sizeof(DStream->bitContainer)*8)) {

	cmp	r11d, 64				; 00000040H
	jae	SHORT $LN13@HUF_decode

; 676  :             BIT_skipBits(DStream, dt[val].nbBits);

	movzx	ecx, BYTE PTR [rcx+2]

; 677  :             if (DStream->bitsConsumed > (sizeof(DStream->bitContainer)*8))

	mov	eax, 64					; 00000040H
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	ecx, r11d
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 677  :             if (DStream->bitsConsumed > (sizeof(DStream->bitContainer)*8))

	cmp	ecx, eax
	cmova	ecx, eax
	mov	DWORD PTR [rdx+8], ecx
$LN13@HUF_decode:

; 682  : }

	mov	eax, 1
	ret	0
HUF_decodeLastSymbolX2 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
_TEXT	SEGMENT
p$ = 32
bitDPtr$ = 40
pEnd$ = 48
dt$ = 56
dtLog$ = 64
HUF_decodeStreamX2 PROC

; 698  : {

	push	rbp
	push	r12
	push	r14

; 699  :     BYTE* const pStart = p;

	mov	eax, DWORD PTR [rdx+8]
	mov	r14, r9
	mov	ebp, DWORD PTR dtLog$[rsp]
	mov	r10, rdx
	mov	QWORD PTR [rsp+32], rbx
	mov	r11, rcx
	mov	QWORD PTR [rsp+40], rsi
	mov	r12, rcx
	mov	QWORD PTR [rsp+56], r15
	lea	rsi, QWORD PTR [r8-7]
	mov	r15, r8
	mov	QWORD PTR [rsp+48], rdi
$LL2@HUF_decode:
; File E:\dev\pyzstd\lib\common\bitstream.h

; 418  :     if (bitD->bitsConsumed > (sizeof(bitD->bitContainer)*8))  /* overflow detected, like end of stream */

	cmp	eax, 64					; 00000040H
	jbe	SHORT $LN15@HUF_decode

; 419  :         return BIT_DStream_overflow;

	mov	ebx, 3
	jmp	SHORT $LN14@HUF_decode
$LN15@HUF_decode:

; 420  : 
; 421  :     if (bitD->ptr >= bitD->limitPtr) {

	mov	r8, QWORD PTR [r10+16]
	cmp	r8, QWORD PTR [r10+32]
	jb	SHORT $LN16@HUF_decode

; 405  :     bitD->ptr -= bitD->bitsConsumed >> 3;

	mov	ecx, eax

; 406  :     bitD->bitsConsumed &= 7;

	and	eax, 7
	shr	rcx, 3
	sub	r8, rcx

; 422  :         return BIT_reloadDStreamFast(bitD);

	xor	ebx, ebx
	jmp	SHORT $LN98@HUF_decode
$LN16@HUF_decode:

; 423  :     }
; 424  :     if (bitD->ptr == bitD->start) {

	mov	rdi, QWORD PTR [r10+24]
	cmp	r8, rdi
	jne	SHORT $LN17@HUF_decode

; 425  :         if (bitD->bitsConsumed < sizeof(bitD->bitContainer)*8) return BIT_DStream_endOfBuffer;

	cmp	eax, 64					; 00000040H
	jae	SHORT $LN18@HUF_decode
	mov	ebx, 1
	jmp	SHORT $LN14@HUF_decode
$LN18@HUF_decode:

; 426  :         return BIT_DStream_completed;

	mov	ebx, 2
	jmp	SHORT $LN14@HUF_decode
$LN17@HUF_decode:

; 427  :     }
; 428  :     /* start < ptr < limitPtr */
; 429  :     {   U32 nbBytes = bitD->bitsConsumed >> 3;

	mov	r9d, eax

; 430  :         BIT_DStream_status result = BIT_DStream_unfinished;
; 431  :         if (bitD->ptr - nbBytes < bitD->start) {

	mov	rdx, r8
	shr	r9d, 3
	xor	ebx, ebx
	mov	ecx, r9d
	sub	rdx, rcx
	cmp	rdx, rdi
	jae	SHORT $LN19@HUF_decode

; 432  :             nbBytes = (U32)(bitD->ptr - bitD->start);  /* ptr > start */

	mov	r9d, r8d

; 433  :             result = BIT_DStream_endOfBuffer;

	mov	ebx, 1
	sub	r9d, edi
$LN19@HUF_decode:

; 434  :         }
; 435  :         bitD->ptr -= nbBytes;

	mov	ecx, r9d
	sub	r8, rcx

; 436  :         bitD->bitsConsumed -= nbBytes*8;

	lea	ecx, DWORD PTR [r9*8]
	sub	eax, ecx
$LN98@HUF_decode:
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 702  :     while ((BIT_reloadDStream(bitDPtr) == BIT_DStream_unfinished) & (p < pEnd-(sizeof(bitDPtr->bitContainer)-1))) {

	mov	QWORD PTR [r10+16], r8
	mov	DWORD PTR [r10+8], eax
	mov	rcx, QWORD PTR [r8]
	mov	QWORD PTR [r10], rcx
$LN14@HUF_decode:
	xor	edx, edx
	cmp	r11, rsi
	setb	dl
	xor	ecx, ecx
	test	ebx, ebx
	sete	cl
	test	edx, ecx
	je	$LN88@HUF_decode
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	and	eax, 63					; 0000003fH
	mov	r8d, ebp
	movzx	ecx, al
	neg	r8d
	mov	rax, QWORD PTR [r10]
	and	r8d, 63					; 0000003fH
	shl	rax, cl
	mov	ecx, r8d
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	lea	rdx, QWORD PTR [r14+rax*4]
	movzx	eax, WORD PTR [r14+rax*4]
	mov	WORD PTR [r11], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rdx+2]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	DWORD PTR [r10+8], eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 703  :         HUF_DECODE_SYMBOLX2_2(p, bitDPtr);

	movzx	eax, BYTE PTR [rdx+3]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	mov	ecx, DWORD PTR [r10+8]
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 703  :         HUF_DECODE_SYMBOLX2_2(p, bitDPtr);

	add	r11, rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rax, QWORD PTR [r10]
	and	ecx, 63					; 0000003fH
	shl	rax, cl
	mov	ecx, r8d
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	lea	rdx, QWORD PTR [r14+rax*4]
	movzx	eax, WORD PTR [r14+rax*4]
	mov	WORD PTR [r11], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rdx+2]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	DWORD PTR [r10+8], eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 704  :         HUF_DECODE_SYMBOLX2_1(p, bitDPtr);

	movzx	eax, BYTE PTR [rdx+3]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	mov	ecx, DWORD PTR [r10+8]
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 704  :         HUF_DECODE_SYMBOLX2_1(p, bitDPtr);

	add	r11, rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rax, QWORD PTR [r10]
	and	ecx, 63					; 0000003fH
	shl	rax, cl
	mov	ecx, r8d
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	lea	rdx, QWORD PTR [r14+rax*4]
	movzx	eax, WORD PTR [r14+rax*4]
	mov	WORD PTR [r11], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rdx+2]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	DWORD PTR [r10+8], eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 705  :         HUF_DECODE_SYMBOLX2_2(p, bitDPtr);

	movzx	eax, BYTE PTR [rdx+3]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	mov	ecx, DWORD PTR [r10+8]
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 705  :         HUF_DECODE_SYMBOLX2_2(p, bitDPtr);

	add	r11, rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rax, QWORD PTR [r10]
	and	ecx, 63					; 0000003fH
	shl	rax, cl
	mov	ecx, r8d
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	lea	rcx, QWORD PTR [r14+rax*4]
	movzx	eax, WORD PTR [r14+rax*4]
	mov	WORD PTR [r11], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rcx+2]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	DWORD PTR [r10+8], eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 706  :         HUF_DECODE_SYMBOLX2_0(p, bitDPtr);

	movzx	ecx, BYTE PTR [rcx+3]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	mov	eax, DWORD PTR [r10+8]
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 706  :         HUF_DECODE_SYMBOLX2_0(p, bitDPtr);

	add	r11, rcx

; 707  :     }

	jmp	$LL2@HUF_decode
$LN88@HUF_decode:
	lea	rsi, QWORD PTR [r15-2]
	npad	1
$LL4@HUF_decode:
; File E:\dev\pyzstd\lib\common\bitstream.h

; 418  :     if (bitD->bitsConsumed > (sizeof(bitD->bitContainer)*8))  /* overflow detected, like end of stream */

	cmp	eax, 64					; 00000040H
	jbe	SHORT $LN49@HUF_decode

; 419  :         return BIT_DStream_overflow;

	mov	ebx, 3
	jmp	SHORT $LN48@HUF_decode
$LN49@HUF_decode:

; 420  : 
; 421  :     if (bitD->ptr >= bitD->limitPtr) {

	mov	r8, QWORD PTR [r10+16]
	cmp	r8, QWORD PTR [r10+32]
	jb	SHORT $LN50@HUF_decode

; 405  :     bitD->ptr -= bitD->bitsConsumed >> 3;

	mov	ecx, eax

; 406  :     bitD->bitsConsumed &= 7;

	and	eax, 7
	shr	rcx, 3
	sub	r8, rcx

; 422  :         return BIT_reloadDStreamFast(bitD);

	xor	ebx, ebx
	jmp	SHORT $LN99@HUF_decode
$LN50@HUF_decode:

; 423  :     }
; 424  :     if (bitD->ptr == bitD->start) {

	mov	rdi, QWORD PTR [r10+24]
	cmp	r8, rdi
	jne	SHORT $LN51@HUF_decode

; 425  :         if (bitD->bitsConsumed < sizeof(bitD->bitContainer)*8) return BIT_DStream_endOfBuffer;

	cmp	eax, 64					; 00000040H
	jae	SHORT $LN52@HUF_decode
	mov	ebx, 1
	jmp	SHORT $LN48@HUF_decode
$LN52@HUF_decode:

; 426  :         return BIT_DStream_completed;

	mov	ebx, 2
	jmp	SHORT $LN48@HUF_decode
$LN51@HUF_decode:

; 427  :     }
; 428  :     /* start < ptr < limitPtr */
; 429  :     {   U32 nbBytes = bitD->bitsConsumed >> 3;

	mov	r9d, eax

; 430  :         BIT_DStream_status result = BIT_DStream_unfinished;
; 431  :         if (bitD->ptr - nbBytes < bitD->start) {

	mov	rdx, r8
	shr	r9d, 3
	xor	ebx, ebx
	mov	ecx, r9d
	sub	rdx, rcx
	cmp	rdx, rdi
	jae	SHORT $LN53@HUF_decode

; 432  :             nbBytes = (U32)(bitD->ptr - bitD->start);  /* ptr > start */

	mov	r9d, r8d

; 433  :             result = BIT_DStream_endOfBuffer;

	mov	ebx, 1
	sub	r9d, edi
$LN53@HUF_decode:

; 434  :         }
; 435  :         bitD->ptr -= nbBytes;

	mov	ecx, r9d
	sub	r8, rcx

; 436  :         bitD->bitsConsumed -= nbBytes*8;

	lea	ecx, DWORD PTR [r9*8]
	sub	eax, ecx
$LN99@HUF_decode:
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 710  :     while ((BIT_reloadDStream(bitDPtr) == BIT_DStream_unfinished) & (p <= pEnd-2))

	mov	QWORD PTR [r10+16], r8
	mov	DWORD PTR [r10+8], eax
	mov	rcx, QWORD PTR [r8]
	mov	QWORD PTR [r10], rcx
$LN48@HUF_decode:
	xor	edx, edx
	cmp	r11, rsi
	setbe	dl
	xor	ecx, ecx
	test	ebx, ebx
	sete	cl
	test	edx, ecx
	je	SHORT $LN84@HUF_decode
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, QWORD PTR [r10]
	and	eax, 63					; 0000003fH
	movzx	ecx, al
	shl	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 662  :     size_t const val = BIT_lookBitsFast(DStream, dtLog);   /* note : dtLog >= 1 */

	mov	ecx, ebp
	neg	ecx
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	and	ecx, 63					; 0000003fH
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	movzx	eax, WORD PTR [r14+rdx*4]
	mov	WORD PTR [r11], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [r14+rdx*4+2]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	DWORD PTR [r10+8], eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 711  :         HUF_DECODE_SYMBOLX2_0(p, bitDPtr);

	movzx	ecx, BYTE PTR [r14+rdx*4+3]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	mov	eax, DWORD PTR [r10+8]
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 711  :         HUF_DECODE_SYMBOLX2_0(p, bitDPtr);

	add	r11, rcx
	jmp	$LL4@HUF_decode
$LN84@HUF_decode:
	mov	rdi, QWORD PTR [rsp+48]

; 712  : 
; 713  :     while (p <= pEnd-2)

	mov	rbx, QWORD PTR [rsp+32]
	cmp	r11, rsi
	ja	SHORT $LN97@HUF_decode
	mov	r8d, ebp
	neg	r8d
	and	r8d, 63					; 0000003fH
	npad	7
$LL6@HUF_decode:
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, DWORD PTR [r10+8]
	mov	rax, QWORD PTR [r10]
	and	ecx, 63					; 0000003fH
	shl	rax, cl
	mov	ecx, r8d
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	lea	rdx, QWORD PTR [r14+rax*4]
	movzx	eax, WORD PTR [r14+rax*4]
	mov	WORD PTR [r11], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	ecx, BYTE PTR [rdx+2]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	mov	eax, DWORD PTR [r10+8]
	add	eax, ecx
	mov	DWORD PTR [r10+8], eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 714  :         HUF_DECODE_SYMBOLX2_0(p, bitDPtr);   /* no need to reload : reached the end of DStream */

	movzx	ecx, BYTE PTR [rdx+3]
	add	r11, rcx
	cmp	r11, rsi
	jbe	SHORT $LL6@HUF_decode
$LN97@HUF_decode:
	mov	rsi, QWORD PTR [rsp+40]

; 715  : 
; 716  :     if (p < pEnd)

	cmp	r11, r15
	mov	r15, QWORD PTR [rsp+56]
	jae	SHORT $LN12@HUF_decode
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	and	eax, 63					; 0000003fH
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 671  :     size_t const val = BIT_lookBitsFast(DStream, dtLog);   /* note : dtLog >= 1 */

	neg	ebp
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	movzx	ecx, al
	and	ebp, 63					; 0000003fH
	mov	rax, QWORD PTR [r10]
	shl	rax, cl
	movzx	ecx, bpl
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 672  :     memcpy(op, dt+val, 1);

	lea	rcx, QWORD PTR [r14+rax*4]
	movzx	eax, BYTE PTR [r14+rax*4]
	mov	BYTE PTR [r11], al

; 673  :     if (dt[val].length==1) BIT_skipBits(DStream, dt[val].nbBits);

	cmp	BYTE PTR [rcx+3], 1
	jne	SHORT $LN71@HUF_decode
	movzx	eax, BYTE PTR [rcx+2]

; 717  :         p += HUF_decodeLastSymbolX2(p, bitDPtr, dt, dtLog);

	inc	r11
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	DWORD PTR [r10+8], eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 719  :     return p-pStart;

	sub	r11, r12
	mov	rax, r11

; 720  : }

	pop	r14
	pop	r12
	pop	rbp
	ret	0
$LN71@HUF_decode:

; 675  :         if (DStream->bitsConsumed < (sizeof(DStream->bitContainer)*8)) {

	mov	edx, DWORD PTR [r10+8]
	cmp	edx, 64					; 00000040H
	jae	SHORT $LN74@HUF_decode

; 676  :             BIT_skipBits(DStream, dt[val].nbBits);

	movzx	ecx, BYTE PTR [rcx+2]

; 677  :             if (DStream->bitsConsumed > (sizeof(DStream->bitContainer)*8))

	mov	eax, 64					; 00000040H
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	ecx, edx
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 677  :             if (DStream->bitsConsumed > (sizeof(DStream->bitContainer)*8))

	cmp	ecx, eax
	cmova	ecx, eax
	mov	DWORD PTR [r10+8], ecx
$LN74@HUF_decode:

; 717  :         p += HUF_decodeLastSymbolX2(p, bitDPtr, dt, dtLog);

	inc	r11
$LN12@HUF_decode:

; 719  :     return p-pStart;

	sub	r11, r12
	mov	rax, r11

; 720  : }

	pop	r14
	pop	r12
	pop	rbp
	ret	0
HUF_decodeStreamX2 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\error_private.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
_TEXT	SEGMENT
oend$1$ = 32
bitD$ = 40
dst$ = 128
dstSize$ = 136
cSrc$ = 144
cSrcSize$ = 152
DTable$ = 160
HUF_decompress1X2_usingDTable_internal_body PROC

; 727  : {

	mov	QWORD PTR [rsp+16], rdx
	push	rbx
	sub	rsp, 112				; 00000070H
	mov	rax, r8
	mov	rbx, rdx
	mov	r11, rcx

; 731  :     CHECK_F( BIT_initDStream(&bitD, cSrc, cSrcSize) );

	mov	rdx, rax
	mov	r8, r9
	lea	rcx, QWORD PTR bitD$[rsp]
	call	BIT_initDStream
; File E:\dev\pyzstd\lib\common\error_private.h

; 56   : ERR_STATIC unsigned ERR_isError(size_t code) { return (code > ERROR(maxCode)); }

	cmp	rax, -120				; ffffffffffffff88H
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 731  :     CHECK_F( BIT_initDStream(&bitD, cSrc, cSrcSize) );

	ja	$LN1@HUF_decomp

; 732  : 
; 733  :     /* decode */
; 734  :     {   BYTE* const ostart = (BYTE*) dst;
; 735  :         BYTE* const oend = ostart + dstSize;
; 736  :         const void* const dtPtr = DTable+1;   /* force compiler to not use strict-aliasing */

	mov	rax, QWORD PTR DTable$[rsp]
	lea	r9, QWORD PTR [r11+rbx]

; 737  :         const HUF_DEltX2* const dt = (const HUF_DEltX2*)dtPtr;
; 738  :         DTableDesc const dtd = HUF_getDTableDesc(DTable);
; 739  :         HUF_decodeStreamX2(ostart, &bitD, oend, dt, dtd.tableLog);

	mov	rbx, QWORD PTR bitD$[rsp+16]
	mov	r10d, DWORD PTR bitD$[rsp+8]
	mov	QWORD PTR [rsp+128], rbp
	mov	ecx, DWORD PTR [rax]
	mov	QWORD PTR [rsp+144], rsi
	mov	rsi, QWORD PTR bitD$[rsp+24]
	mov	QWORD PTR [rsp+152], rdi
	mov	rdi, QWORD PTR bitD$[rsp]
	mov	QWORD PTR [rsp+104], r12
	mov	r12d, esi
	mov	QWORD PTR [rsp+96], r13
	lea	r13, QWORD PTR [r9-7]
	mov	QWORD PTR [rsp+88], r14
	lea	r14, QWORD PTR [rax+4]
	shr	ecx, 16
	mov	QWORD PTR [rsp+80], r15
	mov	r15, QWORD PTR bitD$[rsp+32]
	movzx	ebp, cl
	mov	QWORD PTR oend$1$[rsp], r9
$LL10@HUF_decomp:
; File E:\dev\pyzstd\lib\common\bitstream.h

; 418  :     if (bitD->bitsConsumed > (sizeof(bitD->bitContainer)*8))  /* overflow detected, like end of stream */

	cmp	r10d, 64				; 00000040H
	jbe	SHORT $LN23@HUF_decomp

; 419  :         return BIT_DStream_overflow;

	mov	r8d, 3
	jmp	SHORT $LN22@HUF_decomp
$LN23@HUF_decomp:

; 420  : 
; 421  :     if (bitD->ptr >= bitD->limitPtr) {

	cmp	rbx, r15
	jb	SHORT $LN24@HUF_decomp

; 405  :     bitD->ptr -= bitD->bitsConsumed >> 3;

	mov	eax, r10d

; 406  :     bitD->bitsConsumed &= 7;

	and	r10d, 7
	shr	rax, 3
	sub	rbx, rax

; 422  :         return BIT_reloadDStreamFast(bitD);

	xor	r8d, r8d
	jmp	SHORT $LN116@HUF_decomp
$LN24@HUF_decomp:

; 423  :     }
; 424  :     if (bitD->ptr == bitD->start) {

	cmp	rbx, rsi
	jne	SHORT $LN25@HUF_decomp

; 425  :         if (bitD->bitsConsumed < sizeof(bitD->bitContainer)*8) return BIT_DStream_endOfBuffer;

	cmp	r10d, 64				; 00000040H
	sbb	r8d, r8d
	add	r8d, 2

; 426  :         return BIT_DStream_completed;

	jmp	SHORT $LN22@HUF_decomp
$LN25@HUF_decomp:

; 427  :     }
; 428  :     /* start < ptr < limitPtr */
; 429  :     {   U32 nbBytes = bitD->bitsConsumed >> 3;

	mov	edx, r10d

; 430  :         BIT_DStream_status result = BIT_DStream_unfinished;
; 431  :         if (bitD->ptr - nbBytes < bitD->start) {

	mov	rcx, rbx
	shr	edx, 3
	xor	r8d, r8d
	mov	eax, edx
	sub	rcx, rax
	cmp	rcx, rsi
	jae	SHORT $LN27@HUF_decomp

; 432  :             nbBytes = (U32)(bitD->ptr - bitD->start);  /* ptr > start */

	mov	edx, DWORD PTR bitD$[rsp+16]

; 433  :             result = BIT_DStream_endOfBuffer;

	mov	r8d, 1
	sub	edx, r12d
$LN27@HUF_decomp:

; 434  :         }
; 435  :         bitD->ptr -= nbBytes;

	mov	eax, edx
	sub	rbx, rax

; 436  :         bitD->bitsConsumed -= nbBytes*8;

	imul	eax, edx, -8				; fffffff8H
	add	r10d, eax
$LN116@HUF_decomp:
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 702  :     while ((BIT_reloadDStream(bitDPtr) == BIT_DStream_unfinished) & (p < pEnd-(sizeof(bitDPtr->bitContainer)-1))) {

	mov	rdi, QWORD PTR [rbx]
	mov	QWORD PTR bitD$[rsp+16], rbx
$LN22@HUF_decomp:
	xor	ecx, ecx
	cmp	r11, r13
	setb	cl
	xor	eax, eax
	test	r8d, r8d
	sete	al
	test	ecx, eax
	je	$LN114@HUF_decomp
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, r10d
	mov	r9d, ebp
	and	ecx, 63					; 0000003fH
	neg	r9d
	and	r9d, 63					; 0000003fH
	mov	rax, rdi
	shl	rax, cl
	mov	rdx, rdi
	mov	ecx, r9d
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	lea	rcx, QWORD PTR [r14+rax*4]
	movzx	eax, WORD PTR [r14+rax*4]
	mov	WORD PTR [r11], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rcx+2]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r10d, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 703  :         HUF_DECODE_SYMBOLX2_2(p, bitDPtr);

	movzx	eax, BYTE PTR [rcx+3]
	add	r11, rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, r10d
	and	ecx, 63					; 0000003fH

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rax, rdi
	shl	rax, cl
	mov	ecx, r9d
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	lea	rcx, QWORD PTR [r14+rax*4]
	movzx	eax, WORD PTR [r14+rax*4]
	mov	WORD PTR [r11], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rcx+2]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r10d, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 704  :         HUF_DECODE_SYMBOLX2_1(p, bitDPtr);

	movzx	eax, BYTE PTR [rcx+3]
	add	r11, rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, r10d
	and	ecx, 63					; 0000003fH

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	shl	rdx, cl
	mov	ecx, r9d
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	movzx	eax, WORD PTR [r14+rdx*4]
	mov	WORD PTR [r11], ax

; 705  :         HUF_DECODE_SYMBOLX2_2(p, bitDPtr);

	movzx	eax, BYTE PTR [r14+rdx*4+3]

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	r8d, BYTE PTR [r14+rdx*4+2]

; 705  :         HUF_DECODE_SYMBOLX2_2(p, bitDPtr);

	add	r11, rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r8d, r10d

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rax, rdi
	mov	ecx, r8d
	and	ecx, 63					; 0000003fH
	shl	rax, cl
	mov	ecx, r9d
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	lea	rcx, QWORD PTR [r14+rax*4]
	movzx	eax, WORD PTR [r14+rax*4]
	mov	WORD PTR [r11], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	r10d, BYTE PTR [rcx+2]

; 706  :         HUF_DECODE_SYMBOLX2_0(p, bitDPtr);

	movzx	eax, BYTE PTR [rcx+3]

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	add	r10d, r8d

; 706  :         HUF_DECODE_SYMBOLX2_0(p, bitDPtr);

	add	r11, rax

; 707  :     }

	jmp	$LL10@HUF_decomp
$LN114@HUF_decomp:
	mov	r13, QWORD PTR oend$1$[rsp]
	lea	r9, QWORD PTR [r13-2]
	npad	7
$LL12@HUF_decomp:
; File E:\dev\pyzstd\lib\common\bitstream.h

; 418  :     if (bitD->bitsConsumed > (sizeof(bitD->bitContainer)*8))  /* overflow detected, like end of stream */

	cmp	r10d, 64				; 00000040H
	jbe	SHORT $LN57@HUF_decomp

; 419  :         return BIT_DStream_overflow;

	mov	r8d, 3
	jmp	SHORT $LN56@HUF_decomp
$LN57@HUF_decomp:

; 420  : 
; 421  :     if (bitD->ptr >= bitD->limitPtr) {

	cmp	rbx, r15
	jb	SHORT $LN58@HUF_decomp

; 405  :     bitD->ptr -= bitD->bitsConsumed >> 3;

	mov	eax, r10d

; 406  :     bitD->bitsConsumed &= 7;

	and	r10d, 7
	shr	rax, 3
	sub	rbx, rax

; 422  :         return BIT_reloadDStreamFast(bitD);

	xor	r8d, r8d
	jmp	SHORT $LN117@HUF_decomp
$LN58@HUF_decomp:

; 423  :     }
; 424  :     if (bitD->ptr == bitD->start) {

	cmp	rbx, rsi
	jne	SHORT $LN59@HUF_decomp

; 425  :         if (bitD->bitsConsumed < sizeof(bitD->bitContainer)*8) return BIT_DStream_endOfBuffer;

	cmp	r10d, 64				; 00000040H
	sbb	r8d, r8d
	add	r8d, 2

; 426  :         return BIT_DStream_completed;

	jmp	SHORT $LN56@HUF_decomp
$LN59@HUF_decomp:

; 427  :     }
; 428  :     /* start < ptr < limitPtr */
; 429  :     {   U32 nbBytes = bitD->bitsConsumed >> 3;

	mov	edx, r10d

; 430  :         BIT_DStream_status result = BIT_DStream_unfinished;
; 431  :         if (bitD->ptr - nbBytes < bitD->start) {

	mov	rcx, rbx
	shr	edx, 3
	xor	r8d, r8d
	mov	eax, edx
	sub	rcx, rax
	cmp	rcx, rsi
	jae	SHORT $LN61@HUF_decomp

; 432  :             nbBytes = (U32)(bitD->ptr - bitD->start);  /* ptr > start */

	mov	edx, DWORD PTR bitD$[rsp+16]

; 433  :             result = BIT_DStream_endOfBuffer;

	mov	r8d, 1
	sub	edx, r12d
$LN61@HUF_decomp:

; 434  :         }
; 435  :         bitD->ptr -= nbBytes;

	mov	eax, edx
	sub	rbx, rax

; 436  :         bitD->bitsConsumed -= nbBytes*8;

	imul	eax, edx, -8				; fffffff8H
	add	r10d, eax
$LN117@HUF_decomp:
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 710  :     while ((BIT_reloadDStream(bitDPtr) == BIT_DStream_unfinished) & (p <= pEnd-2))

	mov	rdi, QWORD PTR [rbx]
	mov	QWORD PTR bitD$[rsp+16], rbx
$LN56@HUF_decomp:
	xor	ecx, ecx
	cmp	r11, r9
	setbe	cl
	xor	eax, eax
	test	r8d, r8d
	sete	al
	test	ecx, eax
	je	SHORT $LN96@HUF_decomp
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, r10d
	mov	rdx, rdi
	and	ecx, 63					; 0000003fH
	shl	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 662  :     size_t const val = BIT_lookBitsFast(DStream, dtLog);   /* note : dtLog >= 1 */

	mov	ecx, ebp
	neg	ecx
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	and	ecx, 63					; 0000003fH
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	movzx	eax, WORD PTR [r14+rdx*4]
	mov	WORD PTR [r11], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [r14+rdx*4+2]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r10d, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 711  :         HUF_DECODE_SYMBOLX2_0(p, bitDPtr);

	movzx	eax, BYTE PTR [r14+rdx*4+3]
	add	r11, rax
	jmp	$LL12@HUF_decomp
$LN96@HUF_decomp:
	mov	r15, QWORD PTR [rsp+80]

; 712  : 
; 713  :     while (p <= pEnd-2)

	mov	r12, QWORD PTR [rsp+104]
	cmp	r11, r9
	ja	SHORT $LN107@HUF_decomp
	mov	r8d, ebp
	neg	r8d
	and	r8d, 63					; 0000003fH
$LL14@HUF_decomp:
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, r10d
	mov	rdx, rdi
	and	ecx, 63					; 0000003fH
	shl	rdx, cl
	mov	ecx, r8d
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	movzx	eax, WORD PTR [r14+rdx*4]
	mov	WORD PTR [r11], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [r14+rdx*4+2]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r10d, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 714  :         HUF_DECODE_SYMBOLX2_0(p, bitDPtr);   /* no need to reload : reached the end of DStream */

	movzx	eax, BYTE PTR [r14+rdx*4+3]
	add	r11, rax
	cmp	r11, r9
	jbe	SHORT $LL14@HUF_decomp
$LN107@HUF_decomp:

; 715  : 
; 716  :     if (p < pEnd)

	cmp	r11, r13
	mov	r13, QWORD PTR [rsp+96]
	jae	SHORT $LN82@HUF_decomp

; 671  :     size_t const val = BIT_lookBitsFast(DStream, dtLog);   /* note : dtLog >= 1 */

	neg	ebp
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, r10d
	and	ecx, 63					; 0000003fH
	and	ebp, 63					; 0000003fH
	shl	rdi, cl
	movzx	ecx, bpl
	shr	rdi, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 672  :     memcpy(op, dt+val, 1);

	movzx	eax, BYTE PTR [r14+rdi*4]
	mov	BYTE PTR [r11], al

; 673  :     if (dt[val].length==1) BIT_skipBits(DStream, dt[val].nbBits);

	cmp	BYTE PTR [r14+rdi*4+3], 1
	jne	SHORT $LN79@HUF_decomp
	movzx	eax, BYTE PTR [r14+rdi*4+2]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r10d, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 673  :     if (dt[val].length==1) BIT_skipBits(DStream, dt[val].nbBits);

	jmp	SHORT $LN82@HUF_decomp
$LN79@HUF_decomp:

; 674  :     else {
; 675  :         if (DStream->bitsConsumed < (sizeof(DStream->bitContainer)*8)) {

	cmp	r10d, 64				; 00000040H
	jae	SHORT $LN82@HUF_decomp

; 676  :             BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [r14+rdi*4+2]

; 677  :             if (DStream->bitsConsumed > (sizeof(DStream->bitContainer)*8))

	mov	ecx, 64					; 00000040H
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r10d, eax
	cmp	r10d, ecx
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 677  :             if (DStream->bitsConsumed > (sizeof(DStream->bitContainer)*8))

	cmova	r10d, ecx
$LN82@HUF_decomp:
	mov	r14, QWORD PTR [rsp+88]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 447  :     return ((DStream->ptr == DStream->start) && (DStream->bitsConsumed == sizeof(DStream->bitContainer)*8));

	cmp	rbx, rsi
	mov	rsi, QWORD PTR [rsp+144]
	mov	rdi, QWORD PTR [rsp+152]
	mov	rbp, QWORD PTR [rsp+128]
	jne	SHORT $LN92@HUF_decomp
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 746  :     return dstSize;

	mov	rax, QWORD PTR dstSize$[rsp]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 447  :     return ((DStream->ptr == DStream->start) && (DStream->bitsConsumed == sizeof(DStream->bitContainer)*8));

	cmp	r10d, 64				; 00000040H
	je	SHORT $LN1@HUF_decomp
$LN92@HUF_decomp:
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 743  :     if (!BIT_endOfDStream(&bitD)) return ERROR(corruption_detected);

	mov	rax, -20
$LN1@HUF_decomp:

; 747  : }

	add	rsp, 112				; 00000070H
	pop	rbx
	ret	0
HUF_decompress1X2_usingDTable_internal_body ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\error_private.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\error_private.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\error_private.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\error_private.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
_TEXT	SEGMENT
$T1 = 32
bitD2$1$ = 32
$T2 = 32
tv3807 = 32
$T3 = 36
$T4 = 36
bitD4$1$ = 36
$T5 = 36
tv3806 = 36
bitD3$1$ = 40
$T6 = 40
dtLog$1$ = 44
p$1$ = 48
tv3761 = 56
tv3746 = 56
tv3731 = 56
tv3719 = 56
val$1$ = 64
val$1$ = 72
val$1$ = 80
p$1$ = 88
val$1$ = 96
p$1$ = 104
bitD1$7 = 112
opStart3$1$ = 152
opStart4$1$ = 160
oend$1$ = 168
bitD2$8 = 176
bitD3$9 = 216
bitD4$10 = 256
opStart2$1$ = 296
dst$ = 368
dstSize$ = 376
cSrc$ = 384
$T11 = 392
bitD1$1$ = 392
tv3827 = 392
tv3808 = 392
tv3805 = 392
cSrcSize$ = 392
DTable$ = 400
HUF_decompress4X2_usingDTable_internal_body PROC

; 754  : {

	mov	QWORD PTR [rsp+24], rbx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	lea	rbp, QWORD PTR [rsp-48]
	sub	rsp, 304				; 00000130H
	mov	rbx, rdx

; 755  :     if (cSrcSize < 10) return ERROR(corruption_detected);   /* strict minimum : jump table + 1 byte per stream */

	cmp	r9, 10
	jb	$LN582@HUF_decomp

; 756  : 
; 757  :     {   const BYTE* const istart = (const BYTE*) cSrc;
; 758  :         BYTE* const ostart = (BYTE*) dst;
; 759  :         BYTE* const oend = ostart + dstSize;
; 760  :         BYTE* const olimit = oend - (sizeof(size_t)-1);
; 761  :         const void* const dtPtr = DTable+1;
; 762  :         const HUF_DEltX2* const dt = (const HUF_DEltX2*)dtPtr;
; 763  : 
; 764  :         /* Init */
; 765  :         BIT_DStream_t bitD1;
; 766  :         BIT_DStream_t bitD2;
; 767  :         BIT_DStream_t bitD3;
; 768  :         BIT_DStream_t bitD4;
; 769  :         size_t const length1 = MEM_readLE16(istart);

	movzx	r10d, WORD PTR [r8]
	lea	rax, QWORD PTR [rcx+rdx]

; 770  :         size_t const length2 = MEM_readLE16(istart+2);

	movzx	r15d, WORD PTR [r8+2]

; 771  :         size_t const length3 = MEM_readLE16(istart+4);
; 772  :         size_t const length4 = cSrcSize - (length1 + length2 + length3 + 6);
; 773  :         const BYTE* const istart1 = istart + 6;  /* jumpTable */

	lea	rdx, QWORD PTR [r8+6]
	movzx	r14d, WORD PTR [r8+4]
	mov	rsi, r9
	mov	r11, QWORD PTR DTable$[rbp-256]
	sub	rsi, r14
	mov	QWORD PTR oend$1$[rbp-256], rax

; 774  :         const BYTE* const istart2 = istart1 + length1;

	lea	r13, QWORD PTR [rdx+r10]
	sub	rsi, r15

; 775  :         const BYTE* const istart3 = istart2 + length2;
; 776  :         const BYTE* const istart4 = istart3 + length3;
; 777  :         size_t const segmentSize = (dstSize+3) / 4;

	lea	rax, QWORD PTR [rbx+3]
	shr	rax, 2
	lea	r12, QWORD PTR [r15+r13]

; 778  :         BYTE* const opStart2 = ostart + segmentSize;

	add	rcx, rax
	sub	rsi, r10
	sub	rsi, 6
	mov	QWORD PTR opStart2$1$[rbp-256], rcx

; 779  :         BYTE* const opStart3 = opStart2 + segmentSize;
; 780  :         BYTE* const opStart4 = opStart3 + segmentSize;
; 781  :         BYTE* op1 = ostart;
; 782  :         BYTE* op2 = opStart2;

	mov	QWORD PTR p$1$[rsp], rcx
	lea	r8, QWORD PTR [rcx+rax]
	lea	rdi, QWORD PTR [r8+rax]
	mov	QWORD PTR opStart3$1$[rbp-256], r8

; 783  :         BYTE* op3 = opStart3;
; 784  :         BYTE* op4 = opStart4;
; 785  :         U32 endSignal = 1;
; 786  :         DTableDesc const dtd = HUF_getDTableDesc(DTable);

	mov	eax, DWORD PTR [r11]
	shr	eax, 16
	movzx	ebx, al
	mov	DWORD PTR dtLog$1$[rsp], ebx
	mov	QWORD PTR opStart4$1$[rbp-256], rdi
	mov	QWORD PTR p$1$[rsp], r8
	mov	QWORD PTR p$1$[rsp], rdi

; 787  :         U32 const dtLog = dtd.tableLog;
; 788  : 
; 789  :         if (length4 > cSrcSize) return ERROR(corruption_detected);   /* overflow */

	cmp	rsi, r9
	ja	$LN582@HUF_decomp

; 790  :         CHECK_F( BIT_initDStream(&bitD1, istart1, length1) );

	mov	r8d, r10d
	lea	rcx, QWORD PTR bitD1$7[rsp]
	call	BIT_initDStream
; File E:\dev\pyzstd\lib\common\error_private.h

; 56   : ERR_STATIC unsigned ERR_isError(size_t code) { return (code > ERROR(maxCode)); }

	cmp	rax, -120				; ffffffffffffff88H
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 790  :         CHECK_F( BIT_initDStream(&bitD1, istart1, length1) );

	ja	$LN1@HUF_decomp

; 791  :         CHECK_F( BIT_initDStream(&bitD2, istart2, length2) );

	mov	r8d, r15d
	lea	rcx, QWORD PTR bitD2$8[rbp-256]
	mov	rdx, r13
	call	BIT_initDStream
; File E:\dev\pyzstd\lib\common\error_private.h

; 56   : ERR_STATIC unsigned ERR_isError(size_t code) { return (code > ERROR(maxCode)); }

	cmp	rax, -120				; ffffffffffffff88H
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 791  :         CHECK_F( BIT_initDStream(&bitD2, istart2, length2) );

	ja	$LN1@HUF_decomp

; 792  :         CHECK_F( BIT_initDStream(&bitD3, istart3, length3) );

	mov	r8d, r14d
	lea	rcx, QWORD PTR bitD3$9[rbp-256]
	mov	rdx, r12
	call	BIT_initDStream
; File E:\dev\pyzstd\lib\common\error_private.h

; 56   : ERR_STATIC unsigned ERR_isError(size_t code) { return (code > ERROR(maxCode)); }

	cmp	rax, -120				; ffffffffffffff88H
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 792  :         CHECK_F( BIT_initDStream(&bitD3, istart3, length3) );

	ja	$LN1@HUF_decomp

; 793  :         CHECK_F( BIT_initDStream(&bitD4, istart4, length4) );

	lea	rdx, QWORD PTR [r12+r14]
	mov	r8, rsi
	lea	rcx, QWORD PTR bitD4$10[rbp-256]
	call	BIT_initDStream
; File E:\dev\pyzstd\lib\common\error_private.h

; 56   : ERR_STATIC unsigned ERR_isError(size_t code) { return (code > ERROR(maxCode)); }

	cmp	rax, -120				; ffffffffffffff88H
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 793  :         CHECK_F( BIT_initDStream(&bitD4, istart4, length4) );

	ja	$LN1@HUF_decomp

; 796  :         for ( ; (endSignal) & (op4 < olimit); ) {

	mov	rcx, QWORD PTR oend$1$[rbp-256]
	mov	r13, QWORD PTR bitD1$7[rbp-240]
	add	rcx, -7
	mov	r10d, DWORD PTR bitD3$9[rbp-248]
	cmp	rdi, rcx
	mov	edi, DWORD PTR bitD1$7[rsp+8]
	mov	esi, DWORD PTR bitD4$10[rbp-248]
	mov	r8, QWORD PTR dst$[rbp-256]
	jae	$LN583@HUF_decomp
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, QWORD PTR bitD1$7[rsp]
	mov	eax, ebx
	mov	r12, QWORD PTR bitD2$8[rbp-240]
	neg	eax
	mov	ebx, DWORD PTR bitD2$8[rbp-248]
	and	eax, 63					; 0000003fH
	mov	r15, QWORD PTR bitD3$9[rbp-240]
	mov	r9, QWORD PTR p$1$[rsp]
	mov	DWORD PTR tv3827[rbp-256], eax
	mov	rax, QWORD PTR bitD2$8[rbp-256]
	mov	QWORD PTR val$1$[rsp], rax
	mov	rax, QWORD PTR bitD3$9[rbp-256]
	mov	QWORD PTR val$1$[rsp], rax
	mov	rax, QWORD PTR bitD4$10[rbp-256]
	mov	QWORD PTR val$1$[rsp], rax
	mov	QWORD PTR val$1$[rsp], rdx
	npad	7
$LL2@HUF_decomp:
	mov	r14d, DWORD PTR tv3827[rbp-256]
	mov	ecx, edi
	and	ecx, 63					; 0000003fH
	mov	rax, rdx
	shl	rax, cl
	mov	ecx, r14d
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	mov	rdx, QWORD PTR p$1$[rsp]
	lea	rcx, QWORD PTR [r11+rax*4]
	movzx	eax, WORD PTR [r11+rax*4+4]
	mov	WORD PTR [r8], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rcx+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	edi, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 819  :             HUF_DECODE_SYMBOLX2_2(op1, &bitD1);

	movzx	eax, BYTE PTR [rcx+7]
	add	r8, rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, ebx
	mov	rax, QWORD PTR val$1$[rsp]
	and	ecx, 63					; 0000003fH
	shl	rax, cl
	mov	ecx, r14d
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	lea	rcx, QWORD PTR [r11+rax*4]
	movzx	eax, WORD PTR [r11+rax*4+4]
	mov	WORD PTR [rdx], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rcx+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	ebx, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 820  :             HUF_DECODE_SYMBOLX2_2(op2, &bitD2);

	movzx	eax, BYTE PTR [rcx+7]
	add	rdx, rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, r10d
	mov	rax, QWORD PTR val$1$[rsp]
	and	ecx, 63					; 0000003fH
	shl	rax, cl
	mov	ecx, r14d
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	mov	r14, QWORD PTR p$1$[rsp]
	lea	rcx, QWORD PTR [r11+rax*4]
	movzx	eax, WORD PTR [r11+rax*4+4]
	mov	WORD PTR [r14], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rcx+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	r14d, DWORD PTR tv3827[rbp-256]

; 370  :     bitD->bitsConsumed += nbBits;

	add	r10d, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 821  :             HUF_DECODE_SYMBOLX2_2(op3, &bitD3);

	movzx	eax, BYTE PTR [rcx+7]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, esi
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 821  :             HUF_DECODE_SYMBOLX2_2(op3, &bitD3);

	add	QWORD PTR p$1$[rsp], rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	and	ecx, 63					; 0000003fH
	mov	rax, QWORD PTR val$1$[rsp]
	shl	rax, cl
	mov	ecx, r14d
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	lea	rcx, QWORD PTR [r11+rax*4]
	movzx	eax, WORD PTR [r11+rax*4+4]
	mov	WORD PTR [r9], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rcx+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	esi, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 822  :             HUF_DECODE_SYMBOLX2_2(op4, &bitD4);

	movzx	eax, BYTE PTR [rcx+7]
	add	r9, rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, edi

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rax, QWORD PTR val$1$[rsp]
	and	ecx, 63					; 0000003fH
	shl	rax, cl
	mov	ecx, r14d
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	lea	rcx, QWORD PTR [r11+rax*4]
	movzx	eax, WORD PTR [r11+rax*4+4]
	mov	WORD PTR [r8], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rcx+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	edi, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 823  :             HUF_DECODE_SYMBOLX2_1(op1, &bitD1);

	movzx	eax, BYTE PTR [rcx+7]
	add	r8, rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, ebx

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rax, QWORD PTR val$1$[rsp]
	and	ecx, 63					; 0000003fH
	shl	rax, cl
	mov	ecx, r14d
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	lea	rcx, QWORD PTR [r11+rax*4]
	movzx	eax, WORD PTR [r11+rax*4+4]
	mov	WORD PTR [rdx], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rcx+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	ebx, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 824  :             HUF_DECODE_SYMBOLX2_1(op2, &bitD2);

	movzx	eax, BYTE PTR [rcx+7]
	add	rdx, rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, r10d

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rax, QWORD PTR val$1$[rsp]
	and	ecx, 63					; 0000003fH
	shl	rax, cl
	mov	ecx, r14d
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	mov	r14, QWORD PTR p$1$[rsp]
	lea	rcx, QWORD PTR [r11+rax*4]
	movzx	eax, WORD PTR [r11+rax*4+4]
	mov	WORD PTR [r14], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rcx+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	r14d, DWORD PTR tv3827[rbp-256]

; 370  :     bitD->bitsConsumed += nbBits;

	add	r10d, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 825  :             HUF_DECODE_SYMBOLX2_1(op3, &bitD3);

	movzx	eax, BYTE PTR [rcx+7]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, esi
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 825  :             HUF_DECODE_SYMBOLX2_1(op3, &bitD3);

	add	QWORD PTR p$1$[rsp], rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	and	ecx, 63					; 0000003fH

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rax, QWORD PTR val$1$[rsp]
	shl	rax, cl
	mov	ecx, r14d
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	lea	rcx, QWORD PTR [r11+rax*4]
	movzx	eax, WORD PTR [r11+rax*4+4]
	mov	WORD PTR [r9], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rcx+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	esi, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 826  :             HUF_DECODE_SYMBOLX2_1(op4, &bitD4);

	movzx	eax, BYTE PTR [rcx+7]
	add	r9, rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, edi

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rax, QWORD PTR val$1$[rsp]
	and	ecx, 63					; 0000003fH
	shl	rax, cl
	mov	ecx, r14d
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	lea	rcx, QWORD PTR [r11+rax*4]
	movzx	eax, WORD PTR [r11+rax*4+4]
	mov	WORD PTR [r8], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rcx+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	edi, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 827  :             HUF_DECODE_SYMBOLX2_2(op1, &bitD1);

	movzx	eax, BYTE PTR [rcx+7]
	add	r8, rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, ebx

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rax, QWORD PTR val$1$[rsp]
	and	ecx, 63					; 0000003fH
	shl	rax, cl
	mov	ecx, r14d
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	lea	rcx, QWORD PTR [r11+rax*4]
	movzx	eax, WORD PTR [r11+rax*4+4]
	mov	WORD PTR [rdx], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rcx+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	ebx, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 828  :             HUF_DECODE_SYMBOLX2_2(op2, &bitD2);

	movzx	eax, BYTE PTR [rcx+7]
	add	rdx, rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, r10d

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rax, QWORD PTR val$1$[rsp]
	and	ecx, 63					; 0000003fH
	shl	rax, cl
	mov	ecx, r14d
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	mov	r14, QWORD PTR p$1$[rsp]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	lea	rcx, QWORD PTR [r11+rax*4]
	movzx	eax, WORD PTR [r11+rax*4+4]
	mov	WORD PTR [r14], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rcx+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r10d, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 829  :             HUF_DECODE_SYMBOLX2_2(op3, &bitD3);

	movzx	eax, BYTE PTR [rcx+7]
	add	QWORD PTR p$1$[rsp], rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, esi

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rax, QWORD PTR val$1$[rsp]
	and	ecx, 63					; 0000003fH
	shl	rax, cl
	mov	ecx, DWORD PTR tv3827[rbp-256]
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	lea	rcx, QWORD PTR [r11+rax*4]
	movzx	eax, WORD PTR [r11+rax*4+4]
	mov	WORD PTR [r9], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rcx+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	esi, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 830  :             HUF_DECODE_SYMBOLX2_2(op4, &bitD4);

	movzx	eax, BYTE PTR [rcx+7]
	add	r9, rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, edi

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rax, QWORD PTR val$1$[rsp]
	and	ecx, 63					; 0000003fH
	shl	rax, cl
	mov	ecx, DWORD PTR tv3827[rbp-256]
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	lea	rcx, QWORD PTR [r11+rax*4]
	movzx	eax, WORD PTR [r11+rax*4+4]
	mov	WORD PTR [r8], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rcx+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	edi, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 831  :             HUF_DECODE_SYMBOLX2_0(op1, &bitD1);

	movzx	eax, BYTE PTR [rcx+7]
	add	r8, rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, ebx

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rax, QWORD PTR val$1$[rsp]
	and	ecx, 63					; 0000003fH
	shl	rax, cl
	mov	ecx, DWORD PTR tv3827[rbp-256]
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	lea	rcx, QWORD PTR [r11+rax*4]
	movzx	eax, WORD PTR [r11+rax*4+4]
	mov	WORD PTR [rdx], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rcx+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	ebx, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 832  :             HUF_DECODE_SYMBOLX2_0(op2, &bitD2);

	movzx	eax, BYTE PTR [rcx+7]
	add	rdx, rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, r10d

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rax, QWORD PTR val$1$[rsp]
	and	ecx, 63					; 0000003fH
	shl	rax, cl
	mov	ecx, DWORD PTR tv3827[rbp-256]
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 832  :             HUF_DECODE_SYMBOLX2_0(op2, &bitD2);

	mov	QWORD PTR p$1$[rsp], rdx

; 663  :     memcpy(op, dt+val, 2);

	mov	rdx, QWORD PTR p$1$[rsp]
	lea	rcx, QWORD PTR [r11+rax*4]
	movzx	eax, WORD PTR [r11+rax*4+4]
	mov	WORD PTR [rdx], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rcx+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r10d, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 833  :             HUF_DECODE_SYMBOLX2_0(op3, &bitD3);

	movzx	eax, BYTE PTR [rcx+7]
	add	rdx, rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, esi
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 833  :             HUF_DECODE_SYMBOLX2_0(op3, &bitD3);

	mov	QWORD PTR p$1$[rsp], rdx
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	and	ecx, 63					; 0000003fH

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, QWORD PTR val$1$[rsp]
	shl	rdx, cl
	mov	ecx, DWORD PTR tv3827[rbp-256]
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	movzx	eax, WORD PTR [r11+rdx*4+4]
	mov	WORD PTR [r9], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [r11+rdx*4+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	esi, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 834  :             HUF_DECODE_SYMBOLX2_0(op4, &bitD4);

	movzx	eax, BYTE PTR [r11+rdx*4+7]
	add	r9, rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 402  :     if (UNLIKELY(bitD->ptr < bitD->limitPtr))

	cmp	r13, QWORD PTR bitD1$7[rbp-224]
	jae	SHORT $LN139@HUF_decomp

; 403  :         return BIT_DStream_overflow;

	mov	DWORD PTR $T6[rsp], 3
	xor	ecx, ecx
	jmp	SHORT $LN138@HUF_decomp
$LN139@HUF_decomp:

; 405  :     bitD->ptr -= bitD->bitsConsumed >> 3;

	mov	eax, edi
	and	edi, 7
	shr	rax, 3
	sub	r13, rax

; 407  :     bitD->bitContainer = MEM_readLEST(bitD->ptr);
; 408  :     return BIT_DStream_unfinished;

	xor	ecx, ecx
	mov	DWORD PTR $T6[rsp], ecx
	mov	rax, QWORD PTR [r13]
	mov	QWORD PTR val$1$[rsp], rax
$LN138@HUF_decomp:

; 402  :     if (UNLIKELY(bitD->ptr < bitD->limitPtr))

	cmp	r12, QWORD PTR bitD2$8[rbp-224]
	jae	SHORT $LN142@HUF_decomp

; 403  :         return BIT_DStream_overflow;

	mov	DWORD PTR $T2[rsp], 3
	jmp	SHORT $LN141@HUF_decomp
$LN142@HUF_decomp:

; 405  :     bitD->ptr -= bitD->bitsConsumed >> 3;

	mov	eax, ebx
	shr	rax, 3
	sub	r12, rax

; 407  :     bitD->bitContainer = MEM_readLEST(bitD->ptr);
; 408  :     return BIT_DStream_unfinished;

	mov	DWORD PTR $T2[rsp], ecx
	and	ebx, 7
	mov	rax, QWORD PTR [r12]
	mov	QWORD PTR val$1$[rsp], rax
$LN141@HUF_decomp:

; 402  :     if (UNLIKELY(bitD->ptr < bitD->limitPtr))

	cmp	r15, QWORD PTR bitD3$9[rbp-224]
	jae	SHORT $LN145@HUF_decomp

; 403  :         return BIT_DStream_overflow;

	mov	DWORD PTR $T5[rsp], 3
	jmp	SHORT $LN144@HUF_decomp
$LN145@HUF_decomp:

; 405  :     bitD->ptr -= bitD->bitsConsumed >> 3;

	mov	eax, r10d
	shr	rax, 3
	sub	r15, rax

; 407  :     bitD->bitContainer = MEM_readLEST(bitD->ptr);
; 408  :     return BIT_DStream_unfinished;

	mov	DWORD PTR $T5[rsp], ecx
	and	r10d, 7
	mov	rax, QWORD PTR [r15]
	mov	QWORD PTR val$1$[rsp], rax
$LN144@HUF_decomp:

; 402  :     if (UNLIKELY(bitD->ptr < bitD->limitPtr))

	mov	r14, QWORD PTR bitD4$10[rbp-240]
	cmp	r14, QWORD PTR bitD4$10[rbp-224]
	jae	SHORT $LN148@HUF_decomp

; 403  :         return BIT_DStream_overflow;

	mov	edx, 3
	jmp	SHORT $LN147@HUF_decomp
$LN148@HUF_decomp:

; 405  :     bitD->ptr -= bitD->bitsConsumed >> 3;

	mov	eax, esi

; 407  :     bitD->bitContainer = MEM_readLEST(bitD->ptr);
; 408  :     return BIT_DStream_unfinished;

	mov	edx, ecx
	shr	rax, 3
	sub	r14, rax
	mov	QWORD PTR bitD4$10[rbp-240], r14
	and	esi, 7
	mov	rax, QWORD PTR [r14]
	mov	QWORD PTR val$1$[rsp], rax
$LN147@HUF_decomp:
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 796  :         for ( ; (endSignal) & (op4 < olimit); ) {

	mov	rax, QWORD PTR oend$1$[rbp-256]
	mov	r11, QWORD PTR DTable$[rbp-256]
	add	rax, -7
	cmp	r9, rax
	setb	cl

; 835  :             endSignal = (U32)LIKELY(

	xor	eax, eax
	test	edx, edx
	sete	al
	xor	edx, edx
	and	ecx, eax
	cmp	DWORD PTR $T5[rsp], edx
	cmove	edx, ecx
	xor	eax, eax
	cmp	DWORD PTR $T2[rsp], eax
	sete	al
	and	edx, eax
	xor	eax, eax
	cmp	DWORD PTR $T6[rsp], eax
	cmove	eax, edx
	mov	rdx, QWORD PTR val$1$[rsp]
	test	eax, eax
	jne	$LL2@HUF_decomp
; File E:\dev\pyzstd\lib\common\bitstream.h

; 405  :     bitD->ptr -= bitD->bitsConsumed >> 3;

	mov	QWORD PTR bitD3$9[rbp-240], r15
	mov	QWORD PTR bitD2$8[rbp-240], r12
	mov	QWORD PTR bitD1$7[rbp-240], r13
	mov	QWORD PTR p$1$[rsp], r9
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 796  :         for ( ; (endSignal) & (op4 < olimit); ) {

	jmp	SHORT $LN584@HUF_decomp
$LN583@HUF_decomp:
	mov	rax, QWORD PTR bitD1$7[rsp]
	mov	ebx, DWORD PTR bitD2$8[rbp-248]
	mov	QWORD PTR val$1$[rsp], rax
	mov	rax, QWORD PTR bitD2$8[rbp-256]
	mov	QWORD PTR val$1$[rsp], rax
	mov	rax, QWORD PTR bitD3$9[rbp-256]
	mov	QWORD PTR val$1$[rsp], rax
	mov	rax, QWORD PTR bitD4$10[rbp-256]
	mov	QWORD PTR val$1$[rsp], rax
$LN584@HUF_decomp:

; 836  :                         (BIT_reloadDStreamFast(&bitD1) == BIT_DStream_unfinished)
; 837  :                       & (BIT_reloadDStreamFast(&bitD2) == BIT_DStream_unfinished)
; 838  :                       & (BIT_reloadDStreamFast(&bitD3) == BIT_DStream_unfinished)
; 839  :                       & (BIT_reloadDStreamFast(&bitD4) == BIT_DStream_unfinished));
; 840  : #endif
; 841  :         }
; 842  : 
; 843  :         /* check corruption */
; 844  :         if (op1 > opStart2) return ERROR(corruption_detected);

	mov	DWORD PTR bitD4$1$[rsp], esi
	mov	DWORD PTR bitD3$1$[rsp], r10d
	mov	DWORD PTR bitD2$1$[rsp], ebx
	mov	DWORD PTR bitD1$1$[rbp-256], edi
	cmp	r8, QWORD PTR opStart2$1$[rbp-256]
	ja	$LN582@HUF_decomp

; 845  :         if (op2 > opStart3) return ERROR(corruption_detected);

	mov	rcx, QWORD PTR opStart3$1$[rbp-256]
	cmp	QWORD PTR p$1$[rsp], rcx
	ja	$LN582@HUF_decomp

; 846  :         if (op3 > opStart4) return ERROR(corruption_detected);

	mov	rcx, QWORD PTR opStart4$1$[rbp-256]
	cmp	QWORD PTR p$1$[rsp], rcx
	ja	$LN582@HUF_decomp

; 847  :         /* note : op4 already verified within main loop */
; 848  : 
; 849  :         /* finish bitStreams one by one */
; 850  :         HUF_decodeStreamX2(op1, &bitD1, opStart2, dt, dtLog);

	mov	r14, QWORD PTR val$1$[rsp]
	mov	esi, 1
	mov	r15d, DWORD PTR dtLog$1$[rsp]
$LN586@HUF_decomp:
; File E:\dev\pyzstd\lib\common\bitstream.h

; 418  :     if (bitD->bitsConsumed > (sizeof(bitD->bitContainer)*8))  /* overflow detected, like end of stream */

	mov	rdx, QWORD PTR bitD1$7[rbp-232]
	cmp	edi, 64					; 00000040H
	jbe	SHORT $LN164@HUF_decomp

; 419  :         return BIT_DStream_overflow;

	mov	r9d, 3
	jmp	SHORT $LN163@HUF_decomp
$LN164@HUF_decomp:

; 420  : 
; 421  :     if (bitD->ptr >= bitD->limitPtr) {

	cmp	r13, QWORD PTR bitD1$7[rbp-224]
	jb	SHORT $LN165@HUF_decomp

; 405  :     bitD->ptr -= bitD->bitsConsumed >> 3;

	mov	eax, edi

; 406  :     bitD->bitsConsumed &= 7;

	and	edi, 7
	shr	rax, 3
	sub	r13, rax

; 422  :         return BIT_reloadDStreamFast(bitD);

	xor	r9d, r9d
	jmp	SHORT $LN585@HUF_decomp
$LN165@HUF_decomp:

; 423  :     }
; 424  :     if (bitD->ptr == bitD->start) {

	cmp	r13, rdx
	jne	SHORT $LN166@HUF_decomp

; 425  :         if (bitD->bitsConsumed < sizeof(bitD->bitContainer)*8) return BIT_DStream_endOfBuffer;

	cmp	edi, 64					; 00000040H
	sbb	r9d, r9d
	add	r9d, 2

; 426  :         return BIT_DStream_completed;

	jmp	SHORT $LN163@HUF_decomp
$LN166@HUF_decomp:

; 427  :     }
; 428  :     /* start < ptr < limitPtr */
; 429  :     {   U32 nbBytes = bitD->bitsConsumed >> 3;

	mov	edx, edi

; 431  :         if (bitD->ptr - nbBytes < bitD->start) {

	mov	rcx, r13
	shr	edx, 3
	xor	r9d, r9d
	mov	eax, edx
	sub	rcx, rax
	cmp	rcx, QWORD PTR bitD1$7[rbp-232]
	jae	SHORT $LN168@HUF_decomp

; 432  :             nbBytes = (U32)(bitD->ptr - bitD->start);  /* ptr > start */

	mov	edx, DWORD PTR bitD1$7[rbp-240]

; 433  :             result = BIT_DStream_endOfBuffer;

	mov	r9d, esi
	sub	edx, DWORD PTR bitD1$7[rbp-232]
$LN168@HUF_decomp:

; 434  :         }
; 435  :         bitD->ptr -= nbBytes;

	mov	eax, edx
	sub	r13, rax

; 436  :         bitD->bitsConsumed -= nbBytes*8;

	imul	eax, edx, -8				; fffffff8H

; 437  :         bitD->bitContainer = MEM_readLEST(bitD->ptr);   /* reminder : srcSize > sizeof(bitD->bitContainer), otherwise bitD->ptr == bitD->start */
; 438  :         return result;

	mov	rdx, QWORD PTR bitD1$7[rbp-232]
	add	edi, eax
$LN585@HUF_decomp:
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 702  :     while ((BIT_reloadDStream(bitDPtr) == BIT_DStream_unfinished) & (p < pEnd-(sizeof(bitDPtr->bitContainer)-1))) {

	mov	r14, QWORD PTR [r13]
	mov	QWORD PTR bitD1$7[rbp-240], r13
$LN163@HUF_decomp:
	mov	rax, QWORD PTR opStart2$1$[rbp-256]
	xor	ecx, ecx
	add	rax, -7
	cmp	r8, rax
	setb	cl
	xor	eax, eax
	test	r9d, r9d
	sete	al
	test	ecx, eax
	je	$LN571@HUF_decomp
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, edi
	mov	r9d, r15d
	and	ecx, 63					; 0000003fH
	neg	r9d
	and	r9d, 63					; 0000003fH
	mov	rax, r14
	shl	rax, cl
	mov	rdx, r14
	mov	ecx, r9d
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	lea	rcx, QWORD PTR [r11+rax*4]
	movzx	eax, WORD PTR [r11+rax*4+4]
	mov	WORD PTR [r8], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rcx+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	edi, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 703  :         HUF_DECODE_SYMBOLX2_2(p, bitDPtr);

	movzx	eax, BYTE PTR [rcx+7]
	add	r8, rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, edi
	and	ecx, 63					; 0000003fH

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rax, r14
	shl	rax, cl
	mov	ecx, r9d
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	lea	rcx, QWORD PTR [r11+rax*4]
	movzx	eax, WORD PTR [r11+rax*4+4]
	mov	WORD PTR [r8], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rcx+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	edi, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 704  :         HUF_DECODE_SYMBOLX2_1(p, bitDPtr);

	movzx	eax, BYTE PTR [rcx+7]
	add	r8, rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, edi
	and	ecx, 63					; 0000003fH
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 704  :         HUF_DECODE_SYMBOLX2_1(p, bitDPtr);

	mov	QWORD PTR dst$[rbp-256], r8
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	shl	rdx, cl
	mov	ecx, r9d
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	movzx	eax, WORD PTR [r11+rdx*4+4]
	mov	WORD PTR [r8], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	r8d, BYTE PTR [r11+rdx*4+6]

; 705  :         HUF_DECODE_SYMBOLX2_2(p, bitDPtr);

	movzx	eax, BYTE PTR [r11+rdx*4+7]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r8d, edi
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 705  :         HUF_DECODE_SYMBOLX2_2(p, bitDPtr);

	mov	rdi, QWORD PTR dst$[rbp-256]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, r8d
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 705  :         HUF_DECODE_SYMBOLX2_2(p, bitDPtr);

	add	rdi, rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	and	ecx, 63					; 0000003fH
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 705  :         HUF_DECODE_SYMBOLX2_2(p, bitDPtr);

	mov	QWORD PTR dst$[rbp-256], rdi
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rax, r14
	shl	rax, cl
	mov	ecx, r9d
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	lea	rcx, QWORD PTR [r11+rax*4]
	movzx	eax, WORD PTR [r11+rax*4+4]
	mov	WORD PTR [rdi], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	edi, BYTE PTR [rcx+6]

; 706  :         HUF_DECODE_SYMBOLX2_0(p, bitDPtr);

	movzx	eax, BYTE PTR [rcx+7]

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	add	edi, r8d

; 706  :         HUF_DECODE_SYMBOLX2_0(p, bitDPtr);

	mov	r8, QWORD PTR dst$[rbp-256]
	add	r8, rax

; 707  :     }

	jmp	$LN586@HUF_decomp
$LN571@HUF_decomp:
	mov	rcx, QWORD PTR opStart2$1$[rbp-256]
	mov	r9, r14
	mov	ebx, DWORD PTR dtLog$1$[rsp]
	add	rcx, -2
	mov	QWORD PTR tv3761[rsp], rcx
	mov	r10, rcx
	mov	DWORD PTR bitD1$1$[rbp-256], edi
$LL153@HUF_decomp:
; File E:\dev\pyzstd\lib\common\bitstream.h

; 418  :     if (bitD->bitsConsumed > (sizeof(bitD->bitContainer)*8))  /* overflow detected, like end of stream */

	cmp	edi, 64					; 00000040H
	jbe	SHORT $LN198@HUF_decomp

; 419  :         return BIT_DStream_overflow;

	mov	edx, 3
	jmp	SHORT $LN197@HUF_decomp
$LN198@HUF_decomp:

; 420  : 
; 421  :     if (bitD->ptr >= bitD->limitPtr) {

	cmp	r13, QWORD PTR bitD1$7[rbp-224]
	jb	SHORT $LN199@HUF_decomp

; 405  :     bitD->ptr -= bitD->bitsConsumed >> 3;

	mov	eax, edi

; 406  :     bitD->bitsConsumed &= 7;

	and	edi, 7
	shr	rax, 3
	sub	r13, rax

; 422  :         return BIT_reloadDStreamFast(bitD);

	xor	edx, edx
	jmp	SHORT $LN587@HUF_decomp
$LN199@HUF_decomp:

; 423  :     }
; 424  :     if (bitD->ptr == bitD->start) {

	cmp	r13, rdx
	jne	SHORT $LN200@HUF_decomp

; 425  :         if (bitD->bitsConsumed < sizeof(bitD->bitContainer)*8) return BIT_DStream_endOfBuffer;

	cmp	edi, 64					; 00000040H
	sbb	eax, eax
	lea	edx, DWORD PTR [rax+2]

; 426  :         return BIT_DStream_completed;

	jmp	SHORT $LN197@HUF_decomp
$LN200@HUF_decomp:

; 427  :     }
; 428  :     /* start < ptr < limitPtr */
; 429  :     {   U32 nbBytes = bitD->bitsConsumed >> 3;

	mov	edx, edi

; 430  :         BIT_DStream_status result = BIT_DStream_unfinished;

	mov	DWORD PTR $T11[rbp-256], 0
	shr	edx, 3

; 431  :         if (bitD->ptr - nbBytes < bitD->start) {

	mov	rcx, r13
	mov	eax, edx
	sub	rcx, rax
	cmp	rcx, QWORD PTR bitD1$7[rbp-232]
	jae	SHORT $LN202@HUF_decomp

; 432  :             nbBytes = (U32)(bitD->ptr - bitD->start);  /* ptr > start */

	mov	edx, DWORD PTR bitD1$7[rbp-240]
	sub	edx, DWORD PTR bitD1$7[rbp-232]

; 433  :             result = BIT_DStream_endOfBuffer;

	mov	DWORD PTR $T11[rbp-256], esi
$LN202@HUF_decomp:

; 434  :         }
; 435  :         bitD->ptr -= nbBytes;

	mov	eax, edx
	sub	r13, rax

; 436  :         bitD->bitsConsumed -= nbBytes*8;

	imul	eax, edx, -8				; fffffff8H
	mov	edx, DWORD PTR $T11[rbp-256]
	add	edi, eax
$LN587@HUF_decomp:
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 710  :     while ((BIT_reloadDStream(bitDPtr) == BIT_DStream_unfinished) & (p <= pEnd-2))

	mov	r9, QWORD PTR [r13]
	mov	QWORD PTR bitD1$7[rbp-240], r13
$LN197@HUF_decomp:
	xor	ecx, ecx
	cmp	r8, r10
	setbe	cl
	xor	eax, eax
	test	edx, edx
	sete	al
	test	ecx, eax
	je	SHORT $LN493@HUF_decomp
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, edi
	mov	rdx, r9
	and	ecx, 63					; 0000003fH
	shl	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 662  :     size_t const val = BIT_lookBitsFast(DStream, dtLog);   /* note : dtLog >= 1 */

	mov	ecx, ebx
	neg	ecx
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	and	ecx, 63					; 0000003fH
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	movzx	eax, WORD PTR [r11+rdx*4+4]
	mov	WORD PTR [r8], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [r11+rdx*4+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	edi, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 711  :         HUF_DECODE_SYMBOLX2_0(p, bitDPtr);

	movzx	eax, BYTE PTR [r11+rdx*4+7]
	mov	rdx, QWORD PTR bitD1$7[rbp-232]
	add	r8, rax
	jmp	$LL153@HUF_decomp
$LN493@HUF_decomp:

; 712  : 
; 713  :     while (p <= pEnd-2)

	mov	ebx, DWORD PTR bitD2$1$[rsp]
	mov	r12, QWORD PTR bitD2$8[rbp-240]
	mov	DWORD PTR bitD1$1$[rbp-256], edi
	cmp	r8, r10
	ja	SHORT $LN554@HUF_decomp
	mov	eax, DWORD PTR dtLog$1$[rsp]
	mov	r13, QWORD PTR tv3761[rsp]
	neg	eax
	and	eax, 63					; 0000003fH
	mov	r10d, eax
	npad	12
$LL155@HUF_decomp:
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, edi
	mov	rdx, r9
	and	ecx, 63					; 0000003fH
	shl	rdx, cl
	mov	ecx, r10d
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	movzx	eax, WORD PTR [r11+rdx*4+4]
	mov	WORD PTR [r8], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [r11+rdx*4+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	edi, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 714  :         HUF_DECODE_SYMBOLX2_0(p, bitDPtr);   /* no need to reload : reached the end of DStream */

	movzx	eax, BYTE PTR [r11+rdx*4+7]
	add	r8, rax
	cmp	r8, r13
	jbe	SHORT $LL155@HUF_decomp
	mov	DWORD PTR bitD1$1$[rbp-256], edi
$LN554@HUF_decomp:

; 715  : 
; 716  :     if (p < pEnd)

	mov	edx, 64					; 00000040H
	cmp	r8, QWORD PTR opStart2$1$[rbp-256]
	jae	SHORT $LN223@HUF_decomp
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, edi
	and	ecx, 63					; 0000003fH
	shl	r9, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 671  :     size_t const val = BIT_lookBitsFast(DStream, dtLog);   /* note : dtLog >= 1 */

	mov	ecx, DWORD PTR dtLog$1$[rsp]
	neg	ecx
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	and	ecx, 63					; 0000003fH
	shr	r9, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 672  :     memcpy(op, dt+val, 1);

	movzx	eax, BYTE PTR [r11+r9*4+4]
	mov	BYTE PTR [r8], al

; 673  :     if (dt[val].length==1) BIT_skipBits(DStream, dt[val].nbBits);

	cmp	BYTE PTR [r11+r9*4+7], sil
	jne	SHORT $LN220@HUF_decomp
	movzx	eax, BYTE PTR [r11+r9*4+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	edi, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 673  :     if (dt[val].length==1) BIT_skipBits(DStream, dt[val].nbBits);

	jmp	SHORT $LN588@HUF_decomp
$LN220@HUF_decomp:

; 674  :     else {
; 675  :         if (DStream->bitsConsumed < (sizeof(DStream->bitContainer)*8)) {

	cmp	edi, edx
	jae	SHORT $LN223@HUF_decomp

; 676  :             BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [r11+r9*4+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	edi, eax
	cmp	edi, edx
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 677  :             if (DStream->bitsConsumed > (sizeof(DStream->bitContainer)*8))

	cmova	edi, edx
$LN588@HUF_decomp:

; 851  :         HUF_decodeStreamX2(op2, &bitD2, opStart3, dt, dtLog);

	mov	DWORD PTR bitD1$1$[rbp-256], edi
$LN223@HUF_decomp:
	mov	r14, QWORD PTR p$1$[rsp]
	mov	r15, QWORD PTR val$1$[rsp]
	mov	r10d, DWORD PTR dtLog$1$[rsp]
$LN590@HUF_decomp:
; File E:\dev\pyzstd\lib\common\bitstream.h

; 418  :     if (bitD->bitsConsumed > (sizeof(bitD->bitContainer)*8))  /* overflow detected, like end of stream */

	mov	rdx, QWORD PTR bitD2$8[rbp-232]
	mov	r9, QWORD PTR opStart3$1$[rbp-256]
	cmp	ebx, 64					; 00000040H
	jbe	SHORT $LN245@HUF_decomp

; 419  :         return BIT_DStream_overflow;

	mov	r8d, 3
	jmp	SHORT $LN244@HUF_decomp
$LN245@HUF_decomp:

; 420  : 
; 421  :     if (bitD->ptr >= bitD->limitPtr) {

	cmp	r12, QWORD PTR bitD2$8[rbp-224]
	jb	SHORT $LN246@HUF_decomp

; 405  :     bitD->ptr -= bitD->bitsConsumed >> 3;

	mov	eax, ebx

; 406  :     bitD->bitsConsumed &= 7;

	and	ebx, 7
	shr	rax, 3
	sub	r12, rax

; 422  :         return BIT_reloadDStreamFast(bitD);

	xor	r8d, r8d
	jmp	SHORT $LN589@HUF_decomp
$LN246@HUF_decomp:

; 423  :     }
; 424  :     if (bitD->ptr == bitD->start) {

	cmp	r12, rdx
	jne	SHORT $LN247@HUF_decomp

; 425  :         if (bitD->bitsConsumed < sizeof(bitD->bitContainer)*8) return BIT_DStream_endOfBuffer;

	cmp	ebx, 64					; 00000040H
	sbb	r8d, r8d
	add	r8d, 2

; 426  :         return BIT_DStream_completed;

	jmp	SHORT $LN244@HUF_decomp
$LN247@HUF_decomp:

; 427  :     }
; 428  :     /* start < ptr < limitPtr */
; 429  :     {   U32 nbBytes = bitD->bitsConsumed >> 3;

	mov	edx, ebx

; 431  :         if (bitD->ptr - nbBytes < bitD->start) {

	mov	rcx, r12
	shr	edx, 3
	xor	r8d, r8d
	mov	eax, edx
	sub	rcx, rax
	cmp	rcx, QWORD PTR bitD2$8[rbp-232]
	jae	SHORT $LN249@HUF_decomp

; 432  :             nbBytes = (U32)(bitD->ptr - bitD->start);  /* ptr > start */

	mov	edx, DWORD PTR bitD2$8[rbp-240]

; 433  :             result = BIT_DStream_endOfBuffer;

	mov	r8d, esi
	sub	edx, DWORD PTR bitD2$8[rbp-232]
$LN249@HUF_decomp:
	mov	r9, QWORD PTR opStart3$1$[rbp-256]

; 434  :         }
; 435  :         bitD->ptr -= nbBytes;

	mov	eax, edx
	sub	r12, rax

; 436  :         bitD->bitsConsumed -= nbBytes*8;

	imul	eax, edx, -8				; fffffff8H

; 437  :         bitD->bitContainer = MEM_readLEST(bitD->ptr);   /* reminder : srcSize > sizeof(bitD->bitContainer), otherwise bitD->ptr == bitD->start */
; 438  :         return result;

	mov	rdx, QWORD PTR bitD2$8[rbp-232]
	add	ebx, eax
$LN589@HUF_decomp:
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 702  :     while ((BIT_reloadDStream(bitDPtr) == BIT_DStream_unfinished) & (p < pEnd-(sizeof(bitDPtr->bitContainer)-1))) {

	mov	r15, QWORD PTR [r12]
	mov	QWORD PTR bitD2$8[rbp-240], r12
$LN244@HUF_decomp:
	xor	ecx, ecx
	lea	rax, QWORD PTR [r9-7]
	cmp	r14, rax
	setb	cl
	xor	eax, eax
	test	r8d, r8d
	sete	al
	test	ecx, eax
	je	$LN574@HUF_decomp
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, ebx
	mov	r9d, r10d
	and	ecx, 63					; 0000003fH
	neg	r9d
	and	r9d, 63					; 0000003fH
	mov	rax, r15
	shl	rax, cl
	mov	rdx, r15
	mov	ecx, r9d
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	lea	rcx, QWORD PTR [r11+rax*4]
	movzx	eax, WORD PTR [r11+rax*4+4]
	mov	WORD PTR [r14], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rcx+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	ebx, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 703  :         HUF_DECODE_SYMBOLX2_2(p, bitDPtr);

	movzx	eax, BYTE PTR [rcx+7]
	add	r14, rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, ebx
	and	ecx, 63					; 0000003fH

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rax, r15
	shl	rax, cl
	mov	ecx, r9d
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	lea	rcx, QWORD PTR [r11+rax*4]
	movzx	eax, WORD PTR [r11+rax*4+4]
	mov	WORD PTR [r14], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rcx+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	ebx, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 704  :         HUF_DECODE_SYMBOLX2_1(p, bitDPtr);

	movzx	eax, BYTE PTR [rcx+7]
	add	r14, rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, ebx
	and	ecx, 63					; 0000003fH

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	shl	rdx, cl
	mov	ecx, r9d
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	movzx	eax, WORD PTR [r11+rdx*4+4]
	mov	WORD PTR [r14], ax

; 705  :         HUF_DECODE_SYMBOLX2_2(p, bitDPtr);

	movzx	eax, BYTE PTR [r11+rdx*4+7]

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	r8d, BYTE PTR [r11+rdx*4+6]

; 705  :         HUF_DECODE_SYMBOLX2_2(p, bitDPtr);

	add	r14, rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r8d, ebx

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rax, r15
	mov	ecx, r8d
	and	ecx, 63					; 0000003fH
	shl	rax, cl
	mov	ecx, r9d
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	lea	rcx, QWORD PTR [r11+rax*4]
	movzx	eax, WORD PTR [r11+rax*4+4]
	mov	WORD PTR [r14], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	ebx, BYTE PTR [rcx+6]

; 706  :         HUF_DECODE_SYMBOLX2_0(p, bitDPtr);

	movzx	eax, BYTE PTR [rcx+7]

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	add	ebx, r8d

; 706  :         HUF_DECODE_SYMBOLX2_0(p, bitDPtr);

	add	r14, rax

; 707  :     }

	jmp	$LN590@HUF_decomp
$LN574@HUF_decomp:
	mov	r10d, DWORD PTR bitD3$1$[rsp]
	lea	rcx, QWORD PTR [r9-2]
	mov	edi, DWORD PTR dtLog$1$[rsp]
	mov	r8, r14
	mov	QWORD PTR val$1$[rsp], r15
	mov	r9, QWORD PTR val$1$[rsp]
	mov	r15, QWORD PTR bitD3$9[rbp-240]
	mov	QWORD PTR tv3746[rsp], rcx
	mov	DWORD PTR bitD2$1$[rsp], ebx
$LL234@HUF_decomp:
; File E:\dev\pyzstd\lib\common\bitstream.h

; 418  :     if (bitD->bitsConsumed > (sizeof(bitD->bitContainer)*8))  /* overflow detected, like end of stream */

	cmp	ebx, 64					; 00000040H
	jbe	SHORT $LN279@HUF_decomp

; 419  :         return BIT_DStream_overflow;

	mov	edx, 3
	jmp	SHORT $LN278@HUF_decomp
$LN279@HUF_decomp:

; 420  : 
; 421  :     if (bitD->ptr >= bitD->limitPtr) {

	cmp	r12, QWORD PTR bitD2$8[rbp-224]
	jb	SHORT $LN280@HUF_decomp

; 405  :     bitD->ptr -= bitD->bitsConsumed >> 3;

	mov	eax, ebx

; 406  :     bitD->bitsConsumed &= 7;

	and	ebx, 7
	shr	rax, 3
	sub	r12, rax

; 422  :         return BIT_reloadDStreamFast(bitD);

	xor	edx, edx
	jmp	SHORT $LN591@HUF_decomp
$LN280@HUF_decomp:

; 423  :     }
; 424  :     if (bitD->ptr == bitD->start) {

	cmp	r12, rdx
	jne	SHORT $LN281@HUF_decomp

; 425  :         if (bitD->bitsConsumed < sizeof(bitD->bitContainer)*8) return BIT_DStream_endOfBuffer;

	cmp	ebx, 64					; 00000040H
	sbb	eax, eax
	lea	edx, DWORD PTR [rax+2]

; 426  :         return BIT_DStream_completed;

	jmp	SHORT $LN278@HUF_decomp
$LN281@HUF_decomp:

; 427  :     }
; 428  :     /* start < ptr < limitPtr */
; 429  :     {   U32 nbBytes = bitD->bitsConsumed >> 3;

	mov	edx, ebx

; 430  :         BIT_DStream_status result = BIT_DStream_unfinished;

	mov	DWORD PTR $T1[rsp], 0
	shr	edx, 3

; 431  :         if (bitD->ptr - nbBytes < bitD->start) {

	mov	rcx, r12
	mov	eax, edx
	sub	rcx, rax
	cmp	rcx, QWORD PTR bitD2$8[rbp-232]
	jae	SHORT $LN283@HUF_decomp

; 432  :             nbBytes = (U32)(bitD->ptr - bitD->start);  /* ptr > start */

	mov	edx, DWORD PTR bitD2$8[rbp-240]
	sub	edx, DWORD PTR bitD2$8[rbp-232]

; 433  :             result = BIT_DStream_endOfBuffer;

	mov	DWORD PTR $T1[rsp], esi
$LN283@HUF_decomp:

; 434  :         }
; 435  :         bitD->ptr -= nbBytes;

	mov	eax, edx
	sub	r12, rax

; 436  :         bitD->bitsConsumed -= nbBytes*8;

	imul	eax, edx, -8				; fffffff8H
	mov	edx, DWORD PTR $T1[rsp]
	add	ebx, eax
$LN591@HUF_decomp:
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 710  :     while ((BIT_reloadDStream(bitDPtr) == BIT_DStream_unfinished) & (p <= pEnd-2))

	mov	r9, QWORD PTR [r12]
	mov	QWORD PTR bitD2$8[rbp-240], r12
$LN278@HUF_decomp:
	xor	ecx, ecx
	cmp	r8, QWORD PTR tv3746[rsp]
	setbe	cl
	xor	eax, eax
	test	edx, edx
	sete	al
	test	ecx, eax
	je	SHORT $LN496@HUF_decomp
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, ebx
	mov	rdx, r9
	and	ecx, 63					; 0000003fH
	shl	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 662  :     size_t const val = BIT_lookBitsFast(DStream, dtLog);   /* note : dtLog >= 1 */

	mov	ecx, edi
	neg	ecx
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	and	ecx, 63					; 0000003fH
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	movzx	eax, WORD PTR [r11+rdx*4+4]
	mov	WORD PTR [r8], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [r11+rdx*4+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	ebx, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 711  :         HUF_DECODE_SYMBOLX2_0(p, bitDPtr);

	movzx	eax, BYTE PTR [r11+rdx*4+7]
	mov	rdx, QWORD PTR bitD2$8[rbp-232]
	add	r8, rax
	jmp	$LL234@HUF_decomp
$LN496@HUF_decomp:
	mov	DWORD PTR bitD2$1$[rsp], ebx

; 712  : 
; 713  :     while (p <= pEnd-2)

	cmp	r8, QWORD PTR tv3746[rsp]
	ja	SHORT $LN555@HUF_decomp
	mov	eax, DWORD PTR dtLog$1$[rsp]
	mov	rdi, QWORD PTR tv3746[rsp]
	neg	eax
	and	eax, 63					; 0000003fH
	mov	r13d, eax
	npad	9
$LL236@HUF_decomp:
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, ebx
	mov	rdx, r9
	and	ecx, 63					; 0000003fH
	shl	rdx, cl
	mov	ecx, r13d
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	movzx	eax, WORD PTR [r11+rdx*4+4]
	mov	WORD PTR [r8], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [r11+rdx*4+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	ebx, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 714  :         HUF_DECODE_SYMBOLX2_0(p, bitDPtr);   /* no need to reload : reached the end of DStream */

	movzx	eax, BYTE PTR [r11+rdx*4+7]
	add	r8, rax
	cmp	r8, rdi
	jbe	SHORT $LL236@HUF_decomp
	mov	DWORD PTR bitD2$1$[rsp], ebx
$LN555@HUF_decomp:

; 715  : 
; 716  :     if (p < pEnd)

	cmp	r8, QWORD PTR opStart3$1$[rbp-256]
	jae	SHORT $LN304@HUF_decomp
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, ebx
	and	ecx, 63					; 0000003fH
	shl	r9, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 671  :     size_t const val = BIT_lookBitsFast(DStream, dtLog);   /* note : dtLog >= 1 */

	mov	ecx, DWORD PTR dtLog$1$[rsp]
	neg	ecx
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	and	ecx, 63					; 0000003fH
	shr	r9, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 672  :     memcpy(op, dt+val, 1);

	movzx	eax, BYTE PTR [r11+r9*4+4]
	mov	BYTE PTR [r8], al

; 673  :     if (dt[val].length==1) BIT_skipBits(DStream, dt[val].nbBits);

	cmp	BYTE PTR [r11+r9*4+7], sil
	jne	SHORT $LN301@HUF_decomp
	movzx	eax, BYTE PTR [r11+r9*4+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	ebx, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 673  :     if (dt[val].length==1) BIT_skipBits(DStream, dt[val].nbBits);

	jmp	SHORT $LN592@HUF_decomp
$LN301@HUF_decomp:

; 674  :     else {
; 675  :         if (DStream->bitsConsumed < (sizeof(DStream->bitContainer)*8)) {

	cmp	ebx, 64					; 00000040H
	jae	SHORT $LN304@HUF_decomp

; 676  :             BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [r11+r9*4+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	ebx, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 677  :             if (DStream->bitsConsumed > (sizeof(DStream->bitContainer)*8))

	mov	eax, 64					; 00000040H
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	cmp	ebx, 64					; 00000040H
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 677  :             if (DStream->bitsConsumed > (sizeof(DStream->bitContainer)*8))

	cmova	ebx, eax
$LN592@HUF_decomp:

; 852  :         HUF_decodeStreamX2(op3, &bitD3, opStart4, dt, dtLog);

	mov	DWORD PTR bitD2$1$[rsp], ebx
$LN304@HUF_decomp:
	mov	r14, QWORD PTR p$1$[rsp]
	mov	r12d, 1
	mov	rsi, QWORD PTR val$1$[rsp]
	mov	ebx, DWORD PTR dtLog$1$[rsp]
$LN594@HUF_decomp:
; File E:\dev\pyzstd\lib\common\bitstream.h

; 418  :     if (bitD->bitsConsumed > (sizeof(bitD->bitContainer)*8))  /* overflow detected, like end of stream */

	mov	rdx, QWORD PTR bitD3$9[rbp-232]
	mov	r9, QWORD PTR opStart4$1$[rbp-256]
	cmp	r10d, 64				; 00000040H
	jbe	SHORT $LN326@HUF_decomp

; 419  :         return BIT_DStream_overflow;

	mov	r8d, 3
	jmp	SHORT $LN325@HUF_decomp
$LN326@HUF_decomp:

; 420  : 
; 421  :     if (bitD->ptr >= bitD->limitPtr) {

	cmp	r15, QWORD PTR bitD3$9[rbp-224]
	jb	SHORT $LN327@HUF_decomp

; 405  :     bitD->ptr -= bitD->bitsConsumed >> 3;

	mov	eax, r10d

; 406  :     bitD->bitsConsumed &= 7;

	and	r10d, 7
	shr	rax, 3
	sub	r15, rax

; 422  :         return BIT_reloadDStreamFast(bitD);

	xor	r8d, r8d
	jmp	SHORT $LN593@HUF_decomp
$LN327@HUF_decomp:

; 423  :     }
; 424  :     if (bitD->ptr == bitD->start) {

	cmp	r15, rdx
	jne	SHORT $LN328@HUF_decomp

; 425  :         if (bitD->bitsConsumed < sizeof(bitD->bitContainer)*8) return BIT_DStream_endOfBuffer;

	cmp	r10d, 64				; 00000040H
	sbb	r8d, r8d
	add	r8d, 2

; 426  :         return BIT_DStream_completed;

	jmp	SHORT $LN325@HUF_decomp
$LN328@HUF_decomp:

; 427  :     }
; 428  :     /* start < ptr < limitPtr */
; 429  :     {   U32 nbBytes = bitD->bitsConsumed >> 3;

	mov	edx, r10d

; 431  :         if (bitD->ptr - nbBytes < bitD->start) {

	mov	rcx, r15
	shr	edx, 3
	xor	r8d, r8d
	mov	eax, edx
	sub	rcx, rax
	cmp	rcx, QWORD PTR bitD3$9[rbp-232]
	jae	SHORT $LN330@HUF_decomp

; 432  :             nbBytes = (U32)(bitD->ptr - bitD->start);  /* ptr > start */

	mov	edx, DWORD PTR bitD3$9[rbp-240]

; 433  :             result = BIT_DStream_endOfBuffer;

	mov	r8d, r12d
	sub	edx, DWORD PTR bitD3$9[rbp-232]
$LN330@HUF_decomp:
	mov	r9, QWORD PTR opStart4$1$[rbp-256]

; 434  :         }
; 435  :         bitD->ptr -= nbBytes;

	mov	eax, edx
	sub	r15, rax

; 436  :         bitD->bitsConsumed -= nbBytes*8;

	imul	eax, edx, -8				; fffffff8H

; 437  :         bitD->bitContainer = MEM_readLEST(bitD->ptr);   /* reminder : srcSize > sizeof(bitD->bitContainer), otherwise bitD->ptr == bitD->start */
; 438  :         return result;

	mov	rdx, QWORD PTR bitD3$9[rbp-232]
	add	r10d, eax
$LN593@HUF_decomp:
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 702  :     while ((BIT_reloadDStream(bitDPtr) == BIT_DStream_unfinished) & (p < pEnd-(sizeof(bitDPtr->bitContainer)-1))) {

	mov	rsi, QWORD PTR [r15]
	mov	QWORD PTR bitD3$9[rbp-240], r15
$LN325@HUF_decomp:
	xor	ecx, ecx
	lea	rax, QWORD PTR [r9-7]
	cmp	r14, rax
	setb	cl
	xor	eax, eax
	test	r8d, r8d
	sete	al
	test	ecx, eax
	je	$LN577@HUF_decomp
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, r10d
	mov	r9d, ebx
	and	ecx, 63					; 0000003fH
	neg	r9d
	and	r9d, 63					; 0000003fH
	mov	rax, rsi
	shl	rax, cl
	mov	rdx, rsi
	mov	ecx, r9d
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	lea	rcx, QWORD PTR [r11+rax*4]
	movzx	eax, WORD PTR [r11+rax*4+4]
	mov	WORD PTR [r14], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rcx+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r10d, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 703  :         HUF_DECODE_SYMBOLX2_2(p, bitDPtr);

	movzx	eax, BYTE PTR [rcx+7]
	add	r14, rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, r10d
	and	ecx, 63					; 0000003fH

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rax, rsi
	shl	rax, cl
	mov	ecx, r9d
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	lea	rcx, QWORD PTR [r11+rax*4]
	movzx	eax, WORD PTR [r11+rax*4+4]
	mov	WORD PTR [r14], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rcx+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r10d, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 704  :         HUF_DECODE_SYMBOLX2_1(p, bitDPtr);

	movzx	eax, BYTE PTR [rcx+7]
	add	r14, rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, r10d
	and	ecx, 63					; 0000003fH

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	shl	rdx, cl
	mov	ecx, r9d
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	movzx	eax, WORD PTR [r11+rdx*4+4]
	mov	WORD PTR [r14], ax

; 705  :         HUF_DECODE_SYMBOLX2_2(p, bitDPtr);

	movzx	eax, BYTE PTR [r11+rdx*4+7]

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	r8d, BYTE PTR [r11+rdx*4+6]

; 705  :         HUF_DECODE_SYMBOLX2_2(p, bitDPtr);

	add	r14, rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r8d, r10d

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rax, rsi
	mov	ecx, r8d
	and	ecx, 63					; 0000003fH
	shl	rax, cl
	mov	ecx, r9d
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	lea	rcx, QWORD PTR [r11+rax*4]
	movzx	eax, WORD PTR [r11+rax*4+4]
	mov	WORD PTR [r14], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	r10d, BYTE PTR [rcx+6]

; 706  :         HUF_DECODE_SYMBOLX2_0(p, bitDPtr);

	movzx	eax, BYTE PTR [rcx+7]

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	add	r10d, r8d

; 706  :         HUF_DECODE_SYMBOLX2_0(p, bitDPtr);

	add	r14, rax

; 707  :     }

	jmp	$LN594@HUF_decomp
$LN577@HUF_decomp:
	mov	edi, DWORD PTR dtLog$1$[rsp]
	lea	rcx, QWORD PTR [r9-2]
	mov	QWORD PTR val$1$[rsp], rsi
	mov	r9, QWORD PTR val$1$[rsp]
	mov	esi, DWORD PTR bitD4$1$[rsp]
	mov	QWORD PTR p$1$[rsp], r14
	mov	r8, QWORD PTR p$1$[rsp]
	mov	r14, QWORD PTR bitD4$10[rbp-240]
	mov	QWORD PTR tv3731[rsp], rcx
	mov	DWORD PTR bitD3$1$[rsp], r10d
$LL315@HUF_decomp:
; File E:\dev\pyzstd\lib\common\bitstream.h

; 418  :     if (bitD->bitsConsumed > (sizeof(bitD->bitContainer)*8))  /* overflow detected, like end of stream */

	cmp	r10d, 64				; 00000040H
	jbe	SHORT $LN360@HUF_decomp

; 419  :         return BIT_DStream_overflow;

	mov	edx, 3
	jmp	SHORT $LN359@HUF_decomp
$LN360@HUF_decomp:

; 420  : 
; 421  :     if (bitD->ptr >= bitD->limitPtr) {

	cmp	r15, QWORD PTR bitD3$9[rbp-224]
	jb	SHORT $LN361@HUF_decomp

; 405  :     bitD->ptr -= bitD->bitsConsumed >> 3;

	mov	eax, r10d

; 406  :     bitD->bitsConsumed &= 7;

	and	r10d, 7
	shr	rax, 3
	sub	r15, rax

; 422  :         return BIT_reloadDStreamFast(bitD);

	xor	edx, edx
	jmp	SHORT $LN595@HUF_decomp
$LN361@HUF_decomp:

; 423  :     }
; 424  :     if (bitD->ptr == bitD->start) {

	cmp	r15, rdx
	jne	SHORT $LN362@HUF_decomp

; 425  :         if (bitD->bitsConsumed < sizeof(bitD->bitContainer)*8) return BIT_DStream_endOfBuffer;

	cmp	r10d, 64				; 00000040H
	sbb	eax, eax
	lea	edx, DWORD PTR [rax+2]

; 426  :         return BIT_DStream_completed;

	jmp	SHORT $LN359@HUF_decomp
$LN362@HUF_decomp:

; 427  :     }
; 428  :     /* start < ptr < limitPtr */
; 429  :     {   U32 nbBytes = bitD->bitsConsumed >> 3;

	mov	edx, r10d

; 430  :         BIT_DStream_status result = BIT_DStream_unfinished;

	mov	DWORD PTR $T3[rsp], 0
	shr	edx, 3

; 431  :         if (bitD->ptr - nbBytes < bitD->start) {

	mov	rcx, r15
	mov	eax, edx
	sub	rcx, rax
	cmp	rcx, QWORD PTR bitD3$9[rbp-232]
	jae	SHORT $LN364@HUF_decomp

; 432  :             nbBytes = (U32)(bitD->ptr - bitD->start);  /* ptr > start */

	mov	edx, DWORD PTR bitD3$9[rbp-240]
	sub	edx, DWORD PTR bitD3$9[rbp-232]

; 433  :             result = BIT_DStream_endOfBuffer;

	mov	DWORD PTR $T3[rsp], r12d
$LN364@HUF_decomp:

; 434  :         }
; 435  :         bitD->ptr -= nbBytes;

	mov	eax, edx
	sub	r15, rax

; 436  :         bitD->bitsConsumed -= nbBytes*8;

	imul	eax, edx, -8				; fffffff8H
	mov	edx, DWORD PTR $T3[rsp]
	add	r10d, eax
$LN595@HUF_decomp:
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 710  :     while ((BIT_reloadDStream(bitDPtr) == BIT_DStream_unfinished) & (p <= pEnd-2))

	mov	r9, QWORD PTR [r15]
	mov	QWORD PTR bitD3$9[rbp-240], r15
$LN359@HUF_decomp:
	xor	ecx, ecx
	cmp	r8, QWORD PTR tv3731[rsp]
	setbe	cl
	xor	eax, eax
	test	edx, edx
	sete	al
	test	ecx, eax
	je	SHORT $LN499@HUF_decomp
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, r10d
	mov	rdx, r9
	and	ecx, 63					; 0000003fH
	shl	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 662  :     size_t const val = BIT_lookBitsFast(DStream, dtLog);   /* note : dtLog >= 1 */

	mov	ecx, edi
	neg	ecx
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	and	ecx, 63					; 0000003fH
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	movzx	eax, WORD PTR [r11+rdx*4+4]
	mov	WORD PTR [r8], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [r11+rdx*4+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r10d, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 711  :         HUF_DECODE_SYMBOLX2_0(p, bitDPtr);

	movzx	eax, BYTE PTR [r11+rdx*4+7]
	mov	rdx, QWORD PTR bitD3$9[rbp-232]
	add	r8, rax
	jmp	$LL315@HUF_decomp
$LN499@HUF_decomp:
	mov	DWORD PTR bitD3$1$[rsp], r10d

; 712  : 
; 713  :     while (p <= pEnd-2)

	cmp	r8, QWORD PTR tv3731[rsp]
	ja	SHORT $LN556@HUF_decomp
	mov	eax, DWORD PTR dtLog$1$[rsp]
	mov	r13, QWORD PTR tv3731[rsp]
	neg	eax
	and	eax, 63					; 0000003fH
	mov	edi, eax
	npad	12
$LL317@HUF_decomp:
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, r10d
	mov	rdx, r9
	and	ecx, 63					; 0000003fH
	shl	rdx, cl
	mov	ecx, edi
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	movzx	eax, WORD PTR [r11+rdx*4+4]
	mov	WORD PTR [r8], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [r11+rdx*4+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r10d, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 714  :         HUF_DECODE_SYMBOLX2_0(p, bitDPtr);   /* no need to reload : reached the end of DStream */

	movzx	eax, BYTE PTR [r11+rdx*4+7]
	add	r8, rax
	cmp	r8, r13
	jbe	SHORT $LL317@HUF_decomp
	mov	DWORD PTR bitD3$1$[rsp], r10d
$LN556@HUF_decomp:

; 715  : 
; 716  :     if (p < pEnd)

	cmp	r8, QWORD PTR opStart4$1$[rbp-256]
	jae	SHORT $LN385@HUF_decomp
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, r10d
	and	ecx, 63					; 0000003fH
	shl	r9, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 671  :     size_t const val = BIT_lookBitsFast(DStream, dtLog);   /* note : dtLog >= 1 */

	mov	ecx, DWORD PTR dtLog$1$[rsp]
	neg	ecx
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	and	ecx, 63					; 0000003fH
	shr	r9, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 672  :     memcpy(op, dt+val, 1);

	movzx	eax, BYTE PTR [r11+r9*4+4]
	mov	BYTE PTR [r8], al

; 673  :     if (dt[val].length==1) BIT_skipBits(DStream, dt[val].nbBits);

	cmp	BYTE PTR [r11+r9*4+7], r12b
	jne	SHORT $LN382@HUF_decomp
	movzx	eax, BYTE PTR [r11+r9*4+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r10d, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 673  :     if (dt[val].length==1) BIT_skipBits(DStream, dt[val].nbBits);

	jmp	SHORT $LN596@HUF_decomp
$LN382@HUF_decomp:

; 674  :     else {
; 675  :         if (DStream->bitsConsumed < (sizeof(DStream->bitContainer)*8)) {

	cmp	r10d, 64				; 00000040H
	jae	SHORT $LN385@HUF_decomp

; 676  :             BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [r11+r9*4+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r10d, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 677  :             if (DStream->bitsConsumed > (sizeof(DStream->bitContainer)*8))

	mov	eax, 64					; 00000040H
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	cmp	r10d, 64				; 00000040H
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 677  :             if (DStream->bitsConsumed > (sizeof(DStream->bitContainer)*8))

	cmova	r10d, eax
$LN596@HUF_decomp:

; 853  :         HUF_decodeStreamX2(op4, &bitD4, oend,     dt, dtLog);

	mov	DWORD PTR bitD3$1$[rsp], r10d
$LN385@HUF_decomp:
	mov	r9, QWORD PTR p$1$[rsp]
	mov	r15, QWORD PTR val$1$[rsp]
	mov	ebx, DWORD PTR dtLog$1$[rsp]
$LN598@HUF_decomp:
; File E:\dev\pyzstd\lib\common\bitstream.h

; 418  :     if (bitD->bitsConsumed > (sizeof(bitD->bitContainer)*8))  /* overflow detected, like end of stream */

	mov	rdx, QWORD PTR bitD4$10[rbp-232]
	cmp	esi, 64					; 00000040H
	jbe	SHORT $LN407@HUF_decomp

; 419  :         return BIT_DStream_overflow;

	mov	r8d, 3
	jmp	SHORT $LN406@HUF_decomp
$LN407@HUF_decomp:

; 420  : 
; 421  :     if (bitD->ptr >= bitD->limitPtr) {

	cmp	r14, QWORD PTR bitD4$10[rbp-224]
	jb	SHORT $LN408@HUF_decomp

; 405  :     bitD->ptr -= bitD->bitsConsumed >> 3;

	mov	eax, esi

; 406  :     bitD->bitsConsumed &= 7;

	and	esi, 7
	shr	rax, 3
	sub	r14, rax

; 422  :         return BIT_reloadDStreamFast(bitD);

	xor	r8d, r8d
	jmp	SHORT $LN597@HUF_decomp
$LN408@HUF_decomp:

; 423  :     }
; 424  :     if (bitD->ptr == bitD->start) {

	cmp	r14, rdx
	jne	SHORT $LN409@HUF_decomp

; 425  :         if (bitD->bitsConsumed < sizeof(bitD->bitContainer)*8) return BIT_DStream_endOfBuffer;

	cmp	esi, 64					; 00000040H
	sbb	r8d, r8d
	add	r8d, 2

; 426  :         return BIT_DStream_completed;

	jmp	SHORT $LN406@HUF_decomp
$LN409@HUF_decomp:

; 427  :     }
; 428  :     /* start < ptr < limitPtr */
; 429  :     {   U32 nbBytes = bitD->bitsConsumed >> 3;

	mov	edx, esi

; 431  :         if (bitD->ptr - nbBytes < bitD->start) {

	mov	rcx, r14
	shr	edx, 3
	xor	r8d, r8d
	mov	eax, edx
	sub	rcx, rax
	cmp	rcx, QWORD PTR bitD4$10[rbp-232]
	jae	SHORT $LN411@HUF_decomp

; 432  :             nbBytes = (U32)(bitD->ptr - bitD->start);  /* ptr > start */

	mov	edx, DWORD PTR bitD4$10[rbp-240]

; 433  :             result = BIT_DStream_endOfBuffer;

	mov	r8d, r12d
	sub	edx, DWORD PTR bitD4$10[rbp-232]
$LN411@HUF_decomp:

; 434  :         }
; 435  :         bitD->ptr -= nbBytes;

	mov	eax, edx
	sub	r14, rax

; 436  :         bitD->bitsConsumed -= nbBytes*8;

	imul	eax, edx, -8				; fffffff8H

; 437  :         bitD->bitContainer = MEM_readLEST(bitD->ptr);   /* reminder : srcSize > sizeof(bitD->bitContainer), otherwise bitD->ptr == bitD->start */
; 438  :         return result;

	mov	rdx, QWORD PTR bitD4$10[rbp-232]
	add	esi, eax
$LN597@HUF_decomp:
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 702  :     while ((BIT_reloadDStream(bitDPtr) == BIT_DStream_unfinished) & (p < pEnd-(sizeof(bitDPtr->bitContainer)-1))) {

	mov	r15, QWORD PTR [r14]
	mov	QWORD PTR bitD4$10[rbp-240], r14
$LN406@HUF_decomp:
	mov	rax, QWORD PTR oend$1$[rbp-256]
	xor	ecx, ecx
	add	rax, -7
	cmp	r9, rax
	setb	cl
	xor	eax, eax
	test	r8d, r8d
	sete	al
	test	ecx, eax
	je	$LN580@HUF_decomp

; 663  :     memcpy(op, dt+val, 2);

	mov	r8, QWORD PTR p$1$[rsp]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, esi
	and	ecx, 63					; 0000003fH
	mov	r9d, ebx
	neg	r9d
	mov	rax, r15
	shl	rax, cl
	and	r9d, 63					; 0000003fH
	mov	ecx, r9d
	mov	rdx, r15
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	lea	rcx, QWORD PTR [r11+rax*4]
	movzx	eax, WORD PTR [r11+rax*4+4]
	mov	WORD PTR [r8], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rcx+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	esi, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 703  :         HUF_DECODE_SYMBOLX2_2(p, bitDPtr);

	movzx	eax, BYTE PTR [rcx+7]
	add	r8, rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, esi
	and	ecx, 63					; 0000003fH

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rax, r15
	shl	rax, cl
	mov	ecx, r9d
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	lea	rcx, QWORD PTR [r11+rax*4]
	movzx	eax, WORD PTR [r11+rax*4+4]
	mov	WORD PTR [r8], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rcx+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	esi, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 704  :         HUF_DECODE_SYMBOLX2_1(p, bitDPtr);

	movzx	eax, BYTE PTR [rcx+7]
	add	r8, rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, esi
	and	ecx, 63					; 0000003fH
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 704  :         HUF_DECODE_SYMBOLX2_1(p, bitDPtr);

	mov	QWORD PTR p$1$[rsp], r8
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	shl	rdx, cl
	mov	ecx, r9d
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	movzx	eax, WORD PTR [r11+rdx*4+4]
	mov	WORD PTR [r8], ax

; 705  :         HUF_DECODE_SYMBOLX2_2(p, bitDPtr);

	movzx	eax, BYTE PTR [r11+rdx*4+7]
	add	QWORD PTR p$1$[rsp], rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rax, r15
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	r8d, BYTE PTR [r11+rdx*4+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r8d, esi

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, r8d
	and	ecx, 63					; 0000003fH

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	shl	rax, cl
	mov	ecx, r9d
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	mov	r9, QWORD PTR p$1$[rsp]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	lea	rcx, QWORD PTR [r11+rax*4]
	movzx	eax, WORD PTR [r11+rax*4+4]
	mov	WORD PTR [r9], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	esi, BYTE PTR [rcx+6]

; 706  :         HUF_DECODE_SYMBOLX2_0(p, bitDPtr);

	movzx	eax, BYTE PTR [rcx+7]

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	add	esi, r8d

; 706  :         HUF_DECODE_SYMBOLX2_0(p, bitDPtr);

	add	r9, rax
	mov	QWORD PTR p$1$[rsp], r9

; 707  :     }

	jmp	$LN598@HUF_decomp
$LN580@HUF_decomp:
	mov	rcx, QWORD PTR oend$1$[rbp-256]
	mov	r13d, 1
	mov	ebx, DWORD PTR bitD2$1$[rsp]
	add	rcx, -2
	mov	r12, QWORD PTR bitD2$8[rbp-240]
	mov	r10, rcx
	mov	edi, DWORD PTR dtLog$1$[rsp]
	mov	QWORD PTR val$1$[rsp], r15
	mov	r15, QWORD PTR bitD3$9[rbp-240]
	mov	r8, QWORD PTR val$1$[rsp]
	mov	QWORD PTR tv3719[rsp], rcx
$LL396@HUF_decomp:
; File E:\dev\pyzstd\lib\common\bitstream.h

; 418  :     if (bitD->bitsConsumed > (sizeof(bitD->bitContainer)*8))  /* overflow detected, like end of stream */

	cmp	esi, 64					; 00000040H
	jbe	SHORT $LN441@HUF_decomp

; 419  :         return BIT_DStream_overflow;

	mov	edx, 3
	jmp	SHORT $LN440@HUF_decomp
$LN441@HUF_decomp:

; 420  : 
; 421  :     if (bitD->ptr >= bitD->limitPtr) {

	cmp	r14, QWORD PTR bitD4$10[rbp-224]
	jb	SHORT $LN442@HUF_decomp

; 405  :     bitD->ptr -= bitD->bitsConsumed >> 3;

	mov	eax, esi

; 406  :     bitD->bitsConsumed &= 7;

	and	esi, 7
	shr	rax, 3
	sub	r14, rax

; 422  :         return BIT_reloadDStreamFast(bitD);

	xor	edx, edx
	jmp	SHORT $LN599@HUF_decomp
$LN442@HUF_decomp:

; 423  :     }
; 424  :     if (bitD->ptr == bitD->start) {

	cmp	r14, rdx
	jne	SHORT $LN443@HUF_decomp

; 425  :         if (bitD->bitsConsumed < sizeof(bitD->bitContainer)*8) return BIT_DStream_endOfBuffer;

	cmp	esi, 64					; 00000040H
	sbb	eax, eax
	lea	edx, DWORD PTR [rax+2]

; 426  :         return BIT_DStream_completed;

	jmp	SHORT $LN440@HUF_decomp
$LN443@HUF_decomp:

; 427  :     }
; 428  :     /* start < ptr < limitPtr */
; 429  :     {   U32 nbBytes = bitD->bitsConsumed >> 3;

	mov	edx, esi

; 430  :         BIT_DStream_status result = BIT_DStream_unfinished;

	mov	DWORD PTR $T4[rsp], 0
	shr	edx, 3

; 431  :         if (bitD->ptr - nbBytes < bitD->start) {

	mov	rcx, r14
	mov	eax, edx
	sub	rcx, rax
	cmp	rcx, QWORD PTR bitD4$10[rbp-232]
	jae	SHORT $LN445@HUF_decomp

; 432  :             nbBytes = (U32)(bitD->ptr - bitD->start);  /* ptr > start */

	mov	edx, DWORD PTR bitD4$10[rbp-240]
	sub	edx, DWORD PTR bitD4$10[rbp-232]

; 433  :             result = BIT_DStream_endOfBuffer;

	mov	DWORD PTR $T4[rsp], r13d
$LN445@HUF_decomp:

; 434  :         }
; 435  :         bitD->ptr -= nbBytes;

	mov	eax, edx
	sub	r14, rax

; 436  :         bitD->bitsConsumed -= nbBytes*8;

	imul	eax, edx, -8				; fffffff8H
	mov	edx, DWORD PTR $T4[rsp]
	add	esi, eax
$LN599@HUF_decomp:
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 710  :     while ((BIT_reloadDStream(bitDPtr) == BIT_DStream_unfinished) & (p <= pEnd-2))

	mov	r8, QWORD PTR [r14]
	mov	QWORD PTR bitD4$10[rbp-240], r14
$LN440@HUF_decomp:
	xor	ecx, ecx
	cmp	r9, r10
	setbe	cl
	xor	eax, eax
	test	edx, edx
	sete	al
	test	ecx, eax
	je	SHORT $LN502@HUF_decomp
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, esi
	mov	rdx, r8
	and	ecx, 63					; 0000003fH
	shl	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 662  :     size_t const val = BIT_lookBitsFast(DStream, dtLog);   /* note : dtLog >= 1 */

	mov	ecx, edi
	neg	ecx
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	and	ecx, 63					; 0000003fH
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	movzx	eax, WORD PTR [r11+rdx*4+4]
	mov	WORD PTR [r9], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [r11+rdx*4+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	esi, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 711  :         HUF_DECODE_SYMBOLX2_0(p, bitDPtr);

	movzx	eax, BYTE PTR [r11+rdx*4+7]
	mov	rdx, QWORD PTR bitD4$10[rbp-232]
	add	r9, rax
	jmp	$LL396@HUF_decomp
$LN502@HUF_decomp:

; 712  : 
; 713  :     while (p <= pEnd-2)

	mov	edi, DWORD PTR bitD1$1$[rbp-256]
	cmp	r9, r10
	mov	r10d, DWORD PTR bitD3$1$[rsp]
	mov	r13, QWORD PTR bitD1$7[rbp-240]
	ja	SHORT $LN557@HUF_decomp
	mov	eax, DWORD PTR dtLog$1$[rsp]
	mov	r15, QWORD PTR tv3719[rsp]
	neg	eax
	and	eax, 63					; 0000003fH
	mov	ebx, eax
	npad	3
$LL398@HUF_decomp:
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, esi
	mov	rdx, r8
	and	ecx, 63					; 0000003fH
	shl	rdx, cl
	mov	ecx, ebx
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	movzx	eax, WORD PTR [r11+rdx*4+4]
	mov	WORD PTR [r9], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [r11+rdx*4+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	esi, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 714  :         HUF_DECODE_SYMBOLX2_0(p, bitDPtr);   /* no need to reload : reached the end of DStream */

	movzx	eax, BYTE PTR [r11+rdx*4+7]
	add	r9, rax
	cmp	r9, r15
	jbe	SHORT $LL398@HUF_decomp
	mov	ebx, DWORD PTR bitD2$1$[rsp]
	mov	r15, QWORD PTR bitD3$9[rbp-240]
$LN557@HUF_decomp:

; 715  : 
; 716  :     if (p < pEnd)

	cmp	r9, QWORD PTR oend$1$[rbp-256]
	jae	SHORT $LN466@HUF_decomp
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, esi
	and	ecx, 63					; 0000003fH
	shl	r8, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 671  :     size_t const val = BIT_lookBitsFast(DStream, dtLog);   /* note : dtLog >= 1 */

	mov	ecx, DWORD PTR dtLog$1$[rsp]
	neg	ecx
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	and	ecx, 63					; 0000003fH
	shr	r8, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 672  :     memcpy(op, dt+val, 1);

	movzx	eax, BYTE PTR [r11+r8*4+4]
	mov	BYTE PTR [r9], al

; 673  :     if (dt[val].length==1) BIT_skipBits(DStream, dt[val].nbBits);

	cmp	BYTE PTR [r11+r8*4+7], 1
	jne	SHORT $LN463@HUF_decomp
	movzx	eax, BYTE PTR [r11+r8*4+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	esi, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 673  :     if (dt[val].length==1) BIT_skipBits(DStream, dt[val].nbBits);

	jmp	SHORT $LN466@HUF_decomp
$LN463@HUF_decomp:

; 674  :     else {
; 675  :         if (DStream->bitsConsumed < (sizeof(DStream->bitContainer)*8)) {

	cmp	esi, 64					; 00000040H
	jae	SHORT $LN466@HUF_decomp

; 676  :             BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [r11+r8*4+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	esi, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 677  :             if (DStream->bitsConsumed > (sizeof(DStream->bitContainer)*8))

	mov	eax, 64					; 00000040H
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	cmp	esi, 64					; 00000040H
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 677  :             if (DStream->bitsConsumed > (sizeof(DStream->bitContainer)*8))

	cmova	esi, eax
$LN466@HUF_decomp:
; File E:\dev\pyzstd\lib\common\bitstream.h

; 447  :     return ((DStream->ptr == DStream->start) && (DStream->bitsConsumed == sizeof(DStream->bitContainer)*8));

	cmp	r13, QWORD PTR bitD1$7[rbp-232]
	jne	SHORT $LN476@HUF_decomp
	cmp	edi, 64					; 00000040H
	jne	SHORT $LN476@HUF_decomp
	mov	eax, 1
	mov	r8d, eax
	jmp	SHORT $LN477@HUF_decomp
$LN476@HUF_decomp:
	xor	r8d, r8d
	lea	eax, QWORD PTR [r8+1]
$LN477@HUF_decomp:
	cmp	r12, QWORD PTR bitD2$8[rbp-232]
	jne	SHORT $LN480@HUF_decomp
	cmp	ebx, 64					; 00000040H
	jne	SHORT $LN480@HUF_decomp
	mov	edx, eax
	jmp	SHORT $LN481@HUF_decomp
$LN480@HUF_decomp:
	xor	edx, edx
$LN481@HUF_decomp:
	cmp	r15, QWORD PTR bitD3$9[rbp-232]
	jne	SHORT $LN484@HUF_decomp
	cmp	r10d, 64				; 00000040H
	jne	SHORT $LN484@HUF_decomp
	mov	ecx, eax
	jmp	SHORT $LN485@HUF_decomp
$LN484@HUF_decomp:
	xor	ecx, ecx
$LN485@HUF_decomp:
	cmp	r14, QWORD PTR bitD4$10[rbp-232]
	jne	SHORT $LN488@HUF_decomp
	cmp	esi, 64					; 00000040H
	je	SHORT $LN489@HUF_decomp
$LN488@HUF_decomp:
	xor	eax, eax
$LN489@HUF_decomp:
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 856  :         { U32 const endCheck = BIT_endOfDStream(&bitD1) & BIT_endOfDStream(&bitD2) & BIT_endOfDStream(&bitD3) & BIT_endOfDStream(&bitD4);

	and	eax, ecx
	and	eax, edx
	test	eax, r8d

; 858  : 
; 859  :         /* decoded size */
; 860  :         return dstSize;

	mov	rax, QWORD PTR dstSize$[rbp-256]
	jne	SHORT $LN1@HUF_decomp
$LN582@HUF_decomp:

; 857  :           if (!endCheck) return ERROR(corruption_detected); }

	mov	rax, -20
$LN1@HUF_decomp:

; 861  :     }
; 862  : }

	mov	rbx, QWORD PTR [rsp+384]
	add	rsp, 304				; 00000130H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
HUF_decompress4X2_usingDTable_internal_body ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\error_private.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
_TEXT	SEGMENT
oend$1$ = 32
bitD$1 = 40
dst$ = 128
dstSize$ = 136
cSrc$ = 144
cSrcSize$ = 152
DTable$ = 160
bmi2$dead$ = 168
HUF_decompress1X2_usingDTable_internal PROC

; 864  : HUF_DGEN(HUF_decompress1X2_usingDTable_internal)

	mov	QWORD PTR [rsp+16], rdx
	push	rbx
	sub	rsp, 112				; 00000070H
	mov	rax, r8
	mov	rbx, rdx
	mov	r11, rcx

; 731  :     CHECK_F( BIT_initDStream(&bitD, cSrc, cSrcSize) );

	mov	rdx, rax
	mov	r8, r9
	lea	rcx, QWORD PTR bitD$1[rsp]
	call	BIT_initDStream
; File E:\dev\pyzstd\lib\common\error_private.h

; 56   : ERR_STATIC unsigned ERR_isError(size_t code) { return (code > ERROR(maxCode)); }

	cmp	rax, -120				; ffffffffffffff88H
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 731  :     CHECK_F( BIT_initDStream(&bitD, cSrc, cSrcSize) );

	ja	$LN3@HUF_decomp

; 732  : 
; 733  :     /* decode */
; 734  :     {   BYTE* const ostart = (BYTE*) dst;
; 735  :         BYTE* const oend = ostart + dstSize;
; 736  :         const void* const dtPtr = DTable+1;   /* force compiler to not use strict-aliasing */

	mov	rax, QWORD PTR DTable$[rsp]
	lea	r9, QWORD PTR [r11+rbx]

; 739  :         HUF_decodeStreamX2(ostart, &bitD, oend, dt, dtd.tableLog);

	mov	rbx, QWORD PTR bitD$1[rsp+16]
	mov	r10d, DWORD PTR bitD$1[rsp+8]
	mov	QWORD PTR [rsp+128], rbp

; 737  :         const HUF_DEltX2* const dt = (const HUF_DEltX2*)dtPtr;
; 738  :         DTableDesc const dtd = HUF_getDTableDesc(DTable);

	mov	ecx, DWORD PTR [rax]
	mov	QWORD PTR [rsp+144], rsi

; 739  :         HUF_decodeStreamX2(ostart, &bitD, oend, dt, dtd.tableLog);

	mov	rsi, QWORD PTR bitD$1[rsp+24]
	mov	QWORD PTR [rsp+152], rdi
	mov	rdi, QWORD PTR bitD$1[rsp]
	mov	QWORD PTR [rsp+104], r12
	mov	r12d, esi
	mov	QWORD PTR [rsp+96], r13
	lea	r13, QWORD PTR [r9-7]
	mov	QWORD PTR [rsp+88], r14

; 732  : 
; 733  :     /* decode */
; 734  :     {   BYTE* const ostart = (BYTE*) dst;
; 735  :         BYTE* const oend = ostart + dstSize;
; 736  :         const void* const dtPtr = DTable+1;   /* force compiler to not use strict-aliasing */

	lea	r14, QWORD PTR [rax+4]

; 737  :         const HUF_DEltX2* const dt = (const HUF_DEltX2*)dtPtr;
; 738  :         DTableDesc const dtd = HUF_getDTableDesc(DTable);

	shr	ecx, 16
	mov	QWORD PTR [rsp+80], r15

; 739  :         HUF_decodeStreamX2(ostart, &bitD, oend, dt, dtd.tableLog);

	mov	r15, QWORD PTR bitD$1[rsp+32]
	movzx	ebp, cl
	mov	QWORD PTR oend$1$[rsp], r9
$LL12@HUF_decomp:
; File E:\dev\pyzstd\lib\common\bitstream.h

; 418  :     if (bitD->bitsConsumed > (sizeof(bitD->bitContainer)*8))  /* overflow detected, like end of stream */

	cmp	r10d, 64				; 00000040H
	jbe	SHORT $LN25@HUF_decomp

; 419  :         return BIT_DStream_overflow;

	mov	r8d, 3
	jmp	SHORT $LN24@HUF_decomp
$LN25@HUF_decomp:

; 420  : 
; 421  :     if (bitD->ptr >= bitD->limitPtr) {

	cmp	rbx, r15
	jb	SHORT $LN26@HUF_decomp

; 405  :     bitD->ptr -= bitD->bitsConsumed >> 3;

	mov	eax, r10d

; 406  :     bitD->bitsConsumed &= 7;

	and	r10d, 7
	shr	rax, 3
	sub	rbx, rax

; 422  :         return BIT_reloadDStreamFast(bitD);

	xor	r8d, r8d
	jmp	SHORT $LN118@HUF_decomp
$LN26@HUF_decomp:

; 423  :     }
; 424  :     if (bitD->ptr == bitD->start) {

	cmp	rbx, rsi
	jne	SHORT $LN27@HUF_decomp

; 425  :         if (bitD->bitsConsumed < sizeof(bitD->bitContainer)*8) return BIT_DStream_endOfBuffer;

	cmp	r10d, 64				; 00000040H
	sbb	r8d, r8d
	add	r8d, 2

; 426  :         return BIT_DStream_completed;

	jmp	SHORT $LN24@HUF_decomp
$LN27@HUF_decomp:

; 427  :     }
; 428  :     /* start < ptr < limitPtr */
; 429  :     {   U32 nbBytes = bitD->bitsConsumed >> 3;

	mov	edx, r10d

; 430  :         BIT_DStream_status result = BIT_DStream_unfinished;
; 431  :         if (bitD->ptr - nbBytes < bitD->start) {

	mov	rcx, rbx
	shr	edx, 3
	xor	r8d, r8d
	mov	eax, edx
	sub	rcx, rax
	cmp	rcx, rsi
	jae	SHORT $LN29@HUF_decomp

; 432  :             nbBytes = (U32)(bitD->ptr - bitD->start);  /* ptr > start */

	mov	edx, DWORD PTR bitD$1[rsp+16]

; 433  :             result = BIT_DStream_endOfBuffer;

	mov	r8d, 1
	sub	edx, r12d
$LN29@HUF_decomp:

; 434  :         }
; 435  :         bitD->ptr -= nbBytes;

	mov	eax, edx
	sub	rbx, rax

; 436  :         bitD->bitsConsumed -= nbBytes*8;

	imul	eax, edx, -8				; fffffff8H
	add	r10d, eax
$LN118@HUF_decomp:
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 702  :     while ((BIT_reloadDStream(bitDPtr) == BIT_DStream_unfinished) & (p < pEnd-(sizeof(bitDPtr->bitContainer)-1))) {

	mov	rdi, QWORD PTR [rbx]
	mov	QWORD PTR bitD$1[rsp+16], rbx
$LN24@HUF_decomp:
	xor	ecx, ecx
	cmp	r11, r13
	setb	cl
	xor	eax, eax
	test	r8d, r8d
	sete	al
	test	ecx, eax
	je	$LN116@HUF_decomp
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, r10d
	mov	r9d, ebp
	and	ecx, 63					; 0000003fH
	neg	r9d
	and	r9d, 63					; 0000003fH
	mov	rax, rdi
	shl	rax, cl
	mov	rdx, rdi
	mov	ecx, r9d
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	lea	rcx, QWORD PTR [r14+rax*4]
	movzx	eax, WORD PTR [r14+rax*4]
	mov	WORD PTR [r11], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rcx+2]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r10d, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 703  :         HUF_DECODE_SYMBOLX2_2(p, bitDPtr);

	movzx	eax, BYTE PTR [rcx+3]
	add	r11, rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, r10d
	and	ecx, 63					; 0000003fH

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rax, rdi
	shl	rax, cl
	mov	ecx, r9d
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	lea	rcx, QWORD PTR [r14+rax*4]
	movzx	eax, WORD PTR [r14+rax*4]
	mov	WORD PTR [r11], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rcx+2]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r10d, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 704  :         HUF_DECODE_SYMBOLX2_1(p, bitDPtr);

	movzx	eax, BYTE PTR [rcx+3]
	add	r11, rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	mov	ecx, r10d
	and	ecx, 63					; 0000003fH

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	shl	rdx, cl
	mov	ecx, r9d
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	movzx	eax, WORD PTR [r14+rdx*4]
	mov	WORD PTR [r11], ax

; 705  :         HUF_DECODE_SYMBOLX2_2(p, bitDPtr);

	movzx	eax, BYTE PTR [r14+rdx*4+3]

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	r8d, BYTE PTR [r14+rdx*4+2]

; 705  :         HUF_DECODE_SYMBOLX2_2(p, bitDPtr);

	add	r11, rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r8d, r10d

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rax, rdi
	mov	ecx, r8d
	and	ecx, 63					; 0000003fH
	shl	rax, cl
	mov	ecx, r9d
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	lea	rcx, QWORD PTR [r14+rax*4]
	movzx	eax, WORD PTR [r14+rax*4]
	mov	WORD PTR [r11], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	r10d, BYTE PTR [rcx+2]

; 706  :         HUF_DECODE_SYMBOLX2_0(p, bitDPtr);

	movzx	eax, BYTE PTR [rcx+3]

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	add	r10d, r8d

; 706  :         HUF_DECODE_SYMBOLX2_0(p, bitDPtr);

	add	r11, rax

; 707  :     }

	jmp	$LL12@HUF_decomp
$LN116@HUF_decomp:
	mov	r13, QWORD PTR oend$1$[rsp]
	lea	r9, QWORD PTR [r13-2]
	npad	7
$LL14@HUF_decomp:
; File E:\dev\pyzstd\lib\common\bitstream.h

; 418  :     if (bitD->bitsConsumed > (sizeof(bitD->bitContainer)*8))  /* overflow detected, like end of stream */

	cmp	r10d, 64				; 00000040H
	jbe	SHORT $LN59@HUF_decomp

; 419  :         return BIT_DStream_overflow;

	mov	r8d, 3
	jmp	SHORT $LN58@HUF_decomp
$LN59@HUF_decomp:

; 420  : 
; 421  :     if (bitD->ptr >= bitD->limitPtr) {

	cmp	rbx, r15
	jb	SHORT $LN60@HUF_decomp

; 405  :     bitD->ptr -= bitD->bitsConsumed >> 3;

	mov	eax, r10d

; 406  :     bitD->bitsConsumed &= 7;

	and	r10d, 7
	shr	rax, 3
	sub	rbx, rax

; 422  :         return BIT_reloadDStreamFast(bitD);

	xor	r8d, r8d
	jmp	SHORT $LN119@HUF_decomp
$LN60@HUF_decomp:

; 423  :     }
; 424  :     if (bitD->ptr == bitD->start) {

	cmp	rbx, rsi
	jne	SHORT $LN61@HUF_decomp

; 425  :         if (bitD->bitsConsumed < sizeof(bitD->bitContainer)*8) return BIT_DStream_endOfBuffer;

	cmp	r10d, 64				; 00000040H
	sbb	r8d, r8d
	add	r8d, 2

; 426  :         return BIT_DStream_completed;

	jmp	SHORT $LN58@HUF_decomp
$LN61@HUF_decomp:

; 427  :     }
; 428  :     /* start < ptr < limitPtr */
; 429  :     {   U32 nbBytes = bitD->bitsConsumed >> 3;

	mov	edx, r10d

; 430  :         BIT_DStream_status result = BIT_DStream_unfinished;
; 431  :         if (bitD->ptr - nbBytes < bitD->start) {

	mov	rcx, rbx
	shr	edx, 3
	xor	r8d, r8d
	mov	eax, edx
	sub	rcx, rax
	cmp	rcx, rsi
	jae	SHORT $LN63@HUF_decomp

; 432  :             nbBytes = (U32)(bitD->ptr - bitD->start);  /* ptr > start */

	mov	edx, DWORD PTR bitD$1[rsp+16]

; 433  :             result = BIT_DStream_endOfBuffer;

	mov	r8d, 1
	sub	edx, r12d
$LN63@HUF_decomp:

; 434  :         }
; 435  :         bitD->ptr -= nbBytes;

	mov	eax, edx
	sub	rbx, rax

; 436  :         bitD->bitsConsumed -= nbBytes*8;

	imul	eax, edx, -8				; fffffff8H
	add	r10d, eax
$LN119@HUF_decomp:
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 710  :     while ((BIT_reloadDStream(bitDPtr) == BIT_DStream_unfinished) & (p <= pEnd-2))

	mov	rdi, QWORD PTR [rbx]
	mov	QWORD PTR bitD$1[rsp+16], rbx
$LN58@HUF_decomp:
	xor	ecx, ecx
	cmp	r11, r9
	setbe	cl
	xor	eax, eax
	test	r8d, r8d
	sete	al
	test	ecx, eax
	je	SHORT $LN98@HUF_decomp
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, r10d
	mov	rdx, rdi
	and	ecx, 63					; 0000003fH
	shl	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 662  :     size_t const val = BIT_lookBitsFast(DStream, dtLog);   /* note : dtLog >= 1 */

	mov	ecx, ebp
	neg	ecx
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	and	ecx, 63					; 0000003fH
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	movzx	eax, WORD PTR [r14+rdx*4]
	mov	WORD PTR [r11], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [r14+rdx*4+2]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r10d, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 711  :         HUF_DECODE_SYMBOLX2_0(p, bitDPtr);

	movzx	eax, BYTE PTR [r14+rdx*4+3]
	add	r11, rax
	jmp	$LL14@HUF_decomp
$LN98@HUF_decomp:
	mov	r15, QWORD PTR [rsp+80]

; 712  : 
; 713  :     while (p <= pEnd-2)

	mov	r12, QWORD PTR [rsp+104]
	cmp	r11, r9
	ja	SHORT $LN109@HUF_decomp
	mov	r8d, ebp
	neg	r8d
	and	r8d, 63					; 0000003fH
$LL16@HUF_decomp:
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, r10d
	mov	rdx, rdi
	and	ecx, 63					; 0000003fH
	shl	rdx, cl
	mov	ecx, r8d
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	movzx	eax, WORD PTR [r14+rdx*4]
	mov	WORD PTR [r11], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [r14+rdx*4+2]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r10d, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 714  :         HUF_DECODE_SYMBOLX2_0(p, bitDPtr);   /* no need to reload : reached the end of DStream */

	movzx	eax, BYTE PTR [r14+rdx*4+3]
	add	r11, rax
	cmp	r11, r9
	jbe	SHORT $LL16@HUF_decomp
$LN109@HUF_decomp:

; 715  : 
; 716  :     if (p < pEnd)

	cmp	r11, r13
	mov	r13, QWORD PTR [rsp+96]
	jae	SHORT $LN84@HUF_decomp

; 671  :     size_t const val = BIT_lookBitsFast(DStream, dtLog);   /* note : dtLog >= 1 */

	neg	ebp
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, r10d
	and	ecx, 63					; 0000003fH
	and	ebp, 63					; 0000003fH
	shl	rdi, cl
	movzx	ecx, bpl
	shr	rdi, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 672  :     memcpy(op, dt+val, 1);

	movzx	eax, BYTE PTR [r14+rdi*4]
	mov	BYTE PTR [r11], al

; 673  :     if (dt[val].length==1) BIT_skipBits(DStream, dt[val].nbBits);

	cmp	BYTE PTR [r14+rdi*4+3], 1
	jne	SHORT $LN81@HUF_decomp
	movzx	eax, BYTE PTR [r14+rdi*4+2]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r10d, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 673  :     if (dt[val].length==1) BIT_skipBits(DStream, dt[val].nbBits);

	jmp	SHORT $LN84@HUF_decomp
$LN81@HUF_decomp:

; 674  :     else {
; 675  :         if (DStream->bitsConsumed < (sizeof(DStream->bitContainer)*8)) {

	cmp	r10d, 64				; 00000040H
	jae	SHORT $LN84@HUF_decomp

; 676  :             BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [r14+rdi*4+2]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	r10d, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 677  :             if (DStream->bitsConsumed > (sizeof(DStream->bitContainer)*8))

	mov	eax, 64					; 00000040H
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	cmp	r10d, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 677  :             if (DStream->bitsConsumed > (sizeof(DStream->bitContainer)*8))

	cmova	r10d, eax
$LN84@HUF_decomp:
	mov	r14, QWORD PTR [rsp+88]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 447  :     return ((DStream->ptr == DStream->start) && (DStream->bitsConsumed == sizeof(DStream->bitContainer)*8));

	cmp	rbx, rsi
	mov	rsi, QWORD PTR [rsp+144]
	mov	rdi, QWORD PTR [rsp+152]
	mov	rbp, QWORD PTR [rsp+128]
	jne	SHORT $LN94@HUF_decomp
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 864  : HUF_DGEN(HUF_decompress1X2_usingDTable_internal)

	mov	rax, QWORD PTR dstSize$[rsp]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 447  :     return ((DStream->ptr == DStream->start) && (DStream->bitsConsumed == sizeof(DStream->bitContainer)*8));

	cmp	r10d, 64				; 00000040H
	je	SHORT $LN3@HUF_decomp
$LN94@HUF_decomp:
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 864  : HUF_DGEN(HUF_decompress1X2_usingDTable_internal)

	mov	rax, -20
$LN3@HUF_decomp:
	add	rsp, 112				; 00000070H
	pop	rbx
	ret	0
HUF_decompress1X2_usingDTable_internal ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\error_private.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\error_private.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\error_private.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\error_private.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\bitstream.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
_TEXT	SEGMENT
bitD1$1 = 32
bitD2$2 = 72
bitD3$3 = 112
bitD4$4 = 152
opStart3$1$ = 192
opStart2$1$ = 200
opStart4$1$ = 208
oend$1$ = 216
length3$1$ = 224
istart3$1$ = 232
length1$1$ = 240
length2$1$ = 248
istart2$1$ = 256
dst$ = 336
dstSize$ = 344
cSrc$ = 352
tv3285 = 360
tv3269 = 360
tv3243 = 360
tv3230 = 360
cSrcSize$ = 360
DTable$ = 368
dtLog$1$ = 376
bmi2$dead$ = 376
HUF_decompress4X2_usingDTable_internal PROC

; 865  : HUF_DGEN(HUF_decompress4X2_usingDTable_internal)

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rbx
	push	rdi
	push	r13
	push	r14
	lea	rbp, QWORD PTR [rsp-32]
	sub	rsp, 288				; 00000120H
	mov	rdi, r9
	mov	rbx, r8
	mov	r13, rdx
	mov	r14, rcx

; 755  :     if (cSrcSize < 10) return ERROR(corruption_detected);   /* strict minimum : jump table + 1 byte per stream */

	cmp	r9, 10
	jae	SHORT $LN7@HUF_decomp
	mov	rax, -20

; 865  : HUF_DGEN(HUF_decompress4X2_usingDTable_internal)

	add	rsp, 288				; 00000120H
	pop	r14
	pop	r13
	pop	rdi
	pop	rbx
	pop	rbp
	ret	0
$LN7@HUF_decomp:
	mov	QWORD PTR [rsp+336], rsi

; 759  :         BYTE* const oend = ostart + dstSize;

	lea	rax, QWORD PTR [rcx+rdx]

; 760  :         BYTE* const olimit = oend - (sizeof(size_t)-1);
; 761  :         const void* const dtPtr = DTable+1;

	mov	rsi, QWORD PTR DTable$[rbp-256]

; 762  :         const HUF_DEltX2* const dt = (const HUF_DEltX2*)dtPtr;
; 763  : 
; 764  :         /* Init */
; 765  :         BIT_DStream_t bitD1;
; 766  :         BIT_DStream_t bitD2;
; 767  :         BIT_DStream_t bitD3;
; 768  :         BIT_DStream_t bitD4;
; 769  :         size_t const length1 = MEM_readLE16(istart);

	mov	rcx, rbx
	mov	QWORD PTR [rsp+280], r12
	mov	QWORD PTR [rsp+272], r15

; 756  : 
; 757  :     {   const BYTE* const istart = (const BYTE*) cSrc;
; 758  :         BYTE* const ostart = (BYTE*) dst;
; 759  :         BYTE* const oend = ostart + dstSize;

	mov	QWORD PTR oend$1$[rbp-256], rax

; 762  :         const HUF_DEltX2* const dt = (const HUF_DEltX2*)dtPtr;
; 763  : 
; 764  :         /* Init */
; 765  :         BIT_DStream_t bitD1;
; 766  :         BIT_DStream_t bitD2;
; 767  :         BIT_DStream_t bitD3;
; 768  :         BIT_DStream_t bitD4;
; 769  :         size_t const length1 = MEM_readLE16(istart);

	call	MEM_readLE16
	movzx	r15d, ax

; 770  :         size_t const length2 = MEM_readLE16(istart+2);

	lea	rcx, QWORD PTR [rbx+2]
	mov	QWORD PTR length1$1$[rbp-256], r15
	call	MEM_readLE16
	movzx	r12d, ax

; 771  :         size_t const length3 = MEM_readLE16(istart+4);

	lea	rcx, QWORD PTR [rbx+4]
	mov	QWORD PTR length2$1$[rbp-256], r12
	call	MEM_readLE16
	movzx	eax, ax

; 772  :         size_t const length4 = cSrcSize - (length1 + length2 + length3 + 6);
; 773  :         const BYTE* const istart1 = istart + 6;  /* jumpTable */

	lea	r9, QWORD PTR [rbx+6]
	sub	rdi, rax
	mov	QWORD PTR length3$1$[rbp-256], rax
	sub	rdi, r12

; 774  :         const BYTE* const istart2 = istart1 + length1;

	lea	rax, QWORD PTR [r9+r15]
	mov	QWORD PTR istart2$1$[rbp-256], rax
	sub	rdi, r15

; 775  :         const BYTE* const istart3 = istart2 + length2;

	add	rax, r12
	sub	rdi, 6
	mov	QWORD PTR istart3$1$[rbp-256], rax

; 776  :         const BYTE* const istart4 = istart3 + length3;
; 777  :         size_t const segmentSize = (dstSize+3) / 4;

	lea	rax, QWORD PTR [r13+3]
	shr	rax, 2

; 778  :         BYTE* const opStart2 = ostart + segmentSize;

	lea	rcx, QWORD PTR [rax+r14]

; 779  :         BYTE* const opStart3 = opStart2 + segmentSize;

	lea	rdx, QWORD PTR [rcx+rax]
	mov	QWORD PTR opStart2$1$[rbp-256], rcx

; 780  :         BYTE* const opStart4 = opStart3 + segmentSize;

	add	rax, rdx
	mov	QWORD PTR opStart3$1$[rbp-256], rdx
	mov	QWORD PTR opStart4$1$[rbp-256], rax

; 781  :         BYTE* op1 = ostart;
; 782  :         BYTE* op2 = opStart2;
; 783  :         BYTE* op3 = opStart3;
; 784  :         BYTE* op4 = opStart4;

	mov	r15, rax

; 785  :         U32 endSignal = 1;
; 786  :         DTableDesc const dtd = HUF_getDTableDesc(DTable);

	mov	eax, DWORD PTR [rsi]
	mov	r13, rcx
	shr	eax, 16
	mov	r12, rdx
	movzx	ebx, al
	mov	DWORD PTR dtLog$1$[rbp-256], ebx

; 787  :         U32 const dtLog = dtd.tableLog;
; 788  : 
; 789  :         if (length4 > cSrcSize) return ERROR(corruption_detected);   /* overflow */

	cmp	rdi, QWORD PTR cSrcSize$[rbp-256]
	ja	$LN840@HUF_decomp

; 790  :         CHECK_F( BIT_initDStream(&bitD1, istart1, length1) );

	mov	r8, QWORD PTR length1$1$[rbp-256]
	lea	rcx, QWORD PTR bitD1$1[rsp]
	mov	rdx, r9
	call	BIT_initDStream
; File E:\dev\pyzstd\lib\common\error_private.h

; 56   : ERR_STATIC unsigned ERR_isError(size_t code) { return (code > ERROR(maxCode)); }

	cmp	rax, -120				; ffffffffffffff88H
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 790  :         CHECK_F( BIT_initDStream(&bitD1, istart1, length1) );

	ja	$LN839@HUF_decomp

; 791  :         CHECK_F( BIT_initDStream(&bitD2, istart2, length2) );

	mov	r8, QWORD PTR length2$1$[rbp-256]
	lea	rcx, QWORD PTR bitD2$2[rsp]
	mov	rdx, QWORD PTR istart2$1$[rbp-256]
	call	BIT_initDStream
; File E:\dev\pyzstd\lib\common\error_private.h

; 56   : ERR_STATIC unsigned ERR_isError(size_t code) { return (code > ERROR(maxCode)); }

	cmp	rax, -120				; ffffffffffffff88H
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 791  :         CHECK_F( BIT_initDStream(&bitD2, istart2, length2) );

	ja	$LN839@HUF_decomp

; 792  :         CHECK_F( BIT_initDStream(&bitD3, istart3, length3) );

	mov	r8, QWORD PTR length3$1$[rbp-256]
	lea	rcx, QWORD PTR bitD3$3[rsp]
	mov	rdx, QWORD PTR istart3$1$[rbp-256]
	call	BIT_initDStream
; File E:\dev\pyzstd\lib\common\error_private.h

; 56   : ERR_STATIC unsigned ERR_isError(size_t code) { return (code > ERROR(maxCode)); }

	cmp	rax, -120				; ffffffffffffff88H
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 792  :         CHECK_F( BIT_initDStream(&bitD3, istart3, length3) );

	ja	$LN839@HUF_decomp

; 793  :         CHECK_F( BIT_initDStream(&bitD4, istart4, length4) );

	mov	rdx, QWORD PTR istart3$1$[rbp-256]
	lea	rcx, QWORD PTR bitD4$4[rbp-256]
	add	rdx, QWORD PTR length3$1$[rbp-256]
	mov	r8, rdi
	call	BIT_initDStream
; File E:\dev\pyzstd\lib\common\error_private.h

; 56   : ERR_STATIC unsigned ERR_isError(size_t code) { return (code > ERROR(maxCode)); }

	cmp	rax, -120				; ffffffffffffff88H
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 793  :         CHECK_F( BIT_initDStream(&bitD4, istart4, length4) );

	ja	$LN839@HUF_decomp

; 794  : 
; 795  :         /* 16-32 symbols per loop (4-8 symbols per stream) */
; 796  :         for ( ; (endSignal) & (op4 < olimit); ) {

	mov	rax, QWORD PTR oend$1$[rbp-256]
	mov	rcx, r15
	add	rax, -7
	cmp	rcx, rax
	jae	$LN805@HUF_decomp
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	r8d, ebx
	neg	r8d
	and	r8d, 63					; 0000003fH
	mov	DWORD PTR tv3285[rbp-256], r8d
	npad	6
$LL4@HUF_decomp:
	mov	ecx, DWORD PTR bitD1$1[rsp+8]
	mov	rdx, QWORD PTR bitD1$1[rsp]
	and	ecx, 63					; 0000003fH
	shl	rdx, cl
	mov	ecx, r8d
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	movzx	eax, WORD PTR [rsi+rdx*4+4]
	mov	WORD PTR [r14], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rsi+rdx*4+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	DWORD PTR bitD1$1[rsp+8], eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 819  :             HUF_DECODE_SYMBOLX2_2(op1, &bitD1);

	movzx	eax, BYTE PTR [rsi+rdx*4+7]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, DWORD PTR bitD2$2[rsp+8]
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 819  :             HUF_DECODE_SYMBOLX2_2(op1, &bitD1);

	add	r14, rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, QWORD PTR bitD2$2[rsp]
	and	ecx, 63					; 0000003fH
	shl	rdx, cl
	mov	ecx, r8d
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	movzx	eax, WORD PTR [rsi+rdx*4+4]
	mov	WORD PTR [r13], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rsi+rdx*4+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	DWORD PTR bitD2$2[rsp+8], eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 820  :             HUF_DECODE_SYMBOLX2_2(op2, &bitD2);

	movzx	eax, BYTE PTR [rsi+rdx*4+7]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, DWORD PTR bitD3$3[rsp+8]
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 820  :             HUF_DECODE_SYMBOLX2_2(op2, &bitD2);

	add	r13, rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, QWORD PTR bitD3$3[rsp]
	and	ecx, 63					; 0000003fH
	shl	rdx, cl
	mov	ecx, r8d
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	movzx	eax, WORD PTR [rsi+rdx*4+4]
	mov	WORD PTR [r12], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rsi+rdx*4+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	DWORD PTR bitD3$3[rsp+8], eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 821  :             HUF_DECODE_SYMBOLX2_2(op3, &bitD3);

	movzx	eax, BYTE PTR [rsi+rdx*4+7]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, DWORD PTR bitD4$4[rbp-248]
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 821  :             HUF_DECODE_SYMBOLX2_2(op3, &bitD3);

	add	r12, rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, QWORD PTR bitD4$4[rbp-256]
	and	ecx, 63					; 0000003fH
	shl	rdx, cl
	mov	ecx, r8d
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	movzx	eax, WORD PTR [rsi+rdx*4+4]
	mov	WORD PTR [r15], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rsi+rdx*4+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	DWORD PTR bitD4$4[rbp-248], eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 822  :             HUF_DECODE_SYMBOLX2_2(op4, &bitD4);

	movzx	eax, BYTE PTR [rsi+rdx*4+7]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, DWORD PTR bitD1$1[rsp+8]
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 822  :             HUF_DECODE_SYMBOLX2_2(op4, &bitD4);

	add	r15, rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, QWORD PTR bitD1$1[rsp]
	and	ecx, 63					; 0000003fH
	shl	rdx, cl
	mov	ecx, r8d
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	movzx	eax, WORD PTR [rsi+rdx*4+4]
	mov	WORD PTR [r14], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rsi+rdx*4+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	DWORD PTR bitD1$1[rsp+8], eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 823  :             HUF_DECODE_SYMBOLX2_1(op1, &bitD1);

	movzx	eax, BYTE PTR [rsi+rdx*4+7]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, DWORD PTR bitD2$2[rsp+8]
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 823  :             HUF_DECODE_SYMBOLX2_1(op1, &bitD1);

	add	r14, rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, QWORD PTR bitD2$2[rsp]
	and	ecx, 63					; 0000003fH
	shl	rdx, cl
	mov	ecx, r8d
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	movzx	eax, WORD PTR [rsi+rdx*4+4]
	mov	WORD PTR [r13], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rsi+rdx*4+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	DWORD PTR bitD2$2[rsp+8], eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 824  :             HUF_DECODE_SYMBOLX2_1(op2, &bitD2);

	movzx	eax, BYTE PTR [rsi+rdx*4+7]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, DWORD PTR bitD3$3[rsp+8]
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 824  :             HUF_DECODE_SYMBOLX2_1(op2, &bitD2);

	add	r13, rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, QWORD PTR bitD3$3[rsp]
	and	ecx, 63					; 0000003fH
	shl	rdx, cl
	mov	ecx, r8d
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	movzx	eax, WORD PTR [rsi+rdx*4+4]
	mov	WORD PTR [r12], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rsi+rdx*4+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	DWORD PTR bitD3$3[rsp+8], eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 825  :             HUF_DECODE_SYMBOLX2_1(op3, &bitD3);

	movzx	eax, BYTE PTR [rsi+rdx*4+7]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, DWORD PTR bitD4$4[rbp-248]
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 825  :             HUF_DECODE_SYMBOLX2_1(op3, &bitD3);

	add	r12, rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, QWORD PTR bitD4$4[rbp-256]
	and	ecx, 63					; 0000003fH
	shl	rdx, cl
	mov	ecx, r8d
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	movzx	eax, WORD PTR [rsi+rdx*4+4]
	mov	WORD PTR [r15], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rsi+rdx*4+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	DWORD PTR bitD4$4[rbp-248], eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 826  :             HUF_DECODE_SYMBOLX2_1(op4, &bitD4);

	movzx	eax, BYTE PTR [rsi+rdx*4+7]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, DWORD PTR bitD1$1[rsp+8]
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 826  :             HUF_DECODE_SYMBOLX2_1(op4, &bitD4);

	add	r15, rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, QWORD PTR bitD1$1[rsp]
	and	ecx, 63					; 0000003fH
	shl	rdx, cl
	mov	ecx, r8d
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	movzx	eax, WORD PTR [rsi+rdx*4+4]
	mov	WORD PTR [r14], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rsi+rdx*4+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	DWORD PTR bitD1$1[rsp+8], eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 827  :             HUF_DECODE_SYMBOLX2_2(op1, &bitD1);

	movzx	eax, BYTE PTR [rsi+rdx*4+7]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, DWORD PTR bitD2$2[rsp+8]
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 827  :             HUF_DECODE_SYMBOLX2_2(op1, &bitD1);

	add	r14, rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, QWORD PTR bitD2$2[rsp]
	and	ecx, 63					; 0000003fH
	shl	rdx, cl
	mov	ecx, r8d
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	movzx	eax, WORD PTR [rsi+rdx*4+4]
	mov	WORD PTR [r13], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rsi+rdx*4+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	DWORD PTR bitD2$2[rsp+8], eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 828  :             HUF_DECODE_SYMBOLX2_2(op2, &bitD2);

	movzx	eax, BYTE PTR [rsi+rdx*4+7]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, DWORD PTR bitD3$3[rsp+8]
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 828  :             HUF_DECODE_SYMBOLX2_2(op2, &bitD2);

	add	r13, rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, QWORD PTR bitD3$3[rsp]
	and	ecx, 63					; 0000003fH
	shl	rdx, cl
	mov	ecx, r8d
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	movzx	eax, WORD PTR [rsi+rdx*4+4]
	mov	WORD PTR [r12], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rsi+rdx*4+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	DWORD PTR bitD3$3[rsp+8], eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 829  :             HUF_DECODE_SYMBOLX2_2(op3, &bitD3);

	movzx	eax, BYTE PTR [rsi+rdx*4+7]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, DWORD PTR bitD4$4[rbp-248]
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 829  :             HUF_DECODE_SYMBOLX2_2(op3, &bitD3);

	add	r12, rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, QWORD PTR bitD4$4[rbp-256]
	and	ecx, 63					; 0000003fH
	shl	rdx, cl
	mov	ecx, r8d
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	movzx	eax, WORD PTR [rsi+rdx*4+4]
	mov	WORD PTR [r15], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rsi+rdx*4+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	DWORD PTR bitD4$4[rbp-248], eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 830  :             HUF_DECODE_SYMBOLX2_2(op4, &bitD4);

	movzx	eax, BYTE PTR [rsi+rdx*4+7]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, DWORD PTR bitD1$1[rsp+8]
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 830  :             HUF_DECODE_SYMBOLX2_2(op4, &bitD4);

	add	r15, rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, QWORD PTR bitD1$1[rsp]
	and	ecx, 63					; 0000003fH
	shl	rdx, cl
	mov	ecx, r8d
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	movzx	eax, WORD PTR [rsi+rdx*4+4]
	mov	WORD PTR [r14], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rsi+rdx*4+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	DWORD PTR bitD1$1[rsp+8], eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 831  :             HUF_DECODE_SYMBOLX2_0(op1, &bitD1);

	movzx	eax, BYTE PTR [rsi+rdx*4+7]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, DWORD PTR bitD2$2[rsp+8]
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 831  :             HUF_DECODE_SYMBOLX2_0(op1, &bitD1);

	add	r14, rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, QWORD PTR bitD2$2[rsp]
	and	ecx, 63					; 0000003fH
	shl	rdx, cl
	mov	ecx, r8d
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	movzx	eax, WORD PTR [rsi+rdx*4+4]
	mov	WORD PTR [r13], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rsi+rdx*4+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	DWORD PTR bitD2$2[rsp+8], eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 832  :             HUF_DECODE_SYMBOLX2_0(op2, &bitD2);

	movzx	eax, BYTE PTR [rsi+rdx*4+7]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, DWORD PTR bitD3$3[rsp+8]
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 832  :             HUF_DECODE_SYMBOLX2_0(op2, &bitD2);

	add	r13, rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, QWORD PTR bitD3$3[rsp]
	and	ecx, 63					; 0000003fH
	shl	rdx, cl
	mov	ecx, r8d
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	movzx	eax, WORD PTR [rsi+rdx*4+4]
	mov	WORD PTR [r12], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rsi+rdx*4+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	DWORD PTR bitD3$3[rsp+8], eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 833  :             HUF_DECODE_SYMBOLX2_0(op3, &bitD3);

	movzx	eax, BYTE PTR [rsi+rdx*4+7]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, DWORD PTR bitD4$4[rbp-248]
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 833  :             HUF_DECODE_SYMBOLX2_0(op3, &bitD3);

	add	r12, rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, QWORD PTR bitD4$4[rbp-256]
	and	ecx, 63					; 0000003fH
	shl	rdx, cl
	mov	ecx, r8d
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 835  :             endSignal = (U32)LIKELY(

	lea	rcx, QWORD PTR bitD4$4[rbp-256]

; 663  :     memcpy(op, dt+val, 2);

	movzx	eax, WORD PTR [rsi+rdx*4+4]
	mov	WORD PTR [r15], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rsi+rdx*4+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	DWORD PTR bitD4$4[rbp-248], eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 834  :             HUF_DECODE_SYMBOLX2_0(op4, &bitD4);

	movzx	eax, BYTE PTR [rsi+rdx*4+7]
	add	r15, rax

; 835  :             endSignal = (U32)LIKELY(

	call	BIT_reloadDStreamFast
	xor	ebx, ebx
	lea	rcx, QWORD PTR bitD3$3[rsp]
	test	eax, eax
	sete	bl
	call	BIT_reloadDStreamFast
	xor	edi, edi
	lea	rcx, QWORD PTR bitD2$2[rsp]
	test	eax, eax
	sete	dil
	and	edi, ebx
	call	BIT_reloadDStreamFast
	xor	ebx, ebx
	lea	rcx, QWORD PTR bitD1$1[rsp]
	test	eax, eax
	cmove	ebx, edi
	call	BIT_reloadDStreamFast
	mov	rdx, QWORD PTR oend$1$[rbp-256]
	xor	ecx, ecx
	mov	r8d, DWORD PTR tv3285[rbp-256]
	test	eax, eax
	sete	cl
	xor	eax, eax
	and	ecx, ebx
	add	rdx, -7
	cmp	r15, rdx
	cmovb	eax, ecx
	test	eax, eax
	jne	$LL4@HUF_decomp
	mov	ebx, DWORD PTR dtLog$1$[rbp-256]
	mov	rcx, QWORD PTR opStart4$1$[rbp-256]
$LN805@HUF_decomp:

; 836  :                         (BIT_reloadDStreamFast(&bitD1) == BIT_DStream_unfinished)
; 837  :                       & (BIT_reloadDStreamFast(&bitD2) == BIT_DStream_unfinished)
; 838  :                       & (BIT_reloadDStreamFast(&bitD3) == BIT_DStream_unfinished)
; 839  :                       & (BIT_reloadDStreamFast(&bitD4) == BIT_DStream_unfinished));
; 840  : #endif
; 841  :         }
; 842  : 
; 843  :         /* check corruption */
; 844  :         if (op1 > opStart2) return ERROR(corruption_detected);

	mov	rax, QWORD PTR opStart2$1$[rbp-256]
	cmp	r14, rax
	ja	SHORT $LN840@HUF_decomp

; 845  :         if (op2 > opStart3) return ERROR(corruption_detected);

	cmp	r13, QWORD PTR opStart3$1$[rbp-256]
	ja	SHORT $LN840@HUF_decomp

; 846  :         if (op3 > opStart4) return ERROR(corruption_detected);

	cmp	r12, rcx
	jbe	SHORT $LN31@HUF_decomp
$LN840@HUF_decomp:
	mov	rax, -20
	jmp	$LN839@HUF_decomp
$LN31@HUF_decomp:

; 702  :     while ((BIT_reloadDStream(bitDPtr) == BIT_DStream_unfinished) & (p < pEnd-(sizeof(bitDPtr->bitContainer)-1))) {

	lea	rdi, QWORD PTR [rax-7]
	lea	rcx, QWORD PTR bitD1$1[rsp]
	mov	QWORD PTR tv3243[rbp-256], rdi
	call	BIT_reloadDStream
	xor	ecx, ecx
	test	eax, eax
	sete	cl
	xor	eax, eax
	cmp	r14, rdi
	setb	al
	test	ecx, eax
	je	$LN806@HUF_decomp
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	edi, ebx
	mov	rbx, QWORD PTR tv3243[rbp-256]
	neg	edi
	and	edi, 63					; 0000003fH
	npad	5
$LL483@HUF_decomp:
	mov	ecx, DWORD PTR bitD1$1[rsp+8]
	mov	rax, QWORD PTR bitD1$1[rsp]
	and	ecx, 63					; 0000003fH
	shl	rax, cl
	mov	ecx, edi
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	lea	rdx, QWORD PTR [rsi+rax*4]
	movzx	eax, WORD PTR [rsi+rax*4+4]
	mov	WORD PTR [r14], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rdx+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	mov	ecx, DWORD PTR bitD1$1[rsp+8]
	add	ecx, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 703  :         HUF_DECODE_SYMBOLX2_2(p, bitDPtr);

	movzx	eax, BYTE PTR [rdx+7]
	add	r14, rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	mov	DWORD PTR bitD1$1[rsp+8], ecx

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rax, QWORD PTR bitD1$1[rsp]
	and	ecx, 63					; 0000003fH
	shl	rax, cl
	mov	ecx, edi
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	lea	rdx, QWORD PTR [rsi+rax*4]
	movzx	eax, WORD PTR [rsi+rax*4+4]
	mov	WORD PTR [r14], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rdx+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	mov	ecx, DWORD PTR bitD1$1[rsp+8]
	add	ecx, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 704  :         HUF_DECODE_SYMBOLX2_1(p, bitDPtr);

	movzx	eax, BYTE PTR [rdx+7]
	add	r14, rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	mov	DWORD PTR bitD1$1[rsp+8], ecx

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rax, QWORD PTR bitD1$1[rsp]
	and	ecx, 63					; 0000003fH
	shl	rax, cl
	mov	ecx, edi
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	lea	rdx, QWORD PTR [rsi+rax*4]
	movzx	eax, WORD PTR [rsi+rax*4+4]
	mov	WORD PTR [r14], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rdx+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	mov	ecx, DWORD PTR bitD1$1[rsp+8]
	add	ecx, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 705  :         HUF_DECODE_SYMBOLX2_2(p, bitDPtr);

	movzx	eax, BYTE PTR [rdx+7]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, QWORD PTR bitD1$1[rsp]
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 705  :         HUF_DECODE_SYMBOLX2_2(p, bitDPtr);

	add	r14, rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	mov	DWORD PTR bitD1$1[rsp+8], ecx

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	and	ecx, 63					; 0000003fH

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	shl	rdx, cl
	mov	ecx, edi
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 702  :     while ((BIT_reloadDStream(bitDPtr) == BIT_DStream_unfinished) & (p < pEnd-(sizeof(bitDPtr->bitContainer)-1))) {

	lea	rcx, QWORD PTR bitD1$1[rsp]

; 663  :     memcpy(op, dt+val, 2);

	movzx	eax, WORD PTR [rsi+rdx*4+4]
	mov	WORD PTR [r14], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rsi+rdx*4+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	DWORD PTR bitD1$1[rsp+8], eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 706  :         HUF_DECODE_SYMBOLX2_0(p, bitDPtr);

	movzx	eax, BYTE PTR [rsi+rdx*4+7]
	add	r14, rax
	call	BIT_reloadDStream
	xor	ecx, ecx
	test	eax, eax
	sete	cl
	xor	eax, eax
	cmp	r14, rbx
	setb	al
	test	ecx, eax
	jne	$LL483@HUF_decomp
	mov	ebx, DWORD PTR dtLog$1$[rbp-256]
$LN806@HUF_decomp:

; 710  :     while ((BIT_reloadDStream(bitDPtr) == BIT_DStream_unfinished) & (p <= pEnd-2))

	mov	rdi, QWORD PTR opStart2$1$[rbp-256]
	lea	rcx, QWORD PTR bitD1$1[rsp]
	add	rdi, -2
	call	BIT_reloadDStream
	xor	ecx, ecx
	test	eax, eax
	sete	cl
	xor	eax, eax
	cmp	r14, rdi
	setbe	al
	test	ecx, eax
	je	SHORT $LN807@HUF_decomp
	neg	ebx
	and	ebx, 63					; 0000003fH
	npad	14
$LL485@HUF_decomp:
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, DWORD PTR bitD1$1[rsp+8]
	mov	rdx, QWORD PTR bitD1$1[rsp]
	and	ecx, 63					; 0000003fH
	shl	rdx, cl
	mov	ecx, ebx
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 710  :     while ((BIT_reloadDStream(bitDPtr) == BIT_DStream_unfinished) & (p <= pEnd-2))

	lea	rcx, QWORD PTR bitD1$1[rsp]

; 663  :     memcpy(op, dt+val, 2);

	movzx	eax, WORD PTR [rsi+rdx*4+4]
	mov	WORD PTR [r14], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rsi+rdx*4+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	DWORD PTR bitD1$1[rsp+8], eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 711  :         HUF_DECODE_SYMBOLX2_0(p, bitDPtr);

	movzx	eax, BYTE PTR [rsi+rdx*4+7]
	add	r14, rax
	call	BIT_reloadDStream
	xor	ecx, ecx
	test	eax, eax
	sete	cl
	xor	eax, eax
	cmp	r14, rdi
	setbe	al
	test	ecx, eax
	jne	SHORT $LL485@HUF_decomp
	mov	ebx, DWORD PTR dtLog$1$[rbp-256]
$LN807@HUF_decomp:

; 713  :     while (p <= pEnd-2)

	mov	edx, DWORD PTR bitD1$1[rsp+8]
	cmp	r14, rdi
	ja	SHORT $LN808@HUF_decomp
	mov	r8d, ebx
	neg	r8d
	and	r8d, 63					; 0000003fH
$LL487@HUF_decomp:
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rax, QWORD PTR bitD1$1[rsp]
	and	edx, 63					; 0000003fH
	movzx	ecx, dl
	shl	rax, cl
	mov	ecx, r8d
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	lea	rcx, QWORD PTR [rsi+rax*4]
	movzx	eax, WORD PTR [rsi+rax*4+4]
	mov	WORD PTR [r14], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rcx+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	mov	edx, DWORD PTR bitD1$1[rsp+8]
	add	edx, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 714  :         HUF_DECODE_SYMBOLX2_0(p, bitDPtr);   /* no need to reload : reached the end of DStream */

	movzx	eax, BYTE PTR [rcx+7]
	add	r14, rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	mov	DWORD PTR bitD1$1[rsp+8], edx
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 713  :     while (p <= pEnd-2)

	cmp	r14, rdi
	jbe	SHORT $LL487@HUF_decomp
$LN808@HUF_decomp:

; 715  : 
; 716  :     if (p < pEnd)

	mov	r8d, 64					; 00000040H
	cmp	r14, QWORD PTR opStart2$1$[rbp-256]
	jae	SHORT $LN541@HUF_decomp
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	and	edx, 63					; 0000003fH
	movzx	ecx, dl
	mov	rdx, QWORD PTR bitD1$1[rsp]
	shl	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 671  :     size_t const val = BIT_lookBitsFast(DStream, dtLog);   /* note : dtLog >= 1 */

	mov	ecx, ebx
	neg	ecx
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	and	ecx, 63					; 0000003fH
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 672  :     memcpy(op, dt+val, 1);

	movzx	eax, BYTE PTR [rsi+rdx*4+4]
	mov	BYTE PTR [r14], al

; 673  :     if (dt[val].length==1) BIT_skipBits(DStream, dt[val].nbBits);

	cmp	BYTE PTR [rsi+rdx*4+7], 1
	jne	SHORT $LN538@HUF_decomp
	movzx	eax, BYTE PTR [rsi+rdx*4+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	DWORD PTR bitD1$1[rsp+8], eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 673  :     if (dt[val].length==1) BIT_skipBits(DStream, dt[val].nbBits);

	jmp	SHORT $LN541@HUF_decomp
$LN538@HUF_decomp:

; 674  :     else {
; 675  :         if (DStream->bitsConsumed < (sizeof(DStream->bitContainer)*8)) {

	mov	ecx, DWORD PTR bitD1$1[rsp+8]
	cmp	ecx, r8d
	jae	SHORT $LN541@HUF_decomp

; 676  :             BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rsi+rdx*4+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	ecx, eax
	cmp	ecx, r8d
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 677  :             if (DStream->bitsConsumed > (sizeof(DStream->bitContainer)*8))

	cmova	ecx, r8d
	mov	DWORD PTR bitD1$1[rsp+8], ecx
$LN541@HUF_decomp:

; 702  :     while ((BIT_reloadDStream(bitDPtr) == BIT_DStream_unfinished) & (p < pEnd-(sizeof(bitDPtr->bitContainer)-1))) {

	mov	r14, QWORD PTR opStart3$1$[rbp-256]
	lea	rcx, QWORD PTR bitD2$2[rsp]
	lea	rdi, QWORD PTR [r14-7]
	mov	QWORD PTR tv3230[rbp-256], rdi
	call	BIT_reloadDStream
	xor	ecx, ecx
	test	eax, eax
	sete	cl
	xor	eax, eax
	cmp	r13, rdi
	setb	al
	test	ecx, eax
	je	$LN809@HUF_decomp
	mov	r14, QWORD PTR tv3230[rbp-256]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	edi, ebx
	neg	edi
	and	edi, 63					; 0000003fH
	npad	3
$LL550@HUF_decomp:
	mov	ecx, DWORD PTR bitD2$2[rsp+8]
	mov	rax, QWORD PTR bitD2$2[rsp]
	and	ecx, 63					; 0000003fH
	shl	rax, cl
	mov	ecx, edi
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	lea	rdx, QWORD PTR [rsi+rax*4]
	movzx	eax, WORD PTR [rsi+rax*4+4]
	mov	WORD PTR [r13], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rdx+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	mov	ecx, DWORD PTR bitD2$2[rsp+8]
	add	ecx, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 703  :         HUF_DECODE_SYMBOLX2_2(p, bitDPtr);

	movzx	eax, BYTE PTR [rdx+7]
	add	r13, rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	mov	DWORD PTR bitD2$2[rsp+8], ecx

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rax, QWORD PTR bitD2$2[rsp]
	and	ecx, 63					; 0000003fH
	shl	rax, cl
	mov	ecx, edi
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	lea	rdx, QWORD PTR [rsi+rax*4]
	movzx	eax, WORD PTR [rsi+rax*4+4]
	mov	WORD PTR [r13], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rdx+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	mov	ecx, DWORD PTR bitD2$2[rsp+8]
	add	ecx, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 704  :         HUF_DECODE_SYMBOLX2_1(p, bitDPtr);

	movzx	eax, BYTE PTR [rdx+7]
	add	r13, rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	mov	DWORD PTR bitD2$2[rsp+8], ecx

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rax, QWORD PTR bitD2$2[rsp]
	and	ecx, 63					; 0000003fH
	shl	rax, cl
	mov	ecx, edi
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	lea	rdx, QWORD PTR [rsi+rax*4]
	movzx	eax, WORD PTR [rsi+rax*4+4]
	mov	WORD PTR [r13], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rdx+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	mov	ecx, DWORD PTR bitD2$2[rsp+8]
	add	ecx, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 705  :         HUF_DECODE_SYMBOLX2_2(p, bitDPtr);

	movzx	eax, BYTE PTR [rdx+7]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, QWORD PTR bitD2$2[rsp]
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 705  :         HUF_DECODE_SYMBOLX2_2(p, bitDPtr);

	add	r13, rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	mov	DWORD PTR bitD2$2[rsp+8], ecx

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	and	ecx, 63					; 0000003fH

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	shl	rdx, cl
	mov	ecx, edi
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 702  :     while ((BIT_reloadDStream(bitDPtr) == BIT_DStream_unfinished) & (p < pEnd-(sizeof(bitDPtr->bitContainer)-1))) {

	lea	rcx, QWORD PTR bitD2$2[rsp]

; 663  :     memcpy(op, dt+val, 2);

	movzx	eax, WORD PTR [rsi+rdx*4+4]
	mov	WORD PTR [r13], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rsi+rdx*4+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	DWORD PTR bitD2$2[rsp+8], eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 706  :         HUF_DECODE_SYMBOLX2_0(p, bitDPtr);

	movzx	eax, BYTE PTR [rsi+rdx*4+7]
	add	r13, rax
	call	BIT_reloadDStream
	xor	ecx, ecx
	test	eax, eax
	sete	cl
	xor	eax, eax
	cmp	r13, r14
	setb	al
	test	ecx, eax
	jne	$LL550@HUF_decomp
	mov	r14, QWORD PTR opStart3$1$[rbp-256]
$LN809@HUF_decomp:

; 710  :     while ((BIT_reloadDStream(bitDPtr) == BIT_DStream_unfinished) & (p <= pEnd-2))

	lea	rcx, QWORD PTR bitD2$2[rsp]
	lea	rdi, QWORD PTR [r14-2]
	call	BIT_reloadDStream
	xor	ecx, ecx
	test	eax, eax
	sete	cl
	xor	eax, eax
	cmp	r13, rdi
	setbe	al
	test	ecx, eax
	je	SHORT $LN810@HUF_decomp
	mov	r14d, ebx
	neg	r14d
	and	r14d, 63				; 0000003fH
	npad	8
$LL552@HUF_decomp:
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, DWORD PTR bitD2$2[rsp+8]
	mov	rdx, QWORD PTR bitD2$2[rsp]
	and	ecx, 63					; 0000003fH
	shl	rdx, cl
	mov	ecx, r14d
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 710  :     while ((BIT_reloadDStream(bitDPtr) == BIT_DStream_unfinished) & (p <= pEnd-2))

	lea	rcx, QWORD PTR bitD2$2[rsp]

; 663  :     memcpy(op, dt+val, 2);

	movzx	eax, WORD PTR [rsi+rdx*4+4]
	mov	WORD PTR [r13], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rsi+rdx*4+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	DWORD PTR bitD2$2[rsp+8], eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 711  :         HUF_DECODE_SYMBOLX2_0(p, bitDPtr);

	movzx	eax, BYTE PTR [rsi+rdx*4+7]
	add	r13, rax
	call	BIT_reloadDStream
	xor	ecx, ecx
	test	eax, eax
	sete	cl
	xor	eax, eax
	cmp	r13, rdi
	setbe	al
	test	ecx, eax
	jne	SHORT $LL552@HUF_decomp
	mov	r14, QWORD PTR opStart3$1$[rbp-256]
$LN810@HUF_decomp:

; 713  :     while (p <= pEnd-2)

	mov	edx, DWORD PTR bitD2$2[rsp+8]
	cmp	r13, rdi
	ja	SHORT $LN811@HUF_decomp
	mov	r8d, ebx
	neg	r8d
	and	r8d, 63					; 0000003fH
	npad	12
$LL554@HUF_decomp:
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rax, QWORD PTR bitD2$2[rsp]
	and	edx, 63					; 0000003fH
	movzx	ecx, dl
	shl	rax, cl
	mov	ecx, r8d
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	lea	rcx, QWORD PTR [rsi+rax*4]
	movzx	eax, WORD PTR [rsi+rax*4+4]
	mov	WORD PTR [r13], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rcx+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	mov	edx, DWORD PTR bitD2$2[rsp+8]
	add	edx, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 714  :         HUF_DECODE_SYMBOLX2_0(p, bitDPtr);   /* no need to reload : reached the end of DStream */

	movzx	eax, BYTE PTR [rcx+7]
	add	r13, rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	mov	DWORD PTR bitD2$2[rsp+8], edx
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 713  :     while (p <= pEnd-2)

	cmp	r13, rdi
	jbe	SHORT $LL554@HUF_decomp
$LN811@HUF_decomp:

; 715  : 
; 716  :     if (p < pEnd)

	cmp	r13, r14
	jae	SHORT $LN608@HUF_decomp
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	and	edx, 63					; 0000003fH
	movzx	ecx, dl
	mov	rdx, QWORD PTR bitD2$2[rsp]
	shl	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 671  :     size_t const val = BIT_lookBitsFast(DStream, dtLog);   /* note : dtLog >= 1 */

	mov	ecx, ebx
	neg	ecx
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	and	ecx, 63					; 0000003fH
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 672  :     memcpy(op, dt+val, 1);

	movzx	eax, BYTE PTR [rsi+rdx*4+4]
	mov	BYTE PTR [r13], al

; 673  :     if (dt[val].length==1) BIT_skipBits(DStream, dt[val].nbBits);

	cmp	BYTE PTR [rsi+rdx*4+7], 1
	jne	SHORT $LN605@HUF_decomp
	movzx	eax, BYTE PTR [rsi+rdx*4+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	DWORD PTR bitD2$2[rsp+8], eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 673  :     if (dt[val].length==1) BIT_skipBits(DStream, dt[val].nbBits);

	jmp	SHORT $LN608@HUF_decomp
$LN605@HUF_decomp:

; 674  :     else {
; 675  :         if (DStream->bitsConsumed < (sizeof(DStream->bitContainer)*8)) {

	mov	ecx, DWORD PTR bitD2$2[rsp+8]
	cmp	ecx, 64					; 00000040H
	jae	SHORT $LN608@HUF_decomp

; 676  :             BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rsi+rdx*4+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	ecx, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 677  :             if (DStream->bitsConsumed > (sizeof(DStream->bitContainer)*8))

	mov	eax, 64					; 00000040H
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	cmp	ecx, 64					; 00000040H
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 677  :             if (DStream->bitsConsumed > (sizeof(DStream->bitContainer)*8))

	cmova	ecx, eax
	mov	DWORD PTR bitD2$2[rsp+8], ecx
$LN608@HUF_decomp:

; 702  :     while ((BIT_reloadDStream(bitDPtr) == BIT_DStream_unfinished) & (p < pEnd-(sizeof(bitDPtr->bitContainer)-1))) {

	mov	r13, QWORD PTR opStart4$1$[rbp-256]
	lea	rcx, QWORD PTR bitD3$3[rsp]
	lea	r14, QWORD PTR [r13-7]
	call	BIT_reloadDStream
	xor	ecx, ecx
	test	eax, eax
	sete	cl
	xor	eax, eax
	cmp	r12, r14
	setb	al
	test	ecx, eax
	je	$LN812@HUF_decomp
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	edi, ebx
	neg	edi
	and	edi, 63					; 0000003fH
	npad	13
$LL617@HUF_decomp:
	mov	ecx, DWORD PTR bitD3$3[rsp+8]
	mov	rax, QWORD PTR bitD3$3[rsp]
	and	ecx, 63					; 0000003fH
	shl	rax, cl
	mov	ecx, edi
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	lea	rdx, QWORD PTR [rsi+rax*4]
	movzx	eax, WORD PTR [rsi+rax*4+4]
	mov	WORD PTR [r12], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rdx+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	mov	ecx, DWORD PTR bitD3$3[rsp+8]
	add	ecx, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 703  :         HUF_DECODE_SYMBOLX2_2(p, bitDPtr);

	movzx	eax, BYTE PTR [rdx+7]
	add	r12, rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	mov	DWORD PTR bitD3$3[rsp+8], ecx

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rax, QWORD PTR bitD3$3[rsp]
	and	ecx, 63					; 0000003fH
	shl	rax, cl
	mov	ecx, edi
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	lea	rdx, QWORD PTR [rsi+rax*4]
	movzx	eax, WORD PTR [rsi+rax*4+4]
	mov	WORD PTR [r12], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rdx+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	mov	ecx, DWORD PTR bitD3$3[rsp+8]
	add	ecx, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 704  :         HUF_DECODE_SYMBOLX2_1(p, bitDPtr);

	movzx	eax, BYTE PTR [rdx+7]
	add	r12, rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	mov	DWORD PTR bitD3$3[rsp+8], ecx

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rax, QWORD PTR bitD3$3[rsp]
	and	ecx, 63					; 0000003fH
	shl	rax, cl
	mov	ecx, edi
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	lea	rdx, QWORD PTR [rsi+rax*4]
	movzx	eax, WORD PTR [rsi+rax*4+4]
	mov	WORD PTR [r12], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rdx+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	mov	ecx, DWORD PTR bitD3$3[rsp+8]
	add	ecx, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 705  :         HUF_DECODE_SYMBOLX2_2(p, bitDPtr);

	movzx	eax, BYTE PTR [rdx+7]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, QWORD PTR bitD3$3[rsp]
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 705  :         HUF_DECODE_SYMBOLX2_2(p, bitDPtr);

	add	r12, rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	mov	DWORD PTR bitD3$3[rsp+8], ecx

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	and	ecx, 63					; 0000003fH

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	shl	rdx, cl
	mov	ecx, edi
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 702  :     while ((BIT_reloadDStream(bitDPtr) == BIT_DStream_unfinished) & (p < pEnd-(sizeof(bitDPtr->bitContainer)-1))) {

	lea	rcx, QWORD PTR bitD3$3[rsp]

; 663  :     memcpy(op, dt+val, 2);

	movzx	eax, WORD PTR [rsi+rdx*4+4]
	mov	WORD PTR [r12], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rsi+rdx*4+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	DWORD PTR bitD3$3[rsp+8], eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 706  :         HUF_DECODE_SYMBOLX2_0(p, bitDPtr);

	movzx	eax, BYTE PTR [rsi+rdx*4+7]
	add	r12, rax
	call	BIT_reloadDStream
	xor	ecx, ecx
	test	eax, eax
	sete	cl
	xor	eax, eax
	cmp	r12, r14
	setb	al
	test	ecx, eax
	jne	$LL617@HUF_decomp
$LN812@HUF_decomp:

; 710  :     while ((BIT_reloadDStream(bitDPtr) == BIT_DStream_unfinished) & (p <= pEnd-2))

	lea	rcx, QWORD PTR bitD3$3[rsp]
	lea	rdi, QWORD PTR [r13-2]
	call	BIT_reloadDStream
	xor	ecx, ecx
	test	eax, eax
	sete	cl
	xor	eax, eax
	cmp	r12, rdi
	setbe	al
	test	ecx, eax
	je	SHORT $LN813@HUF_decomp
	mov	r14d, ebx
	neg	r14d
	and	r14d, 63				; 0000003fH
	npad	12
$LL619@HUF_decomp:
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, DWORD PTR bitD3$3[rsp+8]
	mov	rdx, QWORD PTR bitD3$3[rsp]
	and	ecx, 63					; 0000003fH
	shl	rdx, cl
	mov	ecx, r14d
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 710  :     while ((BIT_reloadDStream(bitDPtr) == BIT_DStream_unfinished) & (p <= pEnd-2))

	lea	rcx, QWORD PTR bitD3$3[rsp]

; 663  :     memcpy(op, dt+val, 2);

	movzx	eax, WORD PTR [rsi+rdx*4+4]
	mov	WORD PTR [r12], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rsi+rdx*4+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	DWORD PTR bitD3$3[rsp+8], eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 711  :         HUF_DECODE_SYMBOLX2_0(p, bitDPtr);

	movzx	eax, BYTE PTR [rsi+rdx*4+7]
	add	r12, rax
	call	BIT_reloadDStream
	xor	ecx, ecx
	test	eax, eax
	sete	cl
	xor	eax, eax
	cmp	r12, rdi
	setbe	al
	test	ecx, eax
	jne	SHORT $LL619@HUF_decomp
$LN813@HUF_decomp:

; 713  :     while (p <= pEnd-2)

	mov	edx, DWORD PTR bitD3$3[rsp+8]
	cmp	r12, rdi
	ja	SHORT $LN814@HUF_decomp
	mov	r8d, ebx
	neg	r8d
	and	r8d, 63					; 0000003fH
$LL621@HUF_decomp:
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rax, QWORD PTR bitD3$3[rsp]
	and	edx, 63					; 0000003fH
	movzx	ecx, dl
	shl	rax, cl
	mov	ecx, r8d
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	lea	rcx, QWORD PTR [rsi+rax*4]
	movzx	eax, WORD PTR [rsi+rax*4+4]
	mov	WORD PTR [r12], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rcx+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	mov	edx, DWORD PTR bitD3$3[rsp+8]
	add	edx, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 714  :         HUF_DECODE_SYMBOLX2_0(p, bitDPtr);   /* no need to reload : reached the end of DStream */

	movzx	eax, BYTE PTR [rcx+7]
	add	r12, rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	mov	DWORD PTR bitD3$3[rsp+8], edx
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 713  :     while (p <= pEnd-2)

	cmp	r12, rdi
	jbe	SHORT $LL621@HUF_decomp
$LN814@HUF_decomp:

; 715  : 
; 716  :     if (p < pEnd)

	cmp	r12, r13
	jae	SHORT $LN836@HUF_decomp
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	and	edx, 63					; 0000003fH
	movzx	ecx, dl
	mov	rdx, QWORD PTR bitD3$3[rsp]
	shl	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 671  :     size_t const val = BIT_lookBitsFast(DStream, dtLog);   /* note : dtLog >= 1 */

	mov	ecx, ebx
	neg	ecx
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	and	ecx, 63					; 0000003fH
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 672  :     memcpy(op, dt+val, 1);

	movzx	eax, BYTE PTR [rsi+rdx*4+4]
	mov	BYTE PTR [r12], al

; 673  :     if (dt[val].length==1) BIT_skipBits(DStream, dt[val].nbBits);

	cmp	BYTE PTR [rsi+rdx*4+7], 1
	jne	$LN672@HUF_decomp
	movzx	eax, BYTE PTR [rsi+rdx*4+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	DWORD PTR bitD3$3[rsp+8], eax
$LN836@HUF_decomp:
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 702  :     while ((BIT_reloadDStream(bitDPtr) == BIT_DStream_unfinished) & (p < pEnd-(sizeof(bitDPtr->bitContainer)-1))) {

	mov	r12d, 64				; 00000040H
$LN675@HUF_decomp:
	lea	rcx, QWORD PTR bitD4$4[rbp-256]
	call	BIT_reloadDStream
	mov	r13, QWORD PTR oend$1$[rbp-256]
	xor	ecx, ecx
	test	eax, eax
	sete	cl
	xor	eax, eax
	lea	r14, QWORD PTR [r13-7]
	cmp	r15, r14
	setb	al
	test	ecx, eax
	je	$LN815@HUF_decomp
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	edi, ebx
	neg	edi
	and	edi, 63					; 0000003fH
	npad	5
$LL684@HUF_decomp:
	mov	ecx, DWORD PTR bitD4$4[rbp-248]
	mov	rax, QWORD PTR bitD4$4[rbp-256]
	and	ecx, 63					; 0000003fH
	shl	rax, cl
	mov	ecx, edi
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	lea	rdx, QWORD PTR [rsi+rax*4]
	movzx	eax, WORD PTR [rsi+rax*4+4]
	mov	WORD PTR [r15], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rdx+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	mov	ecx, DWORD PTR bitD4$4[rbp-248]
	add	ecx, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 703  :         HUF_DECODE_SYMBOLX2_2(p, bitDPtr);

	movzx	eax, BYTE PTR [rdx+7]
	add	r15, rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	mov	DWORD PTR bitD4$4[rbp-248], ecx

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rax, QWORD PTR bitD4$4[rbp-256]
	and	ecx, 63					; 0000003fH
	shl	rax, cl
	mov	ecx, edi
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	lea	rdx, QWORD PTR [rsi+rax*4]
	movzx	eax, WORD PTR [rsi+rax*4+4]
	mov	WORD PTR [r15], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rdx+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	mov	ecx, DWORD PTR bitD4$4[rbp-248]
	add	ecx, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 704  :         HUF_DECODE_SYMBOLX2_1(p, bitDPtr);

	movzx	eax, BYTE PTR [rdx+7]
	add	r15, rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	mov	DWORD PTR bitD4$4[rbp-248], ecx

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rax, QWORD PTR bitD4$4[rbp-256]
	and	ecx, 63					; 0000003fH
	shl	rax, cl
	mov	ecx, edi
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	lea	rdx, QWORD PTR [rsi+rax*4]
	movzx	eax, WORD PTR [rsi+rax*4+4]
	mov	WORD PTR [r15], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rdx+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	mov	ecx, DWORD PTR bitD4$4[rbp-248]
	add	ecx, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 705  :         HUF_DECODE_SYMBOLX2_2(p, bitDPtr);

	movzx	eax, BYTE PTR [rdx+7]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rdx, QWORD PTR bitD4$4[rbp-256]
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 705  :         HUF_DECODE_SYMBOLX2_2(p, bitDPtr);

	add	r15, rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	mov	DWORD PTR bitD4$4[rbp-248], ecx

; 363  :     U32 const regMask = sizeof(bitD->bitContainer)*8 - 1;

	and	ecx, 63					; 0000003fH

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	shl	rdx, cl
	mov	ecx, edi
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 702  :     while ((BIT_reloadDStream(bitDPtr) == BIT_DStream_unfinished) & (p < pEnd-(sizeof(bitDPtr->bitContainer)-1))) {

	lea	rcx, QWORD PTR bitD4$4[rbp-256]

; 663  :     memcpy(op, dt+val, 2);

	movzx	eax, WORD PTR [rsi+rdx*4+4]
	mov	WORD PTR [r15], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rsi+rdx*4+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	DWORD PTR bitD4$4[rbp-248], eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 706  :         HUF_DECODE_SYMBOLX2_0(p, bitDPtr);

	movzx	eax, BYTE PTR [rsi+rdx*4+7]
	add	r15, rax
	call	BIT_reloadDStream
	xor	ecx, ecx
	test	eax, eax
	sete	cl
	xor	eax, eax
	cmp	r15, r14
	setb	al
	test	ecx, eax
	jne	$LL684@HUF_decomp
$LN815@HUF_decomp:

; 710  :     while ((BIT_reloadDStream(bitDPtr) == BIT_DStream_unfinished) & (p <= pEnd-2))

	lea	rcx, QWORD PTR bitD4$4[rbp-256]
	lea	rdi, QWORD PTR [r13-2]
	call	BIT_reloadDStream
	xor	ecx, ecx
	test	eax, eax
	sete	cl
	xor	eax, eax
	cmp	r15, rdi
	setbe	al
	test	ecx, eax
	je	SHORT $LN816@HUF_decomp
	mov	r14d, ebx
	neg	r14d
	and	r14d, 63				; 0000003fH
	npad	14
$LL686@HUF_decomp:
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	ecx, DWORD PTR bitD4$4[rbp-248]
	mov	rdx, QWORD PTR bitD4$4[rbp-256]
	and	ecx, 63					; 0000003fH
	shl	rdx, cl
	mov	ecx, r14d
	shr	rdx, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 710  :     while ((BIT_reloadDStream(bitDPtr) == BIT_DStream_unfinished) & (p <= pEnd-2))

	lea	rcx, QWORD PTR bitD4$4[rbp-256]

; 663  :     memcpy(op, dt+val, 2);

	movzx	eax, WORD PTR [rsi+rdx*4+4]
	mov	WORD PTR [r15], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rsi+rdx*4+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	DWORD PTR bitD4$4[rbp-248], eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 711  :         HUF_DECODE_SYMBOLX2_0(p, bitDPtr);

	movzx	eax, BYTE PTR [rsi+rdx*4+7]
	add	r15, rax
	call	BIT_reloadDStream
	xor	ecx, ecx
	test	eax, eax
	sete	cl
	xor	eax, eax
	cmp	r15, rdi
	setbe	al
	test	ecx, eax
	jne	SHORT $LL686@HUF_decomp
$LN816@HUF_decomp:

; 713  :     while (p <= pEnd-2)

	mov	edx, DWORD PTR bitD4$4[rbp-248]
	cmp	r15, rdi
	ja	SHORT $LN817@HUF_decomp
	mov	r8d, ebx
	neg	r8d
	and	r8d, 63					; 0000003fH
	npad	6
$LL688@HUF_decomp:
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rax, QWORD PTR bitD4$4[rbp-256]
	and	edx, 63					; 0000003fH
	movzx	ecx, dl
	shl	rax, cl
	mov	ecx, r8d
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 663  :     memcpy(op, dt+val, 2);

	lea	rcx, QWORD PTR [rsi+rax*4]
	movzx	eax, WORD PTR [rsi+rax*4+4]
	mov	WORD PTR [r15], ax

; 664  :     BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rcx+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	mov	edx, DWORD PTR bitD4$4[rbp-248]
	add	edx, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 714  :         HUF_DECODE_SYMBOLX2_0(p, bitDPtr);   /* no need to reload : reached the end of DStream */

	movzx	eax, BYTE PTR [rcx+7]
	add	r15, rax
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	mov	DWORD PTR bitD4$4[rbp-248], edx
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 713  :     while (p <= pEnd-2)

	cmp	r15, rdi
	jbe	SHORT $LL688@HUF_decomp
$LN817@HUF_decomp:

; 715  : 
; 716  :     if (p < pEnd)

	cmp	r15, r13
	jae	SHORT $LN742@HUF_decomp
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	mov	rax, QWORD PTR bitD4$4[rbp-256]
	and	edx, 63					; 0000003fH
	movzx	ecx, dl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 671  :     size_t const val = BIT_lookBitsFast(DStream, dtLog);   /* note : dtLog >= 1 */

	neg	ebx
; File E:\dev\pyzstd\lib\common\bitstream.h

; 365  :     return (bitD->bitContainer << (bitD->bitsConsumed & regMask)) >> (((regMask+1)-nbBits) & regMask);

	shl	rax, cl
	and	ebx, 63					; 0000003fH
	movzx	ecx, bl
	shr	rax, cl
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 672  :     memcpy(op, dt+val, 1);

	lea	rcx, QWORD PTR [rsi+rax*4]
	movzx	eax, BYTE PTR [rsi+rax*4+4]
	mov	BYTE PTR [r15], al

; 673  :     if (dt[val].length==1) BIT_skipBits(DStream, dt[val].nbBits);

	cmp	BYTE PTR [rcx+7], 1
	mov	edx, DWORD PTR bitD4$4[rbp-248]
	jne	SHORT $LN739@HUF_decomp
	movzx	eax, BYTE PTR [rcx+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	edx, eax
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 673  :     if (dt[val].length==1) BIT_skipBits(DStream, dt[val].nbBits);

	jmp	SHORT $LN742@HUF_decomp
$LN672@HUF_decomp:

; 675  :         if (DStream->bitsConsumed < (sizeof(DStream->bitContainer)*8)) {

	mov	ecx, DWORD PTR bitD3$3[rsp+8]
	cmp	ecx, 64					; 00000040H
	jae	$LN836@HUF_decomp

; 676  :             BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rsi+rdx*4+6]

; 677  :             if (DStream->bitsConsumed > (sizeof(DStream->bitContainer)*8))

	mov	r12d, 64				; 00000040H
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	ecx, eax
	cmp	ecx, 64					; 00000040H
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 677  :             if (DStream->bitsConsumed > (sizeof(DStream->bitContainer)*8))

	cmova	ecx, r12d
	mov	DWORD PTR bitD3$3[rsp+8], ecx

; 716  :     if (p < pEnd)

	jmp	$LN675@HUF_decomp
$LN739@HUF_decomp:

; 675  :         if (DStream->bitsConsumed < (sizeof(DStream->bitContainer)*8)) {

	cmp	edx, 64					; 00000040H
	jae	SHORT $LN742@HUF_decomp

; 676  :             BIT_skipBits(DStream, dt[val].nbBits);

	movzx	eax, BYTE PTR [rcx+6]
; File E:\dev\pyzstd\lib\common\bitstream.h

; 370  :     bitD->bitsConsumed += nbBits;

	add	edx, eax
	cmp	edx, 64					; 00000040H
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 677  :             if (DStream->bitsConsumed > (sizeof(DStream->bitContainer)*8))

	cmova	edx, r12d
$LN742@HUF_decomp:
; File E:\dev\pyzstd\lib\common\bitstream.h

; 447  :     return ((DStream->ptr == DStream->start) && (DStream->bitsConsumed == sizeof(DStream->bitContainer)*8));

	mov	rax, QWORD PTR bitD1$1[rsp+24]
	mov	ecx, 1
	cmp	QWORD PTR bitD1$1[rsp+16], rax
	jne	SHORT $LN752@HUF_decomp
	cmp	DWORD PTR bitD1$1[rsp+8], 64		; 00000040H
	jne	SHORT $LN752@HUF_decomp
	mov	r10d, ecx
	jmp	SHORT $LN753@HUF_decomp
$LN752@HUF_decomp:
	xor	r10d, r10d
$LN753@HUF_decomp:
	mov	rax, QWORD PTR bitD2$2[rsp+24]
	cmp	QWORD PTR bitD2$2[rsp+16], rax
	jne	SHORT $LN756@HUF_decomp
	cmp	DWORD PTR bitD2$2[rsp+8], 64		; 00000040H
	jne	SHORT $LN756@HUF_decomp
	mov	r9d, ecx
	jmp	SHORT $LN757@HUF_decomp
$LN756@HUF_decomp:
	xor	r9d, r9d
$LN757@HUF_decomp:
	mov	rax, QWORD PTR bitD3$3[rbp-232]
	cmp	QWORD PTR bitD3$3[rbp-240], rax
	jne	SHORT $LN760@HUF_decomp
	cmp	DWORD PTR bitD3$3[rsp+8], 64		; 00000040H
	jne	SHORT $LN760@HUF_decomp
	mov	r8d, ecx
	jmp	SHORT $LN761@HUF_decomp
$LN760@HUF_decomp:
	xor	r8d, r8d
$LN761@HUF_decomp:
	mov	rax, QWORD PTR bitD4$4[rbp-232]
	cmp	QWORD PTR bitD4$4[rbp-240], rax
	jne	SHORT $LN764@HUF_decomp
	cmp	edx, 64					; 00000040H
	je	SHORT $LN765@HUF_decomp
$LN764@HUF_decomp:
	xor	ecx, ecx
$LN765@HUF_decomp:
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 856  :         { U32 const endCheck = BIT_endOfDStream(&bitD1) & BIT_endOfDStream(&bitD2) & BIT_endOfDStream(&bitD3) & BIT_endOfDStream(&bitD4);

	and	ecx, r8d

; 857  :           if (!endCheck) return ERROR(corruption_detected); }

	mov	rax, -20
	and	ecx, r9d
	test	ecx, r10d
	mov	rcx, QWORD PTR dstSize$[rbp-256]
	cmove	rcx, rax
	mov	rax, rcx
$LN839@HUF_decomp:
	mov	r12, QWORD PTR [rsp+280]
	mov	rsi, QWORD PTR [rsp+336]
	mov	r15, QWORD PTR [rsp+272]

; 865  : HUF_DGEN(HUF_decompress4X2_usingDTable_internal)

	add	rsp, 288				; 00000120H
	pop	r14
	pop	r13
	pop	rdi
	pop	rbx
	pop	rbp
	ret	0
HUF_decompress4X2_usingDTable_internal ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\error_private.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
_TEXT	SEGMENT
dctx$ = 64
dst$ = 72
dstSize$ = 80
cSrc$ = 88
cSrcSize$ = 96
workSpace$ = 104
wkspSize$dead$ = 112
bmi2$ = 120
HUF_decompress4X2_DCtx_wksp_bmi2 PROC

; 920  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	sub	rsp, 48					; 00000030H

; 921  :     const BYTE* ip = (const BYTE*) cSrc;
; 922  : 
; 923  :     size_t hSize = HUF_readDTableX2_wksp(dctx, cSrc, cSrcSize,

	mov	rbx, QWORD PTR cSrcSize$[rsp]
	mov	rdi, r9
	mov	r9, QWORD PTR workSpace$[rsp]
	mov	rbp, r8
	mov	r14, rdx
	mov	QWORD PTR [rsp+32], 2048		; 00000800H
	mov	r8, rbx
	mov	rdx, rdi
	mov	rsi, rcx
	call	HUF_readDTableX2_wksp
; File E:\dev\pyzstd\lib\common\error_private.h

; 56   : ERR_STATIC unsigned ERR_isError(size_t code) { return (code > ERROR(maxCode)); }

	cmp	rax, -120				; ffffffffffffff88H
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 925  :     if (HUF_isError(hSize)) return hSize;

	ja	SHORT $LN1@HUF_decomp

; 926  :     if (hSize >= cSrcSize) return ERROR(srcSize_wrong);

	cmp	rax, rbx
	jb	SHORT $LN3@HUF_decomp
	mov	rax, -72				; ffffffffffffffb8H
	jmp	SHORT $LN1@HUF_decomp
$LN3@HUF_decomp:

; 927  :     ip += hSize; cSrcSize -= hSize;

	sub	rbx, rax
	lea	r8, QWORD PTR [rax+rdi]

; 928  : 
; 929  :     return HUF_decompress4X2_usingDTable_internal(dst, dstSize, ip, cSrcSize, dctx, bmi2);

	mov	eax, DWORD PTR bmi2$[rsp]
	mov	r9, rbx
	mov	DWORD PTR [rsp+40], eax
	mov	rdx, rbp
	mov	rcx, r14
	mov	QWORD PTR [rsp+32], rsi
	call	HUF_decompress4X2_usingDTable_internal
$LN1@HUF_decomp:

; 930  : }

	mov	rbx, QWORD PTR [rsp+64]
	mov	rbp, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	mov	rdi, QWORD PTR [rsp+88]
	add	rsp, 48					; 00000030H
	pop	r14
	ret	0
HUF_decompress4X2_DCtx_wksp_bmi2 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
_TEXT	SEGMENT
dctx$ = 80
dst$ = 88
dstSize$ = 96
cSrc$ = 104
cSrcSize$ = 112
workSpace$ = 120
wkspSize$dead$ = 128
HUF_decompress4X2_DCtx_wksp PROC

; 935  : {

$LN4:
	sub	rsp, 72					; 00000048H

; 936  :     return HUF_decompress4X2_DCtx_wksp_bmi2(dctx, dst, dstSize, cSrc, cSrcSize, workSpace, wkspSize, /* bmi2 */ 0);

	mov	rax, QWORD PTR workSpace$[rsp]
	mov	DWORD PTR [rsp+56], 0
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR cSrcSize$[rsp]
	mov	QWORD PTR [rsp+32], rax
	call	HUF_decompress4X2_DCtx_wksp_bmi2

; 937  : }

	add	rsp, 72					; 00000048H
	ret	0
HUF_decompress4X2_DCtx_wksp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\error_private.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
_TEXT	SEGMENT
workSpace$ = 48
__$ArrayPad$ = 2096
dctx$ = 2160
dst$ = 2168
dstSize$ = 2176
cSrc$ = 2184
cSrcSize$ = 2192
HUF_decompress4X2_DCtx PROC

; 942  : {

$LN711:
	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r14
	sub	rsp, 2112				; 00000840H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 923  :     size_t hSize = HUF_readDTableX2_wksp(dctx, cSrc, cSrcSize,

	mov	rbx, QWORD PTR cSrcSize$[rsp]

; 942  : {

	mov	rsi, r9
	mov	r14, r8

; 923  :     size_t hSize = HUF_readDTableX2_wksp(dctx, cSrc, cSrcSize,

	mov	QWORD PTR [rsp+32], 2048		; 00000800H

; 942  : {

	mov	rbp, rdx

; 923  :     size_t hSize = HUF_readDTableX2_wksp(dctx, cSrc, cSrcSize,

	lea	r9, QWORD PTR workSpace$[rsp]
	mov	r8, rbx
	mov	rdx, rsi

; 942  : {

	mov	rdi, rcx

; 923  :     size_t hSize = HUF_readDTableX2_wksp(dctx, cSrc, cSrcSize,

	call	HUF_readDTableX2_wksp
; File E:\dev\pyzstd\lib\common\error_private.h

; 56   : ERR_STATIC unsigned ERR_isError(size_t code) { return (code > ERROR(maxCode)); }

	cmp	rax, -120				; ffffffffffffff88H
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 925  :     if (HUF_isError(hSize)) return hSize;

	ja	SHORT $LN5@HUF_decomp

; 926  :     if (hSize >= cSrcSize) return ERROR(srcSize_wrong);

	cmp	rax, rbx
	jb	SHORT $LN7@HUF_decomp

; 943  :     U32 workSpace[HUF_DECOMPRESS_WORKSPACE_SIZE_U32];
; 944  :     return HUF_decompress4X2_DCtx_wksp(dctx, dst, dstSize, cSrc, cSrcSize,

	mov	rax, -72				; ffffffffffffffb8H

; 926  :     if (hSize >= cSrcSize) return ERROR(srcSize_wrong);

	jmp	SHORT $LN5@HUF_decomp
$LN7@HUF_decomp:

; 927  :     ip += hSize; cSrcSize -= hSize;

	sub	rbx, rax

; 928  : 
; 929  :     return HUF_decompress4X2_usingDTable_internal(dst, dstSize, ip, cSrcSize, dctx, bmi2);

	mov	DWORD PTR [rsp+40], 0
	mov	r9, rbx
	mov	QWORD PTR [rsp+32], rdi
	lea	r8, QWORD PTR [rax+rsi]
	mov	rdx, r14
	mov	rcx, rbp
	call	HUF_decompress4X2_usingDTable_internal
$LN5@HUF_decomp:

; 945  :                                        workSpace, sizeof(workSpace));
; 946  : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 2112				; 00000840H
	pop	r14
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
HUF_decompress4X2_DCtx ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
; File E:\dev\pyzstd\lib\common\error_private.h
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
_TEXT	SEGMENT
workSpace$1 = 48
DTable$ = 2096
__$ArrayPad$ = 18496
dst$ = 18560
dstSize$ = 18568
cSrc$ = 18576
cSrcSize$ = 18584
HUF_decompress4X2 PROC

; 949  : {

$LN713:
	push	rbx
	push	rbp
	push	rsi
	push	rdi
	mov	eax, 18520				; 00004858H
	call	__chkstk
	sub	rsp, rax
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	rdi, r8

; 950  :     HUF_CREATE_STATIC_DTABLEX2(DTable, HUF_TABLELOG_MAX);

	mov	DWORD PTR DTable$[rsp], 201326604	; 0c00000cH
	mov	rbp, rdx
	mov	rsi, rcx
	xor	edx, edx
	lea	rcx, QWORD PTR DTable$[rsp+4]
	mov	r8d, 16384				; 00004000H
	mov	rbx, r9
	call	memset

; 923  :     size_t hSize = HUF_readDTableX2_wksp(dctx, cSrc, cSrcSize,

	lea	r9, QWORD PTR workSpace$1[rsp]
	mov	QWORD PTR [rsp+32], 2048		; 00000800H
	mov	r8, rbx
	lea	rcx, QWORD PTR DTable$[rsp]
	mov	rdx, rdi
	call	HUF_readDTableX2_wksp
; File E:\dev\pyzstd\lib\common\error_private.h

; 56   : ERR_STATIC unsigned ERR_isError(size_t code) { return (code > ERROR(maxCode)); }

	cmp	rax, -120				; ffffffffffffff88H
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c

; 925  :     if (HUF_isError(hSize)) return hSize;

	ja	SHORT $LN7@HUF_decomp

; 926  :     if (hSize >= cSrcSize) return ERROR(srcSize_wrong);

	cmp	rax, rbx
	jb	SHORT $LN9@HUF_decomp

; 951  :     return HUF_decompress4X2_DCtx(DTable, dst, dstSize, cSrc, cSrcSize);

	mov	rax, -72				; ffffffffffffffb8H

; 926  :     if (hSize >= cSrcSize) return ERROR(srcSize_wrong);

	jmp	SHORT $LN7@HUF_decomp
$LN9@HUF_decomp:

; 927  :     ip += hSize; cSrcSize -= hSize;

	sub	rbx, rax

; 928  : 
; 929  :     return HUF_decompress4X2_usingDTable_internal(dst, dstSize, ip, cSrcSize, dctx, bmi2);

	mov	DWORD PTR [rsp+40], 0
	lea	r8, QWORD PTR [rax+rdi]
	mov	r9, rbx
	lea	rax, QWORD PTR DTable$[rsp]
	mov	rdx, rbp
	mov	rcx, rsi
	mov	QWORD PTR [rsp+32], rax
	call	HUF_decompress4X2_usingDTable_internal
$LN7@HUF_decomp:

; 952  : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 18520				; 00004858H
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
HUF_decompress4X2 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\decompress\huf_decompress.c
_TEXT	SEGMENT
dstSize$ = 8
cSrcSize$ = 16
HUF_selectDecoder PROC

; 1030 : {

	mov	rax, rdx
	mov	r8, rcx

; 1031 :     assert(dstSize > 0);
; 1032 :     assert(dstSize <= 128*1024);
; 1033 : #if defined(HUF_FORCE_DECOMPRESS_X1)
; 1034 :     (void)dstSize;
; 1035 :     (void)cSrcSize;
; 1036 :     return 0;
; 1037 : #elif defined(HUF_FORCE_DECOMPRESS_X2)
; 1038 :     (void)dstSize;
; 1039 :     (void)cSrcSize;
; 1040 :     return 1;
; 1041 : #else
; 1042 :     /* decoder timing evaluation */
; 1043 :     {   U32 const Q = (cSrcSize >= dstSize) ? 15 : (U32)(cSrcSize * 16 / dstSize);   /* Q < 16 */

	cmp	rdx, rcx
	jb	SHORT $LN3@HUF_select
	mov	eax, 15
	jmp	SHORT $LN4@HUF_select
$LN3@HUF_select:
	shl	rax, 4
	xor	edx, edx
	div	r8
$LN4@HUF_select:

; 1044 :         U32 const D256 = (U32)(dstSize >> 8);
; 1045 :         U32 const DTime0 = algoTime[Q][0].tableTime + (algoTime[Q][0].decode256Time * D256);
; 1046 :         U32 DTime1 = algoTime[Q][1].tableTime + (algoTime[Q][1].decode256Time * D256);

	mov	eax, eax
	lea	r9, OFFSET FLAT:algoTime
	shr	r8, 8
	lea	rcx, QWORD PTR [rax+rax*2]
	mov	eax, DWORD PTR [r9+rcx*8+12]
	mov	edx, DWORD PTR [r9+rcx*8+4]
	imul	eax, r8d
	imul	edx, r8d
	add	eax, DWORD PTR [r9+rcx*8+8]
	add	edx, DWORD PTR [r9+rcx*8]

; 1047 :         DTime1 += DTime1 >> 3;  /* advantage to algorithm using less memory, to reduce cache eviction */

	mov	ecx, eax
	shr	ecx, 3
	add	ecx, eax

; 1048 :         return DTime1 < DTime0;

	xor	eax, eax
	cmp	ecx, edx
	setb	al

; 1049 :     }
; 1050 : #endif
; 1051 : }

	ret	0
HUF_selectDecoder ENDP
_TEXT	ENDS
END
