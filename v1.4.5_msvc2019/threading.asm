; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29111.0 

include listing.inc

INCLUDELIB OLDNAMES

EXTRN	__imp__errno:PROC
EXTRN	__imp_GetLastError:PROC
EXTRN	__imp_WaitForSingleObject:PROC
EXTRN	__imp__beginthreadex:PROC
PUBLIC	ZSTD_pthread_create
PUBLIC	ZSTD_pthread_join
pdata	SEGMENT
$pdata$worker DD imagerel worker
	DD	imagerel worker+28
	DD	imagerel $unwind$worker
$pdata$ZSTD_pthread_create DD imagerel $LN6
	DD	imagerel $LN6+85
	DD	imagerel $unwind$ZSTD_pthread_create
$pdata$ZSTD_pthread_join DD imagerel $LN11
	DD	imagerel $LN11+62
	DD	imagerel $unwind$ZSTD_pthread_join
xdata	SEGMENT
$unwind$worker DD 020601H
	DD	030023206H
$unwind$ZSTD_pthread_create DD 020601H
	DD	030025206H
$unwind$ZSTD_pthread_join DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\common\threading.c
_TEXT	SEGMENT
thread$ = 48
value_ptr$dead$ = 56
ZSTD_pthread_join PROC

; 60   : {

$LN11:
	sub	rsp, 40					; 00000028H

; 61   :     DWORD result;
; 62   : 
; 63   :     if (!thread.handle) return 0;

	mov	rcx, QWORD PTR [rcx]
	test	rcx, rcx
	je	SHORT $LN6@ZSTD_pthre

; 64   : 
; 65   :     result = WaitForSingleObject(thread.handle, INFINITE);

	mov	edx, -1					; ffffffffH
	call	QWORD PTR __imp_WaitForSingleObject

; 66   :     switch (result) {

	test	eax, eax
	je	SHORT $LN6@ZSTD_pthre
	cmp	eax, 128				; 00000080H
	je	SHORT $LN7@ZSTD_pthre

; 72   :     default:
; 73   :         return GetLastError();

	call	QWORD PTR __imp_GetLastError

; 74   :     }
; 75   : }

	add	rsp, 40					; 00000028H
	ret	0
$LN7@ZSTD_pthre:

; 70   :     case WAIT_ABANDONED:
; 71   :         return EINVAL;

	mov	eax, 22

; 74   :     }
; 75   : }

	add	rsp, 40					; 00000028H
	ret	0
$LN6@ZSTD_pthre:

; 67   :     case WAIT_OBJECT_0:
; 68   :         if (value_ptr) *value_ptr = thread.arg;
; 69   :         return 0;

	xor	eax, eax

; 74   :     }
; 75   : }

	add	rsp, 40					; 00000028H
	ret	0
ZSTD_pthread_join ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\common\threading.c
_TEXT	SEGMENT
thread$ = 64
unused$dead$ = 72
start_routine$dead$ = 80
arg$ = 88
ZSTD_pthread_create PROC

; 47   : {

$LN6:
	push	rbx
	sub	rsp, 48					; 00000030H

; 48   :     (void)unused;
; 49   :     thread->arg = arg;

	mov	QWORD PTR [rcx+16], r9

; 50   :     thread->start_routine = start_routine;

	lea	rax, OFFSET FLAT:POOL_thread
	mov	QWORD PTR [rcx+8], rax

; 51   :     thread->handle = (HANDLE) _beginthreadex(NULL, 0, worker, thread, 0, NULL);

	lea	r8, OFFSET FLAT:worker
	xor	eax, eax
	mov	rbx, rcx
	mov	r9, rcx
	mov	QWORD PTR [rsp+40], rax
	xor	edx, edx
	mov	DWORD PTR [rsp+32], eax
	xor	ecx, ecx
	call	QWORD PTR __imp__beginthreadex
	mov	QWORD PTR [rbx], rax

; 52   : 
; 53   :     if (!thread->handle)

	test	rax, rax
	jne	SHORT $LN2@ZSTD_pthre

; 54   :         return errno;

	call	QWORD PTR __imp__errno
	mov	eax, DWORD PTR [rax]

; 57   : }

	add	rsp, 48					; 00000030H
	pop	rbx
	ret	0
$LN2@ZSTD_pthre:

; 55   :     else
; 56   :         return 0;

	xor	eax, eax

; 57   : }

	add	rsp, 48					; 00000030H
	pop	rbx
	ret	0
ZSTD_pthread_create ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File E:\dev\pyzstd\lib\common\threading.c
_TEXT	SEGMENT
arg$ = 48
worker	PROC

; 39   : {

	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx

; 40   :     ZSTD_pthread_t* const thread = (ZSTD_pthread_t*) arg;
; 41   :     thread->arg = thread->start_routine(thread->arg);

	mov	rcx, QWORD PTR [rcx+16]
	call	QWORD PTR [rbx+8]
	mov	QWORD PTR [rbx+16], rax

; 42   :     return 0;

	xor	eax, eax

; 43   : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
worker	ENDP
_TEXT	ENDS
END
